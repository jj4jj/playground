// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db/Role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db/Role.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace db {

namespace {

const ::google::protobuf::Descriptor* RoleBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleBase_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleBase_Gender_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RoleHeroAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHeroAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroArm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroArm_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHeroArm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHeroArm_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHeroSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHeroSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHeroGrowth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHeroGrowth_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroStrategy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroStrategy_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RolePackGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RolePackGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* RolePackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RolePackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleOneTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleOneTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleOneTask_RoleOneTaskState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RoleTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleGrowth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleGrowth_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSNS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSNS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleActInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleActInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleExt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleExt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role__PrimaryKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role__PrimaryKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role__MaxLength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role__MaxLength_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_2fRole_2eproto() {
  protobuf_AddDesc_db_2fRole_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db/Role.proto");
  GOOGLE_CHECK(file != NULL);
  RoleBase_descriptor_ = file->message_type(0);
  static const int RoleBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBase, gendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBase, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBase, diamonds_),
  };
  RoleBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleBase_descriptor_,
      RoleBase::default_instance_,
      RoleBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleBase));
  RoleBase_Gender_descriptor_ = RoleBase_descriptor_->enum_type(0);
  RoleHeroAttr_descriptor_ = file->message_type(1);
  static const int RoleHeroAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroAttr, attrs_),
  };
  RoleHeroAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHeroAttr_descriptor_,
      RoleHeroAttr::default_instance_,
      RoleHeroAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHeroAttr));
  HeroArm_descriptor_ = file->message_type(2);
  static const int HeroArm_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroArm, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroArm, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroArm, pos_),
  };
  HeroArm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroArm_descriptor_,
      HeroArm::default_instance_,
      HeroArm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroArm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroArm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroArm));
  RoleHeroArm_descriptor_ = file->message_type(3);
  static const int RoleHeroArm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroArm, grids_),
  };
  RoleHeroArm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHeroArm_descriptor_,
      RoleHeroArm::default_instance_,
      RoleHeroArm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroArm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroArm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHeroArm));
  HeroSkill_descriptor_ = file->message_type(4);
  static const int HeroSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSkill, lv_),
  };
  HeroSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroSkill_descriptor_,
      HeroSkill::default_instance_,
      HeroSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroSkill));
  RoleHeroSkill_descriptor_ = file->message_type(5);
  static const int RoleHeroSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroSkill, skills_),
  };
  RoleHeroSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHeroSkill_descriptor_,
      RoleHeroSkill::default_instance_,
      RoleHeroSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHeroSkill));
  RoleHeroGrowth_descriptor_ = file->message_type(6);
  static const int RoleHeroGrowth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroGrowth, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroGrowth, exp_),
  };
  RoleHeroGrowth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHeroGrowth_descriptor_,
      RoleHeroGrowth::default_instance_,
      RoleHeroGrowth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroGrowth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroGrowth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHeroGrowth));
  RoleHero_descriptor_ = file->message_type(7);
  static const int RoleHero_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHero, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHero, growth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHero, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHero, arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHero, skill_),
  };
  RoleHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHero_descriptor_,
      RoleHero::default_instance_,
      RoleHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHero));
  HeroStrategy_descriptor_ = file->message_type(8);
  static const int HeroStrategy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroStrategy, joinwarheroids_),
  };
  HeroStrategy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroStrategy_descriptor_,
      HeroStrategy::default_instance_,
      HeroStrategy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroStrategy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroStrategy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroStrategy));
  RoleHeroInfo_descriptor_ = file->message_type(9);
  static const int RoleHeroInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, strategy_),
  };
  RoleHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHeroInfo_descriptor_,
      RoleHeroInfo::default_instance_,
      RoleHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHeroInfo));
  RoleItem_descriptor_ = file->message_type(10);
  static const int RoleItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItem, level_),
  };
  RoleItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleItem_descriptor_,
      RoleItem::default_instance_,
      RoleItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleItem));
  RolePackGrid_descriptor_ = file->message_type(11);
  static const int RolePackGrid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackGrid, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackGrid, num_),
  };
  RolePackGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RolePackGrid_descriptor_,
      RolePackGrid::default_instance_,
      RolePackGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RolePackGrid));
  RolePackage_descriptor_ = file->message_type(12);
  static const int RolePackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackage, maxgrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackage, grids_),
  };
  RolePackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RolePackage_descriptor_,
      RolePackage::default_instance_,
      RolePackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RolePackage));
  RoleOneTask_descriptor_ = file->message_type(13);
  static const int RoleOneTask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOneTask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOneTask, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOneTask, state_),
  };
  RoleOneTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleOneTask_descriptor_,
      RoleOneTask::default_instance_,
      RoleOneTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOneTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOneTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleOneTask));
  RoleOneTask_RoleOneTaskState_descriptor_ = RoleOneTask_descriptor_->enum_type(0);
  RoleTaskInfo_descriptor_ = file->message_type(14);
  static const int RoleTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTaskInfo, doing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTaskInfo, finishbitmap_),
  };
  RoleTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleTaskInfo_descriptor_,
      RoleTaskInfo::default_instance_,
      RoleTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleTaskInfo));
  RoleGrowth_descriptor_ = file->message_type(15);
  static const int RoleGrowth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGrowth, task_),
  };
  RoleGrowth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleGrowth_descriptor_,
      RoleGrowth::default_instance_,
      RoleGrowth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGrowth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGrowth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleGrowth));
  RoleStage_descriptor_ = file->message_type(16);
  static const int RoleStage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleStage, curstage_),
  };
  RoleStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleStage_descriptor_,
      RoleStage::default_instance_,
      RoleStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleStage));
  RoleSNS_descriptor_ = file->message_type(17);
  static const int RoleSNS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSNS, maxfrinds_),
  };
  RoleSNS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSNS_descriptor_,
      RoleSNS::default_instance_,
      RoleSNS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSNS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSNS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSNS));
  RoleActInfo_descriptor_ = file->message_type(18);
  static const int RoleActInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActInfo, dummy_),
  };
  RoleActInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleActInfo_descriptor_,
      RoleActInfo::default_instance_,
      RoleActInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleActInfo));
  RoleExt_descriptor_ = file->message_type(19);
  static const int RoleExt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleExt, dummy_),
  };
  RoleExt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleExt_descriptor_,
      RoleExt::default_instance_,
      RoleExt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleExt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleExt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleExt));
  Role_descriptor_ = file->message_type(20);
  static const int Role_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, grow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, sns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, ext_),
  };
  Role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_descriptor_,
      Role::default_instance_,
      Role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role));
  Role__PrimaryKey_descriptor_ = Role_descriptor_->nested_type(0);
  static const int Role__PrimaryKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role__PrimaryKey, rid_),
  };
  Role__PrimaryKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role__PrimaryKey_descriptor_,
      Role__PrimaryKey::default_instance_,
      Role__PrimaryKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role__PrimaryKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role__PrimaryKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role__PrimaryKey));
  Role__MaxLength_descriptor_ = Role_descriptor_->nested_type(1);
  static const int Role__MaxLength_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role__MaxLength, name_),
  };
  Role__MaxLength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role__MaxLength_descriptor_,
      Role__MaxLength::default_instance_,
      Role__MaxLength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role__MaxLength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role__MaxLength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role__MaxLength));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_2fRole_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleBase_descriptor_, &RoleBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHeroAttr_descriptor_, &RoleHeroAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroArm_descriptor_, &HeroArm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHeroArm_descriptor_, &RoleHeroArm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroSkill_descriptor_, &HeroSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHeroSkill_descriptor_, &RoleHeroSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHeroGrowth_descriptor_, &RoleHeroGrowth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHero_descriptor_, &RoleHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroStrategy_descriptor_, &HeroStrategy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHeroInfo_descriptor_, &RoleHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleItem_descriptor_, &RoleItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RolePackGrid_descriptor_, &RolePackGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RolePackage_descriptor_, &RolePackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleOneTask_descriptor_, &RoleOneTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleTaskInfo_descriptor_, &RoleTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleGrowth_descriptor_, &RoleGrowth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleStage_descriptor_, &RoleStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSNS_descriptor_, &RoleSNS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleActInfo_descriptor_, &RoleActInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleExt_descriptor_, &RoleExt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_descriptor_, &Role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role__PrimaryKey_descriptor_, &Role__PrimaryKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role__MaxLength_descriptor_, &Role__MaxLength::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_2fRole_2eproto() {
  delete RoleBase::default_instance_;
  delete RoleBase_reflection_;
  delete RoleHeroAttr::default_instance_;
  delete RoleHeroAttr_reflection_;
  delete HeroArm::default_instance_;
  delete HeroArm_reflection_;
  delete RoleHeroArm::default_instance_;
  delete RoleHeroArm_reflection_;
  delete HeroSkill::default_instance_;
  delete HeroSkill_reflection_;
  delete RoleHeroSkill::default_instance_;
  delete RoleHeroSkill_reflection_;
  delete RoleHeroGrowth::default_instance_;
  delete RoleHeroGrowth_reflection_;
  delete RoleHero::default_instance_;
  delete RoleHero_reflection_;
  delete HeroStrategy::default_instance_;
  delete HeroStrategy_reflection_;
  delete RoleHeroInfo::default_instance_;
  delete RoleHeroInfo_reflection_;
  delete RoleItem::default_instance_;
  delete RoleItem_reflection_;
  delete RolePackGrid::default_instance_;
  delete RolePackGrid_reflection_;
  delete RolePackage::default_instance_;
  delete RolePackage_reflection_;
  delete RoleOneTask::default_instance_;
  delete RoleOneTask_reflection_;
  delete RoleTaskInfo::default_instance_;
  delete RoleTaskInfo_reflection_;
  delete RoleGrowth::default_instance_;
  delete RoleGrowth_reflection_;
  delete RoleStage::default_instance_;
  delete RoleStage_reflection_;
  delete RoleSNS::default_instance_;
  delete RoleSNS_reflection_;
  delete RoleActInfo::default_instance_;
  delete RoleActInfo_reflection_;
  delete RoleExt::default_instance_;
  delete RoleExt_reflection_;
  delete Role::default_instance_;
  delete Role_reflection_;
  delete Role__PrimaryKey::default_instance_;
  delete Role__PrimaryKey_reflection_;
  delete Role__MaxLength::default_instance_;
  delete Role__MaxLength_reflection_;
}

void protobuf_AddDesc_db_2fRole_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdb/Role.proto\022\002db\"{\n\010RoleBase\022)\n\006gendo"
    "r\030\001 \002(\0162\023.db.RoleBase.Gender:\004MALE\022\017\n\004go"
    "ld\030\002 \002(\r:\0010\022\023\n\010diamonds\030\003 \002(\r:\0010\"\036\n\006Gend"
    "er\022\010\n\004MALE\020\000\022\n\n\006FEMALE\020\001\"\035\n\014RoleHeroAttr"
    "\022\r\n\005attrs\030\001 \003(\005\".\n\007HeroArm\022\n\n\002id\030\001 \001(\r\022\n"
    "\n\002lv\030\002 \001(\r\022\013\n\003pos\030\003 \001(\r\")\n\013RoleHeroArm\022\032"
    "\n\005grids\030\001 \003(\0132\013.db.HeroArm\"#\n\tHeroSkill\022"
    "\n\n\002id\030\001 \001(\r\022\n\n\002lv\030\002 \001(\r\".\n\rRoleHeroSkill"
    "\022\035\n\006skills\030\001 \003(\0132\r.db.HeroSkill\"2\n\016RoleH"
    "eroGrowth\022\020\n\005level\030\001 \002(\r:\0011\022\016\n\003exp\030\002 \002(\r"
    ":\0010\"\235\001\n\010RoleHero\022\r\n\002id\030\001 \002(\r:\0010\022\"\n\006growt"
    "h\030\002 \002(\0132\022.db.RoleHeroGrowth\022\036\n\004attr\030\003 \002("
    "\0132\020.db.RoleHeroAttr\022\034\n\003arm\030\004 \002(\0132\017.db.Ro"
    "leHeroArm\022 \n\005skill\030\005 \002(\0132\021.db.RoleHeroSk"
    "ill\"&\n\014HeroStrategy\022\026\n\016joinWarHeroIDs\030\001 "
    "\003(\r\"O\n\014RoleHeroInfo\022\033\n\005heros\030\001 \003(\0132\014.db."
    "RoleHero\022\"\n\010strategy\030\002 \002(\0132\020.db.HeroStra"
    "tegy\"%\n\010RoleItem\022\n\n\002id\030\001 \002(\r\022\r\n\005level\030\002 "
    "\001(\r\":\n\014RolePackGrid\022\032\n\004item\030\001 \002(\0132\014.db.R"
    "oleItem\022\016\n\003num\030\002 \002(\r:\0010\"B\n\013RolePackage\022\022"
    "\n\007maxGrid\030\001 \002(\r:\0010\022\037\n\005grids\030\002 \003(\0132\020.db.R"
    "olePackGrid\"t\n\013RoleOneTask\022\n\n\002id\030\001 \002(\r\022\013"
    "\n\003cur\030\002 \001(\r\022\r\n\005state\030\003 \001(\r\"=\n\020RoleOneTas"
    "kState\022\024\n\020TASK_STATE_DOING\020\000\022\023\n\017TASK_STA"
    "TE_DONE\020\001\"H\n\014RoleTaskInfo\022\036\n\005doing\030\001 \003(\013"
    "2\017.db.RoleOneTask\022\030\n\014finishBitMap\030\002 \003(\rB"
    "\002\020\001\",\n\nRoleGrowth\022\036\n\004task\030\001 \001(\0132\020.db.Rol"
    "eTaskInfo\" \n\tRoleStage\022\023\n\010curStage\030\001 \002(\r"
    ":\0010\"\037\n\007RoleSNS\022\024\n\tmaxfrinds\030\001 \002(\r:\0015\"\034\n\013"
    "RoleActInfo\022\r\n\005dummy\030\001 \001(\r\"\030\n\007RoleExt\022\r\n"
    "\005dummy\030\001 \002(\r\"\306\002\n\004Role\022\013\n\003rid\030\001 \002(\004\022\014\n\004na"
    "me\030\002 \002(\t\022\032\n\004base\030\003 \002(\0132\014.db.RoleBase\022\036\n\004"
    "hero\030\004 \002(\0132\020.db.RoleHeroInfo\022\035\n\004pack\030\005 \002"
    "(\0132\017.db.RolePackage\022\034\n\004grow\030\006 \002(\0132\016.db.R"
    "oleGrowth\022\034\n\005stage\030\007 \002(\0132\r.db.RoleStage\022"
    "\030\n\003sns\030\010 \002(\0132\013.db.RoleSNS\022\034\n\003act\030\t \002(\0132\017"
    ".db.RoleActInfo\022\030\n\003ext\030\n \002(\0132\013.db.RoleEx"
    "t\032\032\n\013_PrimaryKey\022\013\n\003rid\030\001 \001(\r\032\036\n\n_MaxLen"
    "gth\022\020\n\004name\030\001 \001(\r:\00232", 1541);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db/Role.proto", &protobuf_RegisterTypes);
  RoleBase::default_instance_ = new RoleBase();
  RoleHeroAttr::default_instance_ = new RoleHeroAttr();
  HeroArm::default_instance_ = new HeroArm();
  RoleHeroArm::default_instance_ = new RoleHeroArm();
  HeroSkill::default_instance_ = new HeroSkill();
  RoleHeroSkill::default_instance_ = new RoleHeroSkill();
  RoleHeroGrowth::default_instance_ = new RoleHeroGrowth();
  RoleHero::default_instance_ = new RoleHero();
  HeroStrategy::default_instance_ = new HeroStrategy();
  RoleHeroInfo::default_instance_ = new RoleHeroInfo();
  RoleItem::default_instance_ = new RoleItem();
  RolePackGrid::default_instance_ = new RolePackGrid();
  RolePackage::default_instance_ = new RolePackage();
  RoleOneTask::default_instance_ = new RoleOneTask();
  RoleTaskInfo::default_instance_ = new RoleTaskInfo();
  RoleGrowth::default_instance_ = new RoleGrowth();
  RoleStage::default_instance_ = new RoleStage();
  RoleSNS::default_instance_ = new RoleSNS();
  RoleActInfo::default_instance_ = new RoleActInfo();
  RoleExt::default_instance_ = new RoleExt();
  Role::default_instance_ = new Role();
  Role__PrimaryKey::default_instance_ = new Role__PrimaryKey();
  Role__MaxLength::default_instance_ = new Role__MaxLength();
  RoleBase::default_instance_->InitAsDefaultInstance();
  RoleHeroAttr::default_instance_->InitAsDefaultInstance();
  HeroArm::default_instance_->InitAsDefaultInstance();
  RoleHeroArm::default_instance_->InitAsDefaultInstance();
  HeroSkill::default_instance_->InitAsDefaultInstance();
  RoleHeroSkill::default_instance_->InitAsDefaultInstance();
  RoleHeroGrowth::default_instance_->InitAsDefaultInstance();
  RoleHero::default_instance_->InitAsDefaultInstance();
  HeroStrategy::default_instance_->InitAsDefaultInstance();
  RoleHeroInfo::default_instance_->InitAsDefaultInstance();
  RoleItem::default_instance_->InitAsDefaultInstance();
  RolePackGrid::default_instance_->InitAsDefaultInstance();
  RolePackage::default_instance_->InitAsDefaultInstance();
  RoleOneTask::default_instance_->InitAsDefaultInstance();
  RoleTaskInfo::default_instance_->InitAsDefaultInstance();
  RoleGrowth::default_instance_->InitAsDefaultInstance();
  RoleStage::default_instance_->InitAsDefaultInstance();
  RoleSNS::default_instance_->InitAsDefaultInstance();
  RoleActInfo::default_instance_->InitAsDefaultInstance();
  RoleExt::default_instance_->InitAsDefaultInstance();
  Role::default_instance_->InitAsDefaultInstance();
  Role__PrimaryKey::default_instance_->InitAsDefaultInstance();
  Role__MaxLength::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_2fRole_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_2fRole_2eproto {
  StaticDescriptorInitializer_db_2fRole_2eproto() {
    protobuf_AddDesc_db_2fRole_2eproto();
  }
} static_descriptor_initializer_db_2fRole_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RoleBase_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleBase_Gender_descriptor_;
}
bool RoleBase_Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoleBase_Gender RoleBase::MALE;
const RoleBase_Gender RoleBase::FEMALE;
const RoleBase_Gender RoleBase::Gender_MIN;
const RoleBase_Gender RoleBase::Gender_MAX;
const int RoleBase::Gender_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoleBase::kGendorFieldNumber;
const int RoleBase::kGoldFieldNumber;
const int RoleBase::kDiamondsFieldNumber;
#endif  // !_MSC_VER

RoleBase::RoleBase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleBase)
}

void RoleBase::InitAsDefaultInstance() {
}

RoleBase::RoleBase(const RoleBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleBase)
}

void RoleBase::SharedCtor() {
  _cached_size_ = 0;
  gendor_ = 0;
  gold_ = 0u;
  diamonds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleBase::~RoleBase() {
  // @@protoc_insertion_point(destructor:db.RoleBase)
  SharedDtor();
}

void RoleBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleBase_descriptor_;
}

const RoleBase& RoleBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleBase* RoleBase::default_instance_ = NULL;

RoleBase* RoleBase::New() const {
  return new RoleBase;
}

void RoleBase::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleBase*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gendor_, diamonds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .db.RoleBase.Gender gendor = 1 [default = MALE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::db::RoleBase_Gender_IsValid(value)) {
            set_gendor(static_cast< ::db::RoleBase_Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required uint32 gold = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_diamonds;
        break;
      }

      // required uint32 diamonds = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamonds_)));
          set_has_diamonds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleBase)
  return false;
#undef DO_
}

void RoleBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleBase)
  // required .db.RoleBase.Gender gendor = 1 [default = MALE];
  if (has_gendor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gendor(), output);
  }

  // required uint32 gold = 2 [default = 0];
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold(), output);
  }

  // required uint32 diamonds = 3 [default = 0];
  if (has_diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->diamonds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleBase)
}

::google::protobuf::uint8* RoleBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleBase)
  // required .db.RoleBase.Gender gendor = 1 [default = MALE];
  if (has_gendor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gendor(), target);
  }

  // required uint32 gold = 2 [default = 0];
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold(), target);
  }

  // required uint32 diamonds = 3 [default = 0];
  if (has_diamonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->diamonds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleBase)
  return target;
}

int RoleBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .db.RoleBase.Gender gendor = 1 [default = MALE];
    if (has_gendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gendor());
    }

    // required uint32 gold = 2 [default = 0];
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // required uint32 diamonds = 3 [default = 0];
    if (has_diamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamonds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleBase::MergeFrom(const RoleBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gendor()) {
      set_gendor(from.gendor());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamonds()) {
      set_diamonds(from.diamonds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleBase::CopyFrom(const RoleBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoleBase::Swap(RoleBase* other) {
  if (other != this) {
    std::swap(gendor_, other->gendor_);
    std::swap(gold_, other->gold_);
    std::swap(diamonds_, other->diamonds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleBase_descriptor_;
  metadata.reflection = RoleBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHeroAttr::kAttrsFieldNumber;
#endif  // !_MSC_VER

RoleHeroAttr::RoleHeroAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleHeroAttr)
}

void RoleHeroAttr::InitAsDefaultInstance() {
}

RoleHeroAttr::RoleHeroAttr(const RoleHeroAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleHeroAttr)
}

void RoleHeroAttr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHeroAttr::~RoleHeroAttr() {
  // @@protoc_insertion_point(destructor:db.RoleHeroAttr)
  SharedDtor();
}

void RoleHeroAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHeroAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHeroAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHeroAttr_descriptor_;
}

const RoleHeroAttr& RoleHeroAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleHeroAttr* RoleHeroAttr::default_instance_ = NULL;

RoleHeroAttr* RoleHeroAttr::New() const {
  return new RoleHeroAttr;
}

void RoleHeroAttr::Clear() {
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHeroAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleHeroAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 attrs = 1;
      case 1: {
        if (tag == 8) {
         parse_attrs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_attrs())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attrs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleHeroAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleHeroAttr)
  return false;
#undef DO_
}

void RoleHeroAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleHeroAttr)
  // repeated int32 attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleHeroAttr)
}

::google::protobuf::uint8* RoleHeroAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleHeroAttr)
  // repeated int32 attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleHeroAttr)
  return target;
}

int RoleHeroAttr::ByteSize() const {
  int total_size = 0;

  // repeated int32 attrs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->attrs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attrs(i));
    }
    total_size += 1 * this->attrs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHeroAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHeroAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHeroAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHeroAttr::MergeFrom(const RoleHeroAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHeroAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHeroAttr::CopyFrom(const RoleHeroAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHeroAttr::IsInitialized() const {

  return true;
}

void RoleHeroAttr::Swap(RoleHeroAttr* other) {
  if (other != this) {
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHeroAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHeroAttr_descriptor_;
  metadata.reflection = RoleHeroAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroArm::kIdFieldNumber;
const int HeroArm::kLvFieldNumber;
const int HeroArm::kPosFieldNumber;
#endif  // !_MSC_VER

HeroArm::HeroArm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.HeroArm)
}

void HeroArm::InitAsDefaultInstance() {
}

HeroArm::HeroArm(const HeroArm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.HeroArm)
}

void HeroArm::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  lv_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroArm::~HeroArm() {
  // @@protoc_insertion_point(destructor:db.HeroArm)
  SharedDtor();
}

void HeroArm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroArm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroArm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroArm_descriptor_;
}

const HeroArm& HeroArm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

HeroArm* HeroArm::default_instance_ = NULL;

HeroArm* HeroArm::New() const {
  return new HeroArm;
}

void HeroArm::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeroArm*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroArm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.HeroArm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 2;
      case 2: {
        if (tag == 16) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.HeroArm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.HeroArm)
  return false;
#undef DO_
}

void HeroArm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.HeroArm)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.HeroArm)
}

::google::protobuf::uint8* HeroArm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.HeroArm)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lv(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.HeroArm)
  return target;
}

int HeroArm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroArm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroArm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroArm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroArm::MergeFrom(const HeroArm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroArm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroArm::CopyFrom(const HeroArm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroArm::IsInitialized() const {

  return true;
}

void HeroArm::Swap(HeroArm* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroArm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroArm_descriptor_;
  metadata.reflection = HeroArm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHeroArm::kGridsFieldNumber;
#endif  // !_MSC_VER

RoleHeroArm::RoleHeroArm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleHeroArm)
}

void RoleHeroArm::InitAsDefaultInstance() {
}

RoleHeroArm::RoleHeroArm(const RoleHeroArm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleHeroArm)
}

void RoleHeroArm::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHeroArm::~RoleHeroArm() {
  // @@protoc_insertion_point(destructor:db.RoleHeroArm)
  SharedDtor();
}

void RoleHeroArm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHeroArm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHeroArm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHeroArm_descriptor_;
}

const RoleHeroArm& RoleHeroArm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleHeroArm* RoleHeroArm::default_instance_ = NULL;

RoleHeroArm* RoleHeroArm::New() const {
  return new RoleHeroArm;
}

void RoleHeroArm::Clear() {
  grids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHeroArm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleHeroArm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.HeroArm grids = 1;
      case 1: {
        if (tag == 10) {
         parse_grids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_grids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleHeroArm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleHeroArm)
  return false;
#undef DO_
}

void RoleHeroArm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleHeroArm)
  // repeated .db.HeroArm grids = 1;
  for (int i = 0; i < this->grids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleHeroArm)
}

::google::protobuf::uint8* RoleHeroArm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleHeroArm)
  // repeated .db.HeroArm grids = 1;
  for (int i = 0; i < this->grids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleHeroArm)
  return target;
}

int RoleHeroArm::ByteSize() const {
  int total_size = 0;

  // repeated .db.HeroArm grids = 1;
  total_size += 1 * this->grids_size();
  for (int i = 0; i < this->grids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHeroArm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHeroArm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHeroArm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHeroArm::MergeFrom(const RoleHeroArm& from) {
  GOOGLE_CHECK_NE(&from, this);
  grids_.MergeFrom(from.grids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHeroArm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHeroArm::CopyFrom(const RoleHeroArm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHeroArm::IsInitialized() const {

  return true;
}

void RoleHeroArm::Swap(RoleHeroArm* other) {
  if (other != this) {
    grids_.Swap(&other->grids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHeroArm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHeroArm_descriptor_;
  metadata.reflection = RoleHeroArm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroSkill::kIdFieldNumber;
const int HeroSkill::kLvFieldNumber;
#endif  // !_MSC_VER

HeroSkill::HeroSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.HeroSkill)
}

void HeroSkill::InitAsDefaultInstance() {
}

HeroSkill::HeroSkill(const HeroSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.HeroSkill)
}

void HeroSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroSkill::~HeroSkill() {
  // @@protoc_insertion_point(destructor:db.HeroSkill)
  SharedDtor();
}

void HeroSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroSkill_descriptor_;
}

const HeroSkill& HeroSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

HeroSkill* HeroSkill::default_instance_ = NULL;

HeroSkill* HeroSkill::New() const {
  return new HeroSkill;
}

void HeroSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeroSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, lv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.HeroSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 2;
      case 2: {
        if (tag == 16) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.HeroSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.HeroSkill)
  return false;
#undef DO_
}

void HeroSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.HeroSkill)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.HeroSkill)
}

::google::protobuf::uint8* HeroSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.HeroSkill)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.HeroSkill)
  return target;
}

int HeroSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroSkill::MergeFrom(const HeroSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroSkill::CopyFrom(const HeroSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroSkill::IsInitialized() const {

  return true;
}

void HeroSkill::Swap(HeroSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroSkill_descriptor_;
  metadata.reflection = HeroSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHeroSkill::kSkillsFieldNumber;
#endif  // !_MSC_VER

RoleHeroSkill::RoleHeroSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleHeroSkill)
}

void RoleHeroSkill::InitAsDefaultInstance() {
}

RoleHeroSkill::RoleHeroSkill(const RoleHeroSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleHeroSkill)
}

void RoleHeroSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHeroSkill::~RoleHeroSkill() {
  // @@protoc_insertion_point(destructor:db.RoleHeroSkill)
  SharedDtor();
}

void RoleHeroSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHeroSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHeroSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHeroSkill_descriptor_;
}

const RoleHeroSkill& RoleHeroSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleHeroSkill* RoleHeroSkill::default_instance_ = NULL;

RoleHeroSkill* RoleHeroSkill::New() const {
  return new RoleHeroSkill;
}

void RoleHeroSkill::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHeroSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleHeroSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.HeroSkill skills = 1;
      case 1: {
        if (tag == 10) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleHeroSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleHeroSkill)
  return false;
#undef DO_
}

void RoleHeroSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleHeroSkill)
  // repeated .db.HeroSkill skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleHeroSkill)
}

::google::protobuf::uint8* RoleHeroSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleHeroSkill)
  // repeated .db.HeroSkill skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleHeroSkill)
  return target;
}

int RoleHeroSkill::ByteSize() const {
  int total_size = 0;

  // repeated .db.HeroSkill skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHeroSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHeroSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHeroSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHeroSkill::MergeFrom(const RoleHeroSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHeroSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHeroSkill::CopyFrom(const RoleHeroSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHeroSkill::IsInitialized() const {

  return true;
}

void RoleHeroSkill::Swap(RoleHeroSkill* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHeroSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHeroSkill_descriptor_;
  metadata.reflection = RoleHeroSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHeroGrowth::kLevelFieldNumber;
const int RoleHeroGrowth::kExpFieldNumber;
#endif  // !_MSC_VER

RoleHeroGrowth::RoleHeroGrowth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleHeroGrowth)
}

void RoleHeroGrowth::InitAsDefaultInstance() {
}

RoleHeroGrowth::RoleHeroGrowth(const RoleHeroGrowth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleHeroGrowth)
}

void RoleHeroGrowth::SharedCtor() {
  _cached_size_ = 0;
  level_ = 1u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHeroGrowth::~RoleHeroGrowth() {
  // @@protoc_insertion_point(destructor:db.RoleHeroGrowth)
  SharedDtor();
}

void RoleHeroGrowth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHeroGrowth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHeroGrowth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHeroGrowth_descriptor_;
}

const RoleHeroGrowth& RoleHeroGrowth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleHeroGrowth* RoleHeroGrowth::default_instance_ = NULL;

RoleHeroGrowth* RoleHeroGrowth::New() const {
  return new RoleHeroGrowth;
}

void RoleHeroGrowth::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    level_ = 1u;
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHeroGrowth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleHeroGrowth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required uint32 exp = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleHeroGrowth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleHeroGrowth)
  return false;
#undef DO_
}

void RoleHeroGrowth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleHeroGrowth)
  // required uint32 level = 1 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 exp = 2 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleHeroGrowth)
}

::google::protobuf::uint8* RoleHeroGrowth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleHeroGrowth)
  // required uint32 level = 1 [default = 1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 exp = 2 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleHeroGrowth)
  return target;
}

int RoleHeroGrowth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 2 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHeroGrowth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHeroGrowth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHeroGrowth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHeroGrowth::MergeFrom(const RoleHeroGrowth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHeroGrowth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHeroGrowth::CopyFrom(const RoleHeroGrowth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHeroGrowth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleHeroGrowth::Swap(RoleHeroGrowth* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHeroGrowth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHeroGrowth_descriptor_;
  metadata.reflection = RoleHeroGrowth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHero::kIdFieldNumber;
const int RoleHero::kGrowthFieldNumber;
const int RoleHero::kAttrFieldNumber;
const int RoleHero::kArmFieldNumber;
const int RoleHero::kSkillFieldNumber;
#endif  // !_MSC_VER

RoleHero::RoleHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleHero)
}

void RoleHero::InitAsDefaultInstance() {
  growth_ = const_cast< ::db::RoleHeroGrowth*>(&::db::RoleHeroGrowth::default_instance());
  attr_ = const_cast< ::db::RoleHeroAttr*>(&::db::RoleHeroAttr::default_instance());
  arm_ = const_cast< ::db::RoleHeroArm*>(&::db::RoleHeroArm::default_instance());
  skill_ = const_cast< ::db::RoleHeroSkill*>(&::db::RoleHeroSkill::default_instance());
}

RoleHero::RoleHero(const RoleHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleHero)
}

void RoleHero::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  growth_ = NULL;
  attr_ = NULL;
  arm_ = NULL;
  skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHero::~RoleHero() {
  // @@protoc_insertion_point(destructor:db.RoleHero)
  SharedDtor();
}

void RoleHero::SharedDtor() {
  if (this != default_instance_) {
    delete growth_;
    delete attr_;
    delete arm_;
    delete skill_;
  }
}

void RoleHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHero_descriptor_;
}

const RoleHero& RoleHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleHero* RoleHero::default_instance_ = NULL;

RoleHero* RoleHero::New() const {
  return new RoleHero;
}

void RoleHero::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    id_ = 0u;
    if (has_growth()) {
      if (growth_ != NULL) growth_->::db::RoleHeroGrowth::Clear();
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::db::RoleHeroAttr::Clear();
    }
    if (has_arm()) {
      if (arm_ != NULL) arm_->::db::RoleHeroArm::Clear();
    }
    if (has_skill()) {
      if (skill_ != NULL) skill_->::db::RoleHeroSkill::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_growth;
        break;
      }

      // required .db.RoleHeroGrowth growth = 2;
      case 2: {
        if (tag == 18) {
         parse_growth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_growth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        break;
      }

      // required .db.RoleHeroAttr attr = 3;
      case 3: {
        if (tag == 26) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arm;
        break;
      }

      // required .db.RoleHeroArm arm = 4;
      case 4: {
        if (tag == 34) {
         parse_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_skill;
        break;
      }

      // required .db.RoleHeroSkill skill = 5;
      case 5: {
        if (tag == 42) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleHero)
  return false;
#undef DO_
}

void RoleHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleHero)
  // required uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .db.RoleHeroGrowth growth = 2;
  if (has_growth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->growth(), output);
  }

  // required .db.RoleHeroAttr attr = 3;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attr(), output);
  }

  // required .db.RoleHeroArm arm = 4;
  if (has_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arm(), output);
  }

  // required .db.RoleHeroSkill skill = 5;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleHero)
}

::google::protobuf::uint8* RoleHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleHero)
  // required uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .db.RoleHeroGrowth growth = 2;
  if (has_growth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->growth(), target);
  }

  // required .db.RoleHeroAttr attr = 3;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attr(), target);
  }

  // required .db.RoleHeroArm arm = 4;
  if (has_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arm(), target);
  }

  // required .db.RoleHeroSkill skill = 5;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleHero)
  return target;
}

int RoleHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .db.RoleHeroGrowth growth = 2;
    if (has_growth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->growth());
    }

    // required .db.RoleHeroAttr attr = 3;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // required .db.RoleHeroArm arm = 4;
    if (has_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arm());
    }

    // required .db.RoleHeroSkill skill = 5;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHero::MergeFrom(const RoleHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_growth()) {
      mutable_growth()->::db::RoleHeroGrowth::MergeFrom(from.growth());
    }
    if (from.has_attr()) {
      mutable_attr()->::db::RoleHeroAttr::MergeFrom(from.attr());
    }
    if (from.has_arm()) {
      mutable_arm()->::db::RoleHeroArm::MergeFrom(from.arm());
    }
    if (from.has_skill()) {
      mutable_skill()->::db::RoleHeroSkill::MergeFrom(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHero::CopyFrom(const RoleHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_growth()) {
    if (!this->growth().IsInitialized()) return false;
  }
  return true;
}

void RoleHero::Swap(RoleHero* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(growth_, other->growth_);
    std::swap(attr_, other->attr_);
    std::swap(arm_, other->arm_);
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHero_descriptor_;
  metadata.reflection = RoleHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroStrategy::kJoinWarHeroIDsFieldNumber;
#endif  // !_MSC_VER

HeroStrategy::HeroStrategy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.HeroStrategy)
}

void HeroStrategy::InitAsDefaultInstance() {
}

HeroStrategy::HeroStrategy(const HeroStrategy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.HeroStrategy)
}

void HeroStrategy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroStrategy::~HeroStrategy() {
  // @@protoc_insertion_point(destructor:db.HeroStrategy)
  SharedDtor();
}

void HeroStrategy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroStrategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroStrategy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroStrategy_descriptor_;
}

const HeroStrategy& HeroStrategy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

HeroStrategy* HeroStrategy::default_instance_ = NULL;

HeroStrategy* HeroStrategy::New() const {
  return new HeroStrategy;
}

void HeroStrategy::Clear() {
  joinwarheroids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroStrategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.HeroStrategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 joinWarHeroIDs = 1;
      case 1: {
        if (tag == 8) {
         parse_joinWarHeroIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_joinwarheroids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_joinwarheroids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_joinWarHeroIDs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.HeroStrategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.HeroStrategy)
  return false;
#undef DO_
}

void HeroStrategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.HeroStrategy)
  // repeated uint32 joinWarHeroIDs = 1;
  for (int i = 0; i < this->joinwarheroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->joinwarheroids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.HeroStrategy)
}

::google::protobuf::uint8* HeroStrategy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.HeroStrategy)
  // repeated uint32 joinWarHeroIDs = 1;
  for (int i = 0; i < this->joinwarheroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->joinwarheroids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.HeroStrategy)
  return target;
}

int HeroStrategy::ByteSize() const {
  int total_size = 0;

  // repeated uint32 joinWarHeroIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->joinwarheroids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->joinwarheroids(i));
    }
    total_size += 1 * this->joinwarheroids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroStrategy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroStrategy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroStrategy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroStrategy::MergeFrom(const HeroStrategy& from) {
  GOOGLE_CHECK_NE(&from, this);
  joinwarheroids_.MergeFrom(from.joinwarheroids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroStrategy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroStrategy::CopyFrom(const HeroStrategy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroStrategy::IsInitialized() const {

  return true;
}

void HeroStrategy::Swap(HeroStrategy* other) {
  if (other != this) {
    joinwarheroids_.Swap(&other->joinwarheroids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroStrategy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroStrategy_descriptor_;
  metadata.reflection = HeroStrategy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHeroInfo::kHerosFieldNumber;
const int RoleHeroInfo::kStrategyFieldNumber;
#endif  // !_MSC_VER

RoleHeroInfo::RoleHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleHeroInfo)
}

void RoleHeroInfo::InitAsDefaultInstance() {
  strategy_ = const_cast< ::db::HeroStrategy*>(&::db::HeroStrategy::default_instance());
}

RoleHeroInfo::RoleHeroInfo(const RoleHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleHeroInfo)
}

void RoleHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  strategy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHeroInfo::~RoleHeroInfo() {
  // @@protoc_insertion_point(destructor:db.RoleHeroInfo)
  SharedDtor();
}

void RoleHeroInfo::SharedDtor() {
  if (this != default_instance_) {
    delete strategy_;
  }
}

void RoleHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHeroInfo_descriptor_;
}

const RoleHeroInfo& RoleHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleHeroInfo* RoleHeroInfo::default_instance_ = NULL;

RoleHeroInfo* RoleHeroInfo::New() const {
  return new RoleHeroInfo;
}

void RoleHeroInfo::Clear() {
  if (has_strategy()) {
    if (strategy_ != NULL) strategy_->::db::HeroStrategy::Clear();
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.RoleHero heros = 1;
      case 1: {
        if (tag == 10) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_heros;
        if (input->ExpectTag(18)) goto parse_strategy;
        break;
      }

      // required .db.HeroStrategy strategy = 2;
      case 2: {
        if (tag == 18) {
         parse_strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strategy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleHeroInfo)
  return false;
#undef DO_
}

void RoleHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleHeroInfo)
  // repeated .db.RoleHero heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heros(i), output);
  }

  // required .db.HeroStrategy strategy = 2;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strategy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleHeroInfo)
}

::google::protobuf::uint8* RoleHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleHeroInfo)
  // repeated .db.RoleHero heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heros(i), target);
  }

  // required .db.HeroStrategy strategy = 2;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strategy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleHeroInfo)
  return target;
}

int RoleHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .db.HeroStrategy strategy = 2;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strategy());
    }

  }
  // repeated .db.RoleHero heros = 1;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHeroInfo::MergeFrom(const RoleHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_strategy()) {
      mutable_strategy()->::db::HeroStrategy::MergeFrom(from.strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHeroInfo::CopyFrom(const RoleHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHeroInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->heros())) return false;
  return true;
}

void RoleHeroInfo::Swap(RoleHeroInfo* other) {
  if (other != this) {
    heros_.Swap(&other->heros_);
    std::swap(strategy_, other->strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHeroInfo_descriptor_;
  metadata.reflection = RoleHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleItem::kIdFieldNumber;
const int RoleItem::kLevelFieldNumber;
#endif  // !_MSC_VER

RoleItem::RoleItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleItem)
}

void RoleItem::InitAsDefaultInstance() {
}

RoleItem::RoleItem(const RoleItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleItem)
}

void RoleItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleItem::~RoleItem() {
  // @@protoc_insertion_point(destructor:db.RoleItem)
  SharedDtor();
}

void RoleItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleItem_descriptor_;
}

const RoleItem& RoleItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleItem* RoleItem::default_instance_ = NULL;

RoleItem* RoleItem::New() const {
  return new RoleItem;
}

void RoleItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleItem)
  return false;
#undef DO_
}

void RoleItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleItem)
}

::google::protobuf::uint8* RoleItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleItem)
  return target;
}

int RoleItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleItem::MergeFrom(const RoleItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleItem::CopyFrom(const RoleItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleItem::Swap(RoleItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleItem_descriptor_;
  metadata.reflection = RoleItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RolePackGrid::kItemFieldNumber;
const int RolePackGrid::kNumFieldNumber;
#endif  // !_MSC_VER

RolePackGrid::RolePackGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RolePackGrid)
}

void RolePackGrid::InitAsDefaultInstance() {
  item_ = const_cast< ::db::RoleItem*>(&::db::RoleItem::default_instance());
}

RolePackGrid::RolePackGrid(const RolePackGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RolePackGrid)
}

void RolePackGrid::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RolePackGrid::~RolePackGrid() {
  // @@protoc_insertion_point(destructor:db.RolePackGrid)
  SharedDtor();
}

void RolePackGrid::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void RolePackGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RolePackGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RolePackGrid_descriptor_;
}

const RolePackGrid& RolePackGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RolePackGrid* RolePackGrid::default_instance_ = NULL;

RolePackGrid* RolePackGrid::New() const {
  return new RolePackGrid;
}

void RolePackGrid::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_item()) {
      if (item_ != NULL) item_->::db::RoleItem::Clear();
    }
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RolePackGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RolePackGrid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .db.RoleItem item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RolePackGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RolePackGrid)
  return false;
#undef DO_
}

void RolePackGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RolePackGrid)
  // required .db.RoleItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // required uint32 num = 2 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RolePackGrid)
}

::google::protobuf::uint8* RolePackGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RolePackGrid)
  // required .db.RoleItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // required uint32 num = 2 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RolePackGrid)
  return target;
}

int RolePackGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .db.RoleItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // required uint32 num = 2 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RolePackGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RolePackGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RolePackGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RolePackGrid::MergeFrom(const RolePackGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::db::RoleItem::MergeFrom(from.item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RolePackGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RolePackGrid::CopyFrom(const RolePackGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePackGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void RolePackGrid::Swap(RolePackGrid* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RolePackGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RolePackGrid_descriptor_;
  metadata.reflection = RolePackGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RolePackage::kMaxGridFieldNumber;
const int RolePackage::kGridsFieldNumber;
#endif  // !_MSC_VER

RolePackage::RolePackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RolePackage)
}

void RolePackage::InitAsDefaultInstance() {
}

RolePackage::RolePackage(const RolePackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RolePackage)
}

void RolePackage::SharedCtor() {
  _cached_size_ = 0;
  maxgrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RolePackage::~RolePackage() {
  // @@protoc_insertion_point(destructor:db.RolePackage)
  SharedDtor();
}

void RolePackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RolePackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RolePackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RolePackage_descriptor_;
}

const RolePackage& RolePackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RolePackage* RolePackage::default_instance_ = NULL;

RolePackage* RolePackage::New() const {
  return new RolePackage;
}

void RolePackage::Clear() {
  maxgrid_ = 0u;
  grids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RolePackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RolePackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maxGrid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxgrid_)));
          set_has_maxgrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_grids;
        break;
      }

      // repeated .db.RolePackGrid grids = 2;
      case 2: {
        if (tag == 18) {
         parse_grids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_grids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RolePackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RolePackage)
  return false;
#undef DO_
}

void RolePackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RolePackage)
  // required uint32 maxGrid = 1 [default = 0];
  if (has_maxgrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxgrid(), output);
  }

  // repeated .db.RolePackGrid grids = 2;
  for (int i = 0; i < this->grids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->grids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RolePackage)
}

::google::protobuf::uint8* RolePackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RolePackage)
  // required uint32 maxGrid = 1 [default = 0];
  if (has_maxgrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxgrid(), target);
  }

  // repeated .db.RolePackGrid grids = 2;
  for (int i = 0; i < this->grids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->grids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RolePackage)
  return target;
}

int RolePackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maxGrid = 1 [default = 0];
    if (has_maxgrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxgrid());
    }

  }
  // repeated .db.RolePackGrid grids = 2;
  total_size += 1 * this->grids_size();
  for (int i = 0; i < this->grids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RolePackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RolePackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RolePackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RolePackage::MergeFrom(const RolePackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  grids_.MergeFrom(from.grids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxgrid()) {
      set_maxgrid(from.maxgrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RolePackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RolePackage::CopyFrom(const RolePackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->grids())) return false;
  return true;
}

void RolePackage::Swap(RolePackage* other) {
  if (other != this) {
    std::swap(maxgrid_, other->maxgrid_);
    grids_.Swap(&other->grids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RolePackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RolePackage_descriptor_;
  metadata.reflection = RolePackage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RoleOneTask_RoleOneTaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleOneTask_RoleOneTaskState_descriptor_;
}
bool RoleOneTask_RoleOneTaskState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoleOneTask_RoleOneTaskState RoleOneTask::TASK_STATE_DOING;
const RoleOneTask_RoleOneTaskState RoleOneTask::TASK_STATE_DONE;
const RoleOneTask_RoleOneTaskState RoleOneTask::RoleOneTaskState_MIN;
const RoleOneTask_RoleOneTaskState RoleOneTask::RoleOneTaskState_MAX;
const int RoleOneTask::RoleOneTaskState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoleOneTask::kIdFieldNumber;
const int RoleOneTask::kCurFieldNumber;
const int RoleOneTask::kStateFieldNumber;
#endif  // !_MSC_VER

RoleOneTask::RoleOneTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleOneTask)
}

void RoleOneTask::InitAsDefaultInstance() {
}

RoleOneTask::RoleOneTask(const RoleOneTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleOneTask)
}

void RoleOneTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cur_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleOneTask::~RoleOneTask() {
  // @@protoc_insertion_point(destructor:db.RoleOneTask)
  SharedDtor();
}

void RoleOneTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleOneTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleOneTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleOneTask_descriptor_;
}

const RoleOneTask& RoleOneTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleOneTask* RoleOneTask::default_instance_ = NULL;

RoleOneTask* RoleOneTask::New() const {
  return new RoleOneTask;
}

void RoleOneTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleOneTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleOneTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleOneTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cur;
        break;
      }

      // optional uint32 cur = 2;
      case 2: {
        if (tag == 16) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleOneTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleOneTask)
  return false;
#undef DO_
}

void RoleOneTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleOneTask)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 cur = 2;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleOneTask)
}

::google::protobuf::uint8* RoleOneTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleOneTask)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 cur = 2;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleOneTask)
  return target;
}

int RoleOneTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 cur = 2;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleOneTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleOneTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleOneTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleOneTask::MergeFrom(const RoleOneTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleOneTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleOneTask::CopyFrom(const RoleOneTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOneTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleOneTask::Swap(RoleOneTask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cur_, other->cur_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleOneTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleOneTask_descriptor_;
  metadata.reflection = RoleOneTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleTaskInfo::kDoingFieldNumber;
const int RoleTaskInfo::kFinishBitMapFieldNumber;
#endif  // !_MSC_VER

RoleTaskInfo::RoleTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleTaskInfo)
}

void RoleTaskInfo::InitAsDefaultInstance() {
}

RoleTaskInfo::RoleTaskInfo(const RoleTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleTaskInfo)
}

void RoleTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleTaskInfo::~RoleTaskInfo() {
  // @@protoc_insertion_point(destructor:db.RoleTaskInfo)
  SharedDtor();
}

void RoleTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleTaskInfo_descriptor_;
}

const RoleTaskInfo& RoleTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleTaskInfo* RoleTaskInfo::default_instance_ = NULL;

RoleTaskInfo* RoleTaskInfo::New() const {
  return new RoleTaskInfo;
}

void RoleTaskInfo::Clear() {
  doing_.Clear();
  finishbitmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.RoleOneTask doing = 1;
      case 1: {
        if (tag == 10) {
         parse_doing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_doing;
        if (input->ExpectTag(18)) goto parse_finishBitMap;
        break;
      }

      // repeated uint32 finishBitMap = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_finishBitMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_finishbitmap())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_finishbitmap())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleTaskInfo)
  return false;
#undef DO_
}

void RoleTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleTaskInfo)
  // repeated .db.RoleOneTask doing = 1;
  for (int i = 0; i < this->doing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->doing(i), output);
  }

  // repeated uint32 finishBitMap = 2 [packed = true];
  if (this->finishbitmap_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_finishbitmap_cached_byte_size_);
  }
  for (int i = 0; i < this->finishbitmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->finishbitmap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleTaskInfo)
}

::google::protobuf::uint8* RoleTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleTaskInfo)
  // repeated .db.RoleOneTask doing = 1;
  for (int i = 0; i < this->doing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->doing(i), target);
  }

  // repeated uint32 finishBitMap = 2 [packed = true];
  if (this->finishbitmap_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _finishbitmap_cached_byte_size_, target);
  }
  for (int i = 0; i < this->finishbitmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->finishbitmap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleTaskInfo)
  return target;
}

int RoleTaskInfo::ByteSize() const {
  int total_size = 0;

  // repeated .db.RoleOneTask doing = 1;
  total_size += 1 * this->doing_size();
  for (int i = 0; i < this->doing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doing(i));
  }

  // repeated uint32 finishBitMap = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->finishbitmap_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->finishbitmap(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _finishbitmap_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleTaskInfo::MergeFrom(const RoleTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  doing_.MergeFrom(from.doing_);
  finishbitmap_.MergeFrom(from.finishbitmap_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleTaskInfo::CopyFrom(const RoleTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTaskInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->doing())) return false;
  return true;
}

void RoleTaskInfo::Swap(RoleTaskInfo* other) {
  if (other != this) {
    doing_.Swap(&other->doing_);
    finishbitmap_.Swap(&other->finishbitmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleTaskInfo_descriptor_;
  metadata.reflection = RoleTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleGrowth::kTaskFieldNumber;
#endif  // !_MSC_VER

RoleGrowth::RoleGrowth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleGrowth)
}

void RoleGrowth::InitAsDefaultInstance() {
  task_ = const_cast< ::db::RoleTaskInfo*>(&::db::RoleTaskInfo::default_instance());
}

RoleGrowth::RoleGrowth(const RoleGrowth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleGrowth)
}

void RoleGrowth::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleGrowth::~RoleGrowth() {
  // @@protoc_insertion_point(destructor:db.RoleGrowth)
  SharedDtor();
}

void RoleGrowth::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void RoleGrowth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleGrowth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleGrowth_descriptor_;
}

const RoleGrowth& RoleGrowth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleGrowth* RoleGrowth::default_instance_ = NULL;

RoleGrowth* RoleGrowth::New() const {
  return new RoleGrowth;
}

void RoleGrowth::Clear() {
  if (has_task()) {
    if (task_ != NULL) task_->::db::RoleTaskInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleGrowth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleGrowth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .db.RoleTaskInfo task = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleGrowth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleGrowth)
  return false;
#undef DO_
}

void RoleGrowth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleGrowth)
  // optional .db.RoleTaskInfo task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleGrowth)
}

::google::protobuf::uint8* RoleGrowth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleGrowth)
  // optional .db.RoleTaskInfo task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleGrowth)
  return target;
}

int RoleGrowth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .db.RoleTaskInfo task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleGrowth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleGrowth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleGrowth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleGrowth::MergeFrom(const RoleGrowth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::db::RoleTaskInfo::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleGrowth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleGrowth::CopyFrom(const RoleGrowth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleGrowth::IsInitialized() const {

  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void RoleGrowth::Swap(RoleGrowth* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleGrowth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleGrowth_descriptor_;
  metadata.reflection = RoleGrowth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleStage::kCurStageFieldNumber;
#endif  // !_MSC_VER

RoleStage::RoleStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleStage)
}

void RoleStage::InitAsDefaultInstance() {
}

RoleStage::RoleStage(const RoleStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleStage)
}

void RoleStage::SharedCtor() {
  _cached_size_ = 0;
  curstage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleStage::~RoleStage() {
  // @@protoc_insertion_point(destructor:db.RoleStage)
  SharedDtor();
}

void RoleStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleStage_descriptor_;
}

const RoleStage& RoleStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleStage* RoleStage::default_instance_ = NULL;

RoleStage* RoleStage::New() const {
  return new RoleStage;
}

void RoleStage::Clear() {
  curstage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 curStage = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstage_)));
          set_has_curstage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleStage)
  return false;
#undef DO_
}

void RoleStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleStage)
  // required uint32 curStage = 1 [default = 0];
  if (has_curstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curstage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleStage)
}

::google::protobuf::uint8* RoleStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleStage)
  // required uint32 curStage = 1 [default = 0];
  if (has_curstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curstage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleStage)
  return target;
}

int RoleStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 curStage = 1 [default = 0];
    if (has_curstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleStage::MergeFrom(const RoleStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curstage()) {
      set_curstage(from.curstage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleStage::CopyFrom(const RoleStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleStage::Swap(RoleStage* other) {
  if (other != this) {
    std::swap(curstage_, other->curstage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleStage_descriptor_;
  metadata.reflection = RoleStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSNS::kMaxfrindsFieldNumber;
#endif  // !_MSC_VER

RoleSNS::RoleSNS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleSNS)
}

void RoleSNS::InitAsDefaultInstance() {
}

RoleSNS::RoleSNS(const RoleSNS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleSNS)
}

void RoleSNS::SharedCtor() {
  _cached_size_ = 0;
  maxfrinds_ = 5u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSNS::~RoleSNS() {
  // @@protoc_insertion_point(destructor:db.RoleSNS)
  SharedDtor();
}

void RoleSNS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSNS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSNS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSNS_descriptor_;
}

const RoleSNS& RoleSNS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleSNS* RoleSNS::default_instance_ = NULL;

RoleSNS* RoleSNS::New() const {
  return new RoleSNS;
}

void RoleSNS::Clear() {
  maxfrinds_ = 5u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSNS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleSNS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maxfrinds = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxfrinds_)));
          set_has_maxfrinds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleSNS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleSNS)
  return false;
#undef DO_
}

void RoleSNS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleSNS)
  // required uint32 maxfrinds = 1 [default = 5];
  if (has_maxfrinds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxfrinds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleSNS)
}

::google::protobuf::uint8* RoleSNS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleSNS)
  // required uint32 maxfrinds = 1 [default = 5];
  if (has_maxfrinds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxfrinds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleSNS)
  return target;
}

int RoleSNS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maxfrinds = 1 [default = 5];
    if (has_maxfrinds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxfrinds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSNS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSNS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSNS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSNS::MergeFrom(const RoleSNS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxfrinds()) {
      set_maxfrinds(from.maxfrinds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSNS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSNS::CopyFrom(const RoleSNS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSNS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleSNS::Swap(RoleSNS* other) {
  if (other != this) {
    std::swap(maxfrinds_, other->maxfrinds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSNS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSNS_descriptor_;
  metadata.reflection = RoleSNS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleActInfo::kDummyFieldNumber;
#endif  // !_MSC_VER

RoleActInfo::RoleActInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleActInfo)
}

void RoleActInfo::InitAsDefaultInstance() {
}

RoleActInfo::RoleActInfo(const RoleActInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleActInfo)
}

void RoleActInfo::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleActInfo::~RoleActInfo() {
  // @@protoc_insertion_point(destructor:db.RoleActInfo)
  SharedDtor();
}

void RoleActInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleActInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleActInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleActInfo_descriptor_;
}

const RoleActInfo& RoleActInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleActInfo* RoleActInfo::default_instance_ = NULL;

RoleActInfo* RoleActInfo::New() const {
  return new RoleActInfo;
}

void RoleActInfo::Clear() {
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleActInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleActInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleActInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleActInfo)
  return false;
#undef DO_
}

void RoleActInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleActInfo)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleActInfo)
}

::google::protobuf::uint8* RoleActInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleActInfo)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleActInfo)
  return target;
}

int RoleActInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleActInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleActInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleActInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleActInfo::MergeFrom(const RoleActInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleActInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleActInfo::CopyFrom(const RoleActInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleActInfo::IsInitialized() const {

  return true;
}

void RoleActInfo::Swap(RoleActInfo* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleActInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleActInfo_descriptor_;
  metadata.reflection = RoleActInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleExt::kDummyFieldNumber;
#endif  // !_MSC_VER

RoleExt::RoleExt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RoleExt)
}

void RoleExt::InitAsDefaultInstance() {
}

RoleExt::RoleExt(const RoleExt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.RoleExt)
}

void RoleExt::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleExt::~RoleExt() {
  // @@protoc_insertion_point(destructor:db.RoleExt)
  SharedDtor();
}

void RoleExt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleExt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleExt_descriptor_;
}

const RoleExt& RoleExt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

RoleExt* RoleExt::default_instance_ = NULL;

RoleExt* RoleExt::New() const {
  return new RoleExt;
}

void RoleExt::Clear() {
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RoleExt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RoleExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RoleExt)
  return false;
#undef DO_
}

void RoleExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RoleExt)
  // required uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RoleExt)
}

::google::protobuf::uint8* RoleExt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.RoleExt)
  // required uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RoleExt)
  return target;
}

int RoleExt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleExt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleExt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleExt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleExt::MergeFrom(const RoleExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleExt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleExt::CopyFrom(const RoleExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleExt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleExt::Swap(RoleExt* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleExt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleExt_descriptor_;
  metadata.reflection = RoleExt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Role__PrimaryKey::kRidFieldNumber;
#endif  // !_MSC_VER

Role__PrimaryKey::Role__PrimaryKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.Role._PrimaryKey)
}

void Role__PrimaryKey::InitAsDefaultInstance() {
}

Role__PrimaryKey::Role__PrimaryKey(const Role__PrimaryKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.Role._PrimaryKey)
}

void Role__PrimaryKey::SharedCtor() {
  _cached_size_ = 0;
  rid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role__PrimaryKey::~Role__PrimaryKey() {
  // @@protoc_insertion_point(destructor:db.Role._PrimaryKey)
  SharedDtor();
}

void Role__PrimaryKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Role__PrimaryKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role__PrimaryKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role__PrimaryKey_descriptor_;
}

const Role__PrimaryKey& Role__PrimaryKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

Role__PrimaryKey* Role__PrimaryKey::default_instance_ = NULL;

Role__PrimaryKey* Role__PrimaryKey::New() const {
  return new Role__PrimaryKey;
}

void Role__PrimaryKey::Clear() {
  rid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role__PrimaryKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.Role._PrimaryKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.Role._PrimaryKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.Role._PrimaryKey)
  return false;
#undef DO_
}

void Role__PrimaryKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.Role._PrimaryKey)
  // optional uint32 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.Role._PrimaryKey)
}

::google::protobuf::uint8* Role__PrimaryKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.Role._PrimaryKey)
  // optional uint32 rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.Role._PrimaryKey)
  return target;
}

int Role__PrimaryKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role__PrimaryKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role__PrimaryKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role__PrimaryKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role__PrimaryKey::MergeFrom(const Role__PrimaryKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role__PrimaryKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role__PrimaryKey::CopyFrom(const Role__PrimaryKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role__PrimaryKey::IsInitialized() const {

  return true;
}

void Role__PrimaryKey::Swap(Role__PrimaryKey* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role__PrimaryKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role__PrimaryKey_descriptor_;
  metadata.reflection = Role__PrimaryKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Role__MaxLength::kNameFieldNumber;
#endif  // !_MSC_VER

Role__MaxLength::Role__MaxLength()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.Role._MaxLength)
}

void Role__MaxLength::InitAsDefaultInstance() {
}

Role__MaxLength::Role__MaxLength(const Role__MaxLength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.Role._MaxLength)
}

void Role__MaxLength::SharedCtor() {
  _cached_size_ = 0;
  name_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role__MaxLength::~Role__MaxLength() {
  // @@protoc_insertion_point(destructor:db.Role._MaxLength)
  SharedDtor();
}

void Role__MaxLength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Role__MaxLength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role__MaxLength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role__MaxLength_descriptor_;
}

const Role__MaxLength& Role__MaxLength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

Role__MaxLength* Role__MaxLength::default_instance_ = NULL;

Role__MaxLength* Role__MaxLength::New() const {
  return new Role__MaxLength;
}

void Role__MaxLength::Clear() {
  name_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role__MaxLength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.Role._MaxLength)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 name = 1 [default = 32];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.Role._MaxLength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.Role._MaxLength)
  return false;
#undef DO_
}

void Role__MaxLength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.Role._MaxLength)
  // optional uint32 name = 1 [default = 32];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.Role._MaxLength)
}

::google::protobuf::uint8* Role__MaxLength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.Role._MaxLength)
  // optional uint32 name = 1 [default = 32];
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.Role._MaxLength)
  return target;
}

int Role__MaxLength::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 name = 1 [default = 32];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role__MaxLength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role__MaxLength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role__MaxLength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role__MaxLength::MergeFrom(const Role__MaxLength& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role__MaxLength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role__MaxLength::CopyFrom(const Role__MaxLength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role__MaxLength::IsInitialized() const {

  return true;
}

void Role__MaxLength::Swap(Role__MaxLength* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role__MaxLength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role__MaxLength_descriptor_;
  metadata.reflection = Role__MaxLength_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Role::kRidFieldNumber;
const int Role::kNameFieldNumber;
const int Role::kBaseFieldNumber;
const int Role::kHeroFieldNumber;
const int Role::kPackFieldNumber;
const int Role::kGrowFieldNumber;
const int Role::kStageFieldNumber;
const int Role::kSnsFieldNumber;
const int Role::kActFieldNumber;
const int Role::kExtFieldNumber;
#endif  // !_MSC_VER

Role::Role()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.Role)
}

void Role::InitAsDefaultInstance() {
  base_ = const_cast< ::db::RoleBase*>(&::db::RoleBase::default_instance());
  hero_ = const_cast< ::db::RoleHeroInfo*>(&::db::RoleHeroInfo::default_instance());
  pack_ = const_cast< ::db::RolePackage*>(&::db::RolePackage::default_instance());
  grow_ = const_cast< ::db::RoleGrowth*>(&::db::RoleGrowth::default_instance());
  stage_ = const_cast< ::db::RoleStage*>(&::db::RoleStage::default_instance());
  sns_ = const_cast< ::db::RoleSNS*>(&::db::RoleSNS::default_instance());
  act_ = const_cast< ::db::RoleActInfo*>(&::db::RoleActInfo::default_instance());
  ext_ = const_cast< ::db::RoleExt*>(&::db::RoleExt::default_instance());
}

Role::Role(const Role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.Role)
}

void Role::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_ = NULL;
  hero_ = NULL;
  pack_ = NULL;
  grow_ = NULL;
  stage_ = NULL;
  sns_ = NULL;
  act_ = NULL;
  ext_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:db.Role)
  SharedDtor();
}

void Role::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete base_;
    delete hero_;
    delete pack_;
    delete grow_;
    delete stage_;
    delete sns_;
    delete act_;
    delete ext_;
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}

const Role& Role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fRole_2eproto();
  return *default_instance_;
}

Role* Role::default_instance_ = NULL;

Role* Role::New() const {
  return new Role;
}

void Role::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    rid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_base()) {
      if (base_ != NULL) base_->::db::RoleBase::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::db::RoleHeroInfo::Clear();
    }
    if (has_pack()) {
      if (pack_ != NULL) pack_->::db::RolePackage::Clear();
    }
    if (has_grow()) {
      if (grow_ != NULL) grow_->::db::RoleGrowth::Clear();
    }
    if (has_stage()) {
      if (stage_ != NULL) stage_->::db::RoleStage::Clear();
    }
    if (has_sns()) {
      if (sns_ != NULL) sns_->::db::RoleSNS::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_act()) {
      if (act_ != NULL) act_->::db::RoleActInfo::Clear();
    }
    if (has_ext()) {
      if (ext_ != NULL) ext_->::db::RoleExt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.Role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_base;
        break;
      }

      // required .db.RoleBase base = 3;
      case 3: {
        if (tag == 26) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hero;
        break;
      }

      // required .db.RoleHeroInfo hero = 4;
      case 4: {
        if (tag == 34) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pack;
        break;
      }

      // required .db.RolePackage pack = 5;
      case 5: {
        if (tag == 42) {
         parse_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_grow;
        break;
      }

      // required .db.RoleGrowth grow = 6;
      case 6: {
        if (tag == 50) {
         parse_grow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stage;
        break;
      }

      // required .db.RoleStage stage = 7;
      case 7: {
        if (tag == 58) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sns;
        break;
      }

      // required .db.RoleSNS sns = 8;
      case 8: {
        if (tag == 66) {
         parse_sns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_act;
        break;
      }

      // required .db.RoleActInfo act = 9;
      case 9: {
        if (tag == 74) {
         parse_act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_act()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ext;
        break;
      }

      // required .db.RoleExt ext = 10;
      case 10: {
        if (tag == 82) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.Role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.Role)
  return false;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.Role)
  // required uint64 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .db.RoleBase base = 3;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base(), output);
  }

  // required .db.RoleHeroInfo hero = 4;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hero(), output);
  }

  // required .db.RolePackage pack = 5;
  if (has_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pack(), output);
  }

  // required .db.RoleGrowth grow = 6;
  if (has_grow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->grow(), output);
  }

  // required .db.RoleStage stage = 7;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stage(), output);
  }

  // required .db.RoleSNS sns = 8;
  if (has_sns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sns(), output);
  }

  // required .db.RoleActInfo act = 9;
  if (has_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->act(), output);
  }

  // required .db.RoleExt ext = 10;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.Role)
}

::google::protobuf::uint8* Role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.Role)
  // required uint64 rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .db.RoleBase base = 3;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base(), target);
  }

  // required .db.RoleHeroInfo hero = 4;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hero(), target);
  }

  // required .db.RolePackage pack = 5;
  if (has_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pack(), target);
  }

  // required .db.RoleGrowth grow = 6;
  if (has_grow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->grow(), target);
  }

  // required .db.RoleStage stage = 7;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stage(), target);
  }

  // required .db.RoleSNS sns = 8;
  if (has_sns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sns(), target);
  }

  // required .db.RoleActInfo act = 9;
  if (has_act()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->act(), target);
  }

  // required .db.RoleExt ext = 10;
  if (has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.Role)
  return target;
}

int Role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .db.RoleBase base = 3;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required .db.RoleHeroInfo hero = 4;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

    // required .db.RolePackage pack = 5;
    if (has_pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pack());
    }

    // required .db.RoleGrowth grow = 6;
    if (has_grow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grow());
    }

    // required .db.RoleStage stage = 7;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage());
    }

    // required .db.RoleSNS sns = 8;
    if (has_sns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sns());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .db.RoleActInfo act = 9;
    if (has_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->act());
    }

    // required .db.RoleExt ext = 10;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_base()) {
      mutable_base()->::db::RoleBase::MergeFrom(from.base());
    }
    if (from.has_hero()) {
      mutable_hero()->::db::RoleHeroInfo::MergeFrom(from.hero());
    }
    if (from.has_pack()) {
      mutable_pack()->::db::RolePackage::MergeFrom(from.pack());
    }
    if (from.has_grow()) {
      mutable_grow()->::db::RoleGrowth::MergeFrom(from.grow());
    }
    if (from.has_stage()) {
      mutable_stage()->::db::RoleStage::MergeFrom(from.stage());
    }
    if (from.has_sns()) {
      mutable_sns()->::db::RoleSNS::MergeFrom(from.sns());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_act()) {
      mutable_act()->::db::RoleActInfo::MergeFrom(from.act());
    }
    if (from.has_ext()) {
      mutable_ext()->::db::RoleExt::MergeFrom(from.ext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  if (has_pack()) {
    if (!this->pack().IsInitialized()) return false;
  }
  if (has_grow()) {
    if (!this->grow().IsInitialized()) return false;
  }
  if (has_stage()) {
    if (!this->stage().IsInitialized()) return false;
  }
  if (has_sns()) {
    if (!this->sns().IsInitialized()) return false;
  }
  if (has_ext()) {
    if (!this->ext().IsInitialized()) return false;
  }
  return true;
}

void Role::Swap(Role* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(name_, other->name_);
    std::swap(base_, other->base_);
    std::swap(hero_, other->hero_);
    std::swap(pack_, other->pack_);
    std::swap(grow_, other->grow_);
    std::swap(stage_, other->stage_);
    std::swap(sns_, other->sns_);
    std::swap(act_, other->act_);
    std::swap(ext_, other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_descriptor_;
  metadata.reflection = Role_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)
