// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db/Account.proto

#ifndef PROTOBUF_db_2fAccount_2eproto__INCLUDED
#define PROTOBUF_db_2fAccount_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace db {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_2fAccount_2eproto();
void protobuf_AssignDesc_db_2fAccount_2eproto();
void protobuf_ShutdownFile_db_2fAccount_2eproto();

class AccountMisc;
class Account;
class Account__PrimaryKey;
class Account__MaxLength;
class Account__Index;
class AccountLR;
class AccountLR__PrimaryKey;
class AccountLR__MaxLength;
class AccountRL;
class AccountRL__PrimaryKey;
class AccountRL__MaxLength;

// ===================================================================

class AccountMisc : public ::google::protobuf::Message {
 public:
  AccountMisc();
  virtual ~AccountMisc();

  AccountMisc(const AccountMisc& from);

  inline AccountMisc& operator=(const AccountMisc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountMisc& default_instance();

  void Swap(AccountMisc* other);

  // implements Message ----------------------------------------------

  AccountMisc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountMisc& from);
  void MergeFrom(const AccountMisc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::google::protobuf::uint32 dummy() const;
  inline void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:db.AccountMisc)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dummy_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static AccountMisc* default_instance_;
};
// -------------------------------------------------------------------

class Account__PrimaryKey : public ::google::protobuf::Message {
 public:
  Account__PrimaryKey();
  virtual ~Account__PrimaryKey();

  Account__PrimaryKey(const Account__PrimaryKey& from);

  inline Account__PrimaryKey& operator=(const Account__PrimaryKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Account__PrimaryKey& default_instance();

  void Swap(Account__PrimaryKey* other);

  // implements Message ----------------------------------------------

  Account__PrimaryKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Account__PrimaryKey& from);
  void MergeFrom(const Account__PrimaryKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::uint32 gid() const;
  inline void set_gid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:db.Account._PrimaryKey)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gid_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static Account__PrimaryKey* default_instance_;
};
// -------------------------------------------------------------------

class Account__MaxLength : public ::google::protobuf::Message {
 public:
  Account__MaxLength();
  virtual ~Account__MaxLength();

  Account__MaxLength(const Account__MaxLength& from);

  inline Account__MaxLength& operator=(const Account__MaxLength& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Account__MaxLength& default_instance();

  void Swap(Account__MaxLength* other);

  // implements Message ----------------------------------------------

  Account__MaxLength* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Account__MaxLength& from);
  void MergeFrom(const Account__MaxLength& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 openid = 1 [default = 32];
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline ::google::protobuf::uint32 openid() const;
  inline void set_openid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:db.Account._MaxLength)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 openid_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static Account__MaxLength* default_instance_;
};
// -------------------------------------------------------------------

class Account__Index : public ::google::protobuf::Message {
 public:
  Account__Index();
  virtual ~Account__Index();

  Account__Index(const Account__Index& from);

  inline Account__Index& operator=(const Account__Index& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Account__Index& default_instance();

  void Swap(Account__Index* other);

  // implements Message ----------------------------------------------

  Account__Index* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Account__Index& from);
  void MergeFrom(const Account__Index& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const char* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // @@protoc_insertion_point(class_scope:db.Account._Index)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_openid();
  inline void clear_has_openid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gid_;
  ::std::string* openid_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static Account__Index* default_instance_;
};
// -------------------------------------------------------------------

class Account : public ::google::protobuf::Message {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Account& default_instance();

  void Swap(Account* other);

  // implements Message ----------------------------------------------

  Account* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Account__PrimaryKey _PrimaryKey;
  typedef Account__MaxLength _MaxLength;
  typedef Account__Index _Index;

  // accessors -------------------------------------------------------

  // required uint64 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);

  // required uint32 platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline ::google::protobuf::uint32 platform() const;
  inline void set_platform(::google::protobuf::uint32 value);

  // required string openid = 3;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 3;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required .db.AccountMisc misc = 5;
  inline bool has_misc() const;
  inline void clear_misc();
  static const int kMiscFieldNumber = 5;
  inline const ::db::AccountMisc& misc() const;
  inline ::db::AccountMisc* mutable_misc();
  inline ::db::AccountMisc* release_misc();
  inline void set_allocated_misc(::db::AccountMisc* misc);

  // @@protoc_insertion_point(class_scope:db.Account)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_misc();
  inline void clear_has_misc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 gid_;
  ::std::string* openid_;
  ::google::protobuf::uint32 platform_;
  ::google::protobuf::uint32 time_;
  ::db::AccountMisc* misc_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static Account* default_instance_;
};
// -------------------------------------------------------------------

class AccountLR__PrimaryKey : public ::google::protobuf::Message {
 public:
  AccountLR__PrimaryKey();
  virtual ~AccountLR__PrimaryKey();

  AccountLR__PrimaryKey(const AccountLR__PrimaryKey& from);

  inline AccountLR__PrimaryKey& operator=(const AccountLR__PrimaryKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountLR__PrimaryKey& default_instance();

  void Swap(AccountLR__PrimaryKey* other);

  // implements Message ----------------------------------------------

  AccountLR__PrimaryKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountLR__PrimaryKey& from);
  void MergeFrom(const AccountLR__PrimaryKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::uint32 gid() const;
  inline void set_gid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:db.AccountLR._PrimaryKey)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gid_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static AccountLR__PrimaryKey* default_instance_;
};
// -------------------------------------------------------------------

class AccountLR__MaxLength : public ::google::protobuf::Message {
 public:
  AccountLR__MaxLength();
  virtual ~AccountLR__MaxLength();

  AccountLR__MaxLength(const AccountLR__MaxLength& from);

  inline AccountLR__MaxLength& operator=(const AccountLR__MaxLength& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountLR__MaxLength& default_instance();

  void Swap(AccountLR__MaxLength* other);

  // implements Message ----------------------------------------------

  AccountLR__MaxLength* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountLR__MaxLength& from);
  void MergeFrom(const AccountLR__MaxLength& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 openid = 1 [default = 32];
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline ::google::protobuf::uint32 openid() const;
  inline void set_openid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:db.AccountLR._MaxLength)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 openid_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static AccountLR__MaxLength* default_instance_;
};
// -------------------------------------------------------------------

class AccountLR : public ::google::protobuf::Message {
 public:
  AccountLR();
  virtual ~AccountLR();

  AccountLR(const AccountLR& from);

  inline AccountLR& operator=(const AccountLR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountLR& default_instance();

  void Swap(AccountLR* other);

  // implements Message ----------------------------------------------

  AccountLR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountLR& from);
  void MergeFrom(const AccountLR& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AccountLR__PrimaryKey _PrimaryKey;
  typedef AccountLR__MaxLength _MaxLength;

  // accessors -------------------------------------------------------

  // required uint64 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);

  // required uint32 platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline ::google::protobuf::uint32 platform() const;
  inline void set_platform(::google::protobuf::uint32 value);

  // required string openid = 3;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 3;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:db.AccountLR)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 gid_;
  ::std::string* openid_;
  ::google::protobuf::uint32 platform_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static AccountLR* default_instance_;
};
// -------------------------------------------------------------------

class AccountRL__PrimaryKey : public ::google::protobuf::Message {
 public:
  AccountRL__PrimaryKey();
  virtual ~AccountRL__PrimaryKey();

  AccountRL__PrimaryKey(const AccountRL__PrimaryKey& from);

  inline AccountRL__PrimaryKey& operator=(const AccountRL__PrimaryKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountRL__PrimaryKey& default_instance();

  void Swap(AccountRL__PrimaryKey* other);

  // implements Message ----------------------------------------------

  AccountRL__PrimaryKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountRL__PrimaryKey& from);
  void MergeFrom(const AccountRL__PrimaryKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 platform = 1;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 1;
  inline ::google::protobuf::uint32 platform() const;
  inline void set_platform(::google::protobuf::uint32 value);

  // optional uint32 openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline ::google::protobuf::uint32 openid() const;
  inline void set_openid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:db.AccountRL._PrimaryKey)
 private:
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_openid();
  inline void clear_has_openid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 platform_;
  ::google::protobuf::uint32 openid_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static AccountRL__PrimaryKey* default_instance_;
};
// -------------------------------------------------------------------

class AccountRL__MaxLength : public ::google::protobuf::Message {
 public:
  AccountRL__MaxLength();
  virtual ~AccountRL__MaxLength();

  AccountRL__MaxLength(const AccountRL__MaxLength& from);

  inline AccountRL__MaxLength& operator=(const AccountRL__MaxLength& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountRL__MaxLength& default_instance();

  void Swap(AccountRL__MaxLength* other);

  // implements Message ----------------------------------------------

  AccountRL__MaxLength* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountRL__MaxLength& from);
  void MergeFrom(const AccountRL__MaxLength& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 openid = 1 [default = 32];
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline ::google::protobuf::uint32 openid() const;
  inline void set_openid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:db.AccountRL._MaxLength)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 openid_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static AccountRL__MaxLength* default_instance_;
};
// -------------------------------------------------------------------

class AccountRL : public ::google::protobuf::Message {
 public:
  AccountRL();
  virtual ~AccountRL();

  AccountRL(const AccountRL& from);

  inline AccountRL& operator=(const AccountRL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountRL& default_instance();

  void Swap(AccountRL* other);

  // implements Message ----------------------------------------------

  AccountRL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountRL& from);
  void MergeFrom(const AccountRL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AccountRL__PrimaryKey _PrimaryKey;
  typedef AccountRL__MaxLength _MaxLength;

  // accessors -------------------------------------------------------

  // required uint64 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);

  // required uint32 platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline ::google::protobuf::uint32 platform() const;
  inline void set_platform(::google::protobuf::uint32 value);

  // required string openid = 3;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 3;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:db.AccountRL)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 gid_;
  ::std::string* openid_;
  ::google::protobuf::uint32 platform_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_db_2fAccount_2eproto();
  friend void protobuf_AssignDesc_db_2fAccount_2eproto();
  friend void protobuf_ShutdownFile_db_2fAccount_2eproto();

  void InitAsDefaultInstance();
  static AccountRL* default_instance_;
};
// ===================================================================


// ===================================================================

// AccountMisc

// required uint32 dummy = 1;
inline bool AccountMisc::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountMisc::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountMisc::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountMisc::clear_dummy() {
  dummy_ = 0u;
  clear_has_dummy();
}
inline ::google::protobuf::uint32 AccountMisc::dummy() const {
  // @@protoc_insertion_point(field_get:db.AccountMisc.dummy)
  return dummy_;
}
inline void AccountMisc::set_dummy(::google::protobuf::uint32 value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:db.AccountMisc.dummy)
}

// -------------------------------------------------------------------

// Account__PrimaryKey

// optional uint32 gid = 1;
inline bool Account__PrimaryKey::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Account__PrimaryKey::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Account__PrimaryKey::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Account__PrimaryKey::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
inline ::google::protobuf::uint32 Account__PrimaryKey::gid() const {
  // @@protoc_insertion_point(field_get:db.Account._PrimaryKey.gid)
  return gid_;
}
inline void Account__PrimaryKey::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:db.Account._PrimaryKey.gid)
}

// -------------------------------------------------------------------

// Account__MaxLength

// optional uint32 openid = 1 [default = 32];
inline bool Account__MaxLength::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Account__MaxLength::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Account__MaxLength::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Account__MaxLength::clear_openid() {
  openid_ = 32u;
  clear_has_openid();
}
inline ::google::protobuf::uint32 Account__MaxLength::openid() const {
  // @@protoc_insertion_point(field_get:db.Account._MaxLength.openid)
  return openid_;
}
inline void Account__MaxLength::set_openid(::google::protobuf::uint32 value) {
  set_has_openid();
  openid_ = value;
  // @@protoc_insertion_point(field_set:db.Account._MaxLength.openid)
}

// -------------------------------------------------------------------

// Account__Index

// optional string gid = 1;
inline bool Account__Index::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Account__Index::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Account__Index::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Account__Index::clear_gid() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& Account__Index::gid() const {
  // @@protoc_insertion_point(field_get:db.Account._Index.gid)
  return *gid_;
}
inline void Account__Index::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
  // @@protoc_insertion_point(field_set:db.Account._Index.gid)
}
inline void Account__Index::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
  // @@protoc_insertion_point(field_set_char:db.Account._Index.gid)
}
inline void Account__Index::set_gid(const char* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.Account._Index.gid)
}
inline ::std::string* Account__Index::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db.Account._Index.gid)
  return gid_;
}
inline ::std::string* Account__Index::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Account__Index::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db.Account._Index.gid)
}

// optional string openid = 2;
inline bool Account__Index::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Account__Index::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Account__Index::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Account__Index::clear_openid() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& Account__Index::openid() const {
  // @@protoc_insertion_point(field_get:db.Account._Index.openid)
  return *openid_;
}
inline void Account__Index::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set:db.Account._Index.openid)
}
inline void Account__Index::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set_char:db.Account._Index.openid)
}
inline void Account__Index::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.Account._Index.openid)
}
inline ::std::string* Account__Index::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db.Account._Index.openid)
  return openid_;
}
inline ::std::string* Account__Index::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Account__Index::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db.Account._Index.openid)
}

// -------------------------------------------------------------------

// Account

// required uint64 gid = 1;
inline bool Account::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Account::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Account::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Account::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 Account::gid() const {
  // @@protoc_insertion_point(field_get:db.Account.gid)
  return gid_;
}
inline void Account::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:db.Account.gid)
}

// required uint32 platform = 2;
inline bool Account::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Account::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Account::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Account::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 Account::platform() const {
  // @@protoc_insertion_point(field_get:db.Account.platform)
  return platform_;
}
inline void Account::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:db.Account.platform)
}

// required string openid = 3;
inline bool Account::has_openid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Account::set_has_openid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Account::clear_has_openid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Account::clear_openid() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& Account::openid() const {
  // @@protoc_insertion_point(field_get:db.Account.openid)
  return *openid_;
}
inline void Account::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set:db.Account.openid)
}
inline void Account::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set_char:db.Account.openid)
}
inline void Account::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.Account.openid)
}
inline ::std::string* Account::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db.Account.openid)
  return openid_;
}
inline ::std::string* Account::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Account::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db.Account.openid)
}

// required uint32 time = 4;
inline bool Account::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Account::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Account::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Account::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 Account::time() const {
  // @@protoc_insertion_point(field_get:db.Account.time)
  return time_;
}
inline void Account::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:db.Account.time)
}

// required .db.AccountMisc misc = 5;
inline bool Account::has_misc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Account::set_has_misc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Account::clear_has_misc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Account::clear_misc() {
  if (misc_ != NULL) misc_->::db::AccountMisc::Clear();
  clear_has_misc();
}
inline const ::db::AccountMisc& Account::misc() const {
  // @@protoc_insertion_point(field_get:db.Account.misc)
  return misc_ != NULL ? *misc_ : *default_instance_->misc_;
}
inline ::db::AccountMisc* Account::mutable_misc() {
  set_has_misc();
  if (misc_ == NULL) misc_ = new ::db::AccountMisc;
  // @@protoc_insertion_point(field_mutable:db.Account.misc)
  return misc_;
}
inline ::db::AccountMisc* Account::release_misc() {
  clear_has_misc();
  ::db::AccountMisc* temp = misc_;
  misc_ = NULL;
  return temp;
}
inline void Account::set_allocated_misc(::db::AccountMisc* misc) {
  delete misc_;
  misc_ = misc;
  if (misc) {
    set_has_misc();
  } else {
    clear_has_misc();
  }
  // @@protoc_insertion_point(field_set_allocated:db.Account.misc)
}

// -------------------------------------------------------------------

// AccountLR__PrimaryKey

// optional uint32 gid = 1;
inline bool AccountLR__PrimaryKey::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountLR__PrimaryKey::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountLR__PrimaryKey::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountLR__PrimaryKey::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
inline ::google::protobuf::uint32 AccountLR__PrimaryKey::gid() const {
  // @@protoc_insertion_point(field_get:db.AccountLR._PrimaryKey.gid)
  return gid_;
}
inline void AccountLR__PrimaryKey::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:db.AccountLR._PrimaryKey.gid)
}

// -------------------------------------------------------------------

// AccountLR__MaxLength

// optional uint32 openid = 1 [default = 32];
inline bool AccountLR__MaxLength::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountLR__MaxLength::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountLR__MaxLength::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountLR__MaxLength::clear_openid() {
  openid_ = 32u;
  clear_has_openid();
}
inline ::google::protobuf::uint32 AccountLR__MaxLength::openid() const {
  // @@protoc_insertion_point(field_get:db.AccountLR._MaxLength.openid)
  return openid_;
}
inline void AccountLR__MaxLength::set_openid(::google::protobuf::uint32 value) {
  set_has_openid();
  openid_ = value;
  // @@protoc_insertion_point(field_set:db.AccountLR._MaxLength.openid)
}

// -------------------------------------------------------------------

// AccountLR

// required uint64 gid = 1;
inline bool AccountLR::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountLR::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountLR::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountLR::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 AccountLR::gid() const {
  // @@protoc_insertion_point(field_get:db.AccountLR.gid)
  return gid_;
}
inline void AccountLR::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:db.AccountLR.gid)
}

// required uint32 platform = 2;
inline bool AccountLR::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountLR::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountLR::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountLR::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 AccountLR::platform() const {
  // @@protoc_insertion_point(field_get:db.AccountLR.platform)
  return platform_;
}
inline void AccountLR::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:db.AccountLR.platform)
}

// required string openid = 3;
inline bool AccountLR::has_openid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountLR::set_has_openid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountLR::clear_has_openid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountLR::clear_openid() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& AccountLR::openid() const {
  // @@protoc_insertion_point(field_get:db.AccountLR.openid)
  return *openid_;
}
inline void AccountLR::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set:db.AccountLR.openid)
}
inline void AccountLR::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set_char:db.AccountLR.openid)
}
inline void AccountLR::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.AccountLR.openid)
}
inline ::std::string* AccountLR::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db.AccountLR.openid)
  return openid_;
}
inline ::std::string* AccountLR::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountLR::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db.AccountLR.openid)
}

// required uint32 time = 4;
inline bool AccountLR::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountLR::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountLR::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountLR::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 AccountLR::time() const {
  // @@protoc_insertion_point(field_get:db.AccountLR.time)
  return time_;
}
inline void AccountLR::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:db.AccountLR.time)
}

// -------------------------------------------------------------------

// AccountRL__PrimaryKey

// optional uint32 platform = 1;
inline bool AccountRL__PrimaryKey::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountRL__PrimaryKey::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountRL__PrimaryKey::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountRL__PrimaryKey::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 AccountRL__PrimaryKey::platform() const {
  // @@protoc_insertion_point(field_get:db.AccountRL._PrimaryKey.platform)
  return platform_;
}
inline void AccountRL__PrimaryKey::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:db.AccountRL._PrimaryKey.platform)
}

// optional uint32 openid = 2;
inline bool AccountRL__PrimaryKey::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountRL__PrimaryKey::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountRL__PrimaryKey::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountRL__PrimaryKey::clear_openid() {
  openid_ = 0u;
  clear_has_openid();
}
inline ::google::protobuf::uint32 AccountRL__PrimaryKey::openid() const {
  // @@protoc_insertion_point(field_get:db.AccountRL._PrimaryKey.openid)
  return openid_;
}
inline void AccountRL__PrimaryKey::set_openid(::google::protobuf::uint32 value) {
  set_has_openid();
  openid_ = value;
  // @@protoc_insertion_point(field_set:db.AccountRL._PrimaryKey.openid)
}

// -------------------------------------------------------------------

// AccountRL__MaxLength

// optional uint32 openid = 1 [default = 32];
inline bool AccountRL__MaxLength::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountRL__MaxLength::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountRL__MaxLength::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountRL__MaxLength::clear_openid() {
  openid_ = 32u;
  clear_has_openid();
}
inline ::google::protobuf::uint32 AccountRL__MaxLength::openid() const {
  // @@protoc_insertion_point(field_get:db.AccountRL._MaxLength.openid)
  return openid_;
}
inline void AccountRL__MaxLength::set_openid(::google::protobuf::uint32 value) {
  set_has_openid();
  openid_ = value;
  // @@protoc_insertion_point(field_set:db.AccountRL._MaxLength.openid)
}

// -------------------------------------------------------------------

// AccountRL

// required uint64 gid = 1;
inline bool AccountRL::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountRL::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountRL::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountRL::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 AccountRL::gid() const {
  // @@protoc_insertion_point(field_get:db.AccountRL.gid)
  return gid_;
}
inline void AccountRL::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:db.AccountRL.gid)
}

// required uint32 platform = 2;
inline bool AccountRL::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountRL::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountRL::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountRL::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 AccountRL::platform() const {
  // @@protoc_insertion_point(field_get:db.AccountRL.platform)
  return platform_;
}
inline void AccountRL::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:db.AccountRL.platform)
}

// required string openid = 3;
inline bool AccountRL::has_openid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountRL::set_has_openid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountRL::clear_has_openid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountRL::clear_openid() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& AccountRL::openid() const {
  // @@protoc_insertion_point(field_get:db.AccountRL.openid)
  return *openid_;
}
inline void AccountRL::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set:db.AccountRL.openid)
}
inline void AccountRL::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set_char:db.AccountRL.openid)
}
inline void AccountRL::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db.AccountRL.openid)
}
inline ::std::string* AccountRL::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db.AccountRL.openid)
  return openid_;
}
inline ::std::string* AccountRL::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountRL::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db.AccountRL.openid)
}

// required uint32 time = 4;
inline bool AccountRL::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountRL::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountRL::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountRL::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 AccountRL::time() const {
  // @@protoc_insertion_point(field_get:db.AccountRL.time)
  return time_;
}
inline void AccountRL::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:db.AccountRL.time)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_2fAccount_2eproto__INCLUDED
