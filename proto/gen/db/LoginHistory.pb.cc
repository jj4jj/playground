// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db/LoginHistory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db/LoginHistory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace db {

namespace {

const ::google::protobuf::Descriptor* LoginRecored_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRecored_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLoginHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLoginHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginHistory__PrimaryKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginHistory__PrimaryKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginHistory__MaxLength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginHistory__MaxLength_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginHistory__Index_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginHistory__Index_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginLatest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginLatest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginLatest__PrimaryKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginLatest__PrimaryKey_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_2fLoginHistory_2eproto() {
  protobuf_AddDesc_db_2fLoginHistory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db/LoginHistory.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRecored_descriptor_ = file->message_type(0);
  static const int LoginRecored_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecored, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecored, time_),
  };
  LoginRecored_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRecored_descriptor_,
      LoginRecored::default_instance_,
      LoginRecored_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecored, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecored, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRecored));
  PlayerLoginHistory_descriptor_ = file->message_type(1);
  static const int PlayerLoginHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHistory, latestlogin_),
  };
  PlayerLoginHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLoginHistory_descriptor_,
      PlayerLoginHistory::default_instance_,
      PlayerLoginHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLoginHistory));
  LoginHistory_descriptor_ = file->message_type(2);
  static const int LoginHistory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory, history_),
  };
  LoginHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginHistory_descriptor_,
      LoginHistory::default_instance_,
      LoginHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginHistory));
  LoginHistory__PrimaryKey_descriptor_ = LoginHistory_descriptor_->nested_type(0);
  static const int LoginHistory__PrimaryKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory__PrimaryKey, gid_),
  };
  LoginHistory__PrimaryKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginHistory__PrimaryKey_descriptor_,
      LoginHistory__PrimaryKey::default_instance_,
      LoginHistory__PrimaryKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory__PrimaryKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory__PrimaryKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginHistory__PrimaryKey));
  LoginHistory__MaxLength_descriptor_ = LoginHistory_descriptor_->nested_type(1);
  static const int LoginHistory__MaxLength_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory__MaxLength, openid_),
  };
  LoginHistory__MaxLength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginHistory__MaxLength_descriptor_,
      LoginHistory__MaxLength::default_instance_,
      LoginHistory__MaxLength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory__MaxLength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory__MaxLength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginHistory__MaxLength));
  LoginHistory__Index_descriptor_ = LoginHistory_descriptor_->nested_type(2);
  static const int LoginHistory__Index_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory__Index, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory__Index, openid_),
  };
  LoginHistory__Index_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginHistory__Index_descriptor_,
      LoginHistory__Index::default_instance_,
      LoginHistory__Index_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory__Index, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginHistory__Index, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginHistory__Index));
  LoginLatest_descriptor_ = file->message_type(3);
  static const int LoginLatest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLatest, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLatest, area_),
  };
  LoginLatest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginLatest_descriptor_,
      LoginLatest::default_instance_,
      LoginLatest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLatest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLatest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginLatest));
  LoginLatest__PrimaryKey_descriptor_ = LoginLatest_descriptor_->nested_type(0);
  static const int LoginLatest__PrimaryKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLatest__PrimaryKey, gid_),
  };
  LoginLatest__PrimaryKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginLatest__PrimaryKey_descriptor_,
      LoginLatest__PrimaryKey::default_instance_,
      LoginLatest__PrimaryKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLatest__PrimaryKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLatest__PrimaryKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginLatest__PrimaryKey));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_2fLoginHistory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRecored_descriptor_, &LoginRecored::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLoginHistory_descriptor_, &PlayerLoginHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginHistory_descriptor_, &LoginHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginHistory__PrimaryKey_descriptor_, &LoginHistory__PrimaryKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginHistory__MaxLength_descriptor_, &LoginHistory__MaxLength::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginHistory__Index_descriptor_, &LoginHistory__Index::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginLatest_descriptor_, &LoginLatest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginLatest__PrimaryKey_descriptor_, &LoginLatest__PrimaryKey::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_2fLoginHistory_2eproto() {
  delete LoginRecored::default_instance_;
  delete LoginRecored_reflection_;
  delete PlayerLoginHistory::default_instance_;
  delete PlayerLoginHistory_reflection_;
  delete LoginHistory::default_instance_;
  delete LoginHistory_reflection_;
  delete LoginHistory__PrimaryKey::default_instance_;
  delete LoginHistory__PrimaryKey_reflection_;
  delete LoginHistory__MaxLength::default_instance_;
  delete LoginHistory__MaxLength_reflection_;
  delete LoginHistory__Index::default_instance_;
  delete LoginHistory__Index_reflection_;
  delete LoginLatest::default_instance_;
  delete LoginLatest_reflection_;
  delete LoginLatest__PrimaryKey::default_instance_;
  delete LoginLatest__PrimaryKey_reflection_;
}

void protobuf_AddDesc_db_2fLoginHistory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025db/LoginHistory.proto\022\002db\"*\n\014LoginReco"
    "red\022\014\n\004area\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\";\n\022Playe"
    "rLoginHistory\022%\n\013latestLogin\030\001 \003(\0132\020.db."
    "LoginRecored\"\267\001\n\014LoginHistory\022\013\n\003gid\030\001 \002"
    "(\004\022\014\n\004area\030\002 \002(\r\022\'\n\007history\030\003 \001(\0132\026.db.P"
    "layerLoginHistory\032\032\n\013_PrimaryKey\022\013\n\003gid\030"
    "\001 \001(\r\032 \n\n_MaxLength\022\022\n\006openid\030\001 \001(\r:\00232\032"
    "%\n\006_Index\022\013\n\003gid\030\001 \001(\t\022\016\n\006openid\030\002 \001(\t\"D"
    "\n\013LoginLatest\022\013\n\003gid\030\001 \002(\004\022\014\n\004area\030\002 \002(\r"
    "\032\032\n\013_PrimaryKey\022\013\n\003gid\030\001 \001(\r", 388);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db/LoginHistory.proto", &protobuf_RegisterTypes);
  LoginRecored::default_instance_ = new LoginRecored();
  PlayerLoginHistory::default_instance_ = new PlayerLoginHistory();
  LoginHistory::default_instance_ = new LoginHistory();
  LoginHistory__PrimaryKey::default_instance_ = new LoginHistory__PrimaryKey();
  LoginHistory__MaxLength::default_instance_ = new LoginHistory__MaxLength();
  LoginHistory__Index::default_instance_ = new LoginHistory__Index();
  LoginLatest::default_instance_ = new LoginLatest();
  LoginLatest__PrimaryKey::default_instance_ = new LoginLatest__PrimaryKey();
  LoginRecored::default_instance_->InitAsDefaultInstance();
  PlayerLoginHistory::default_instance_->InitAsDefaultInstance();
  LoginHistory::default_instance_->InitAsDefaultInstance();
  LoginHistory__PrimaryKey::default_instance_->InitAsDefaultInstance();
  LoginHistory__MaxLength::default_instance_->InitAsDefaultInstance();
  LoginHistory__Index::default_instance_->InitAsDefaultInstance();
  LoginLatest::default_instance_->InitAsDefaultInstance();
  LoginLatest__PrimaryKey::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_2fLoginHistory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_2fLoginHistory_2eproto {
  StaticDescriptorInitializer_db_2fLoginHistory_2eproto() {
    protobuf_AddDesc_db_2fLoginHistory_2eproto();
  }
} static_descriptor_initializer_db_2fLoginHistory_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoginRecored::kAreaFieldNumber;
const int LoginRecored::kTimeFieldNumber;
#endif  // !_MSC_VER

LoginRecored::LoginRecored()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.LoginRecored)
}

void LoginRecored::InitAsDefaultInstance() {
}

LoginRecored::LoginRecored(const LoginRecored& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.LoginRecored)
}

void LoginRecored::SharedCtor() {
  _cached_size_ = 0;
  area_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRecored::~LoginRecored() {
  // @@protoc_insertion_point(destructor:db.LoginRecored)
  SharedDtor();
}

void LoginRecored::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRecored::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRecored::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRecored_descriptor_;
}

const LoginRecored& LoginRecored::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fLoginHistory_2eproto();
  return *default_instance_;
}

LoginRecored* LoginRecored::default_instance_ = NULL;

LoginRecored* LoginRecored::New() const {
  return new LoginRecored;
}

void LoginRecored::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginRecored*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(area_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRecored::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.LoginRecored)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 area = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.LoginRecored)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.LoginRecored)
  return false;
#undef DO_
}

void LoginRecored::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.LoginRecored)
  // required uint32 area = 1;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->area(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.LoginRecored)
}

::google::protobuf::uint8* LoginRecored::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.LoginRecored)
  // required uint32 area = 1;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->area(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.LoginRecored)
  return target;
}

int LoginRecored::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 area = 1;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRecored::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRecored* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRecored*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRecored::MergeFrom(const LoginRecored& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRecored::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRecored::CopyFrom(const LoginRecored& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRecored::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginRecored::Swap(LoginRecored* other) {
  if (other != this) {
    std::swap(area_, other->area_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRecored::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRecored_descriptor_;
  metadata.reflection = LoginRecored_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLoginHistory::kLatestLoginFieldNumber;
#endif  // !_MSC_VER

PlayerLoginHistory::PlayerLoginHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.PlayerLoginHistory)
}

void PlayerLoginHistory::InitAsDefaultInstance() {
}

PlayerLoginHistory::PlayerLoginHistory(const PlayerLoginHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.PlayerLoginHistory)
}

void PlayerLoginHistory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLoginHistory::~PlayerLoginHistory() {
  // @@protoc_insertion_point(destructor:db.PlayerLoginHistory)
  SharedDtor();
}

void PlayerLoginHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLoginHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoginHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLoginHistory_descriptor_;
}

const PlayerLoginHistory& PlayerLoginHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fLoginHistory_2eproto();
  return *default_instance_;
}

PlayerLoginHistory* PlayerLoginHistory::default_instance_ = NULL;

PlayerLoginHistory* PlayerLoginHistory::New() const {
  return new PlayerLoginHistory;
}

void PlayerLoginHistory::Clear() {
  latestlogin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLoginHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.PlayerLoginHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.LoginRecored latestLogin = 1;
      case 1: {
        if (tag == 10) {
         parse_latestLogin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_latestlogin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_latestLogin;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.PlayerLoginHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.PlayerLoginHistory)
  return false;
#undef DO_
}

void PlayerLoginHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.PlayerLoginHistory)
  // repeated .db.LoginRecored latestLogin = 1;
  for (int i = 0; i < this->latestlogin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->latestlogin(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.PlayerLoginHistory)
}

::google::protobuf::uint8* PlayerLoginHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.PlayerLoginHistory)
  // repeated .db.LoginRecored latestLogin = 1;
  for (int i = 0; i < this->latestlogin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->latestlogin(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.PlayerLoginHistory)
  return target;
}

int PlayerLoginHistory::ByteSize() const {
  int total_size = 0;

  // repeated .db.LoginRecored latestLogin = 1;
  total_size += 1 * this->latestlogin_size();
  for (int i = 0; i < this->latestlogin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->latestlogin(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoginHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLoginHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLoginHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLoginHistory::MergeFrom(const PlayerLoginHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  latestlogin_.MergeFrom(from.latestlogin_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLoginHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginHistory::CopyFrom(const PlayerLoginHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginHistory::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->latestlogin())) return false;
  return true;
}

void PlayerLoginHistory::Swap(PlayerLoginHistory* other) {
  if (other != this) {
    latestlogin_.Swap(&other->latestlogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLoginHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLoginHistory_descriptor_;
  metadata.reflection = PlayerLoginHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginHistory__PrimaryKey::kGidFieldNumber;
#endif  // !_MSC_VER

LoginHistory__PrimaryKey::LoginHistory__PrimaryKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.LoginHistory._PrimaryKey)
}

void LoginHistory__PrimaryKey::InitAsDefaultInstance() {
}

LoginHistory__PrimaryKey::LoginHistory__PrimaryKey(const LoginHistory__PrimaryKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.LoginHistory._PrimaryKey)
}

void LoginHistory__PrimaryKey::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginHistory__PrimaryKey::~LoginHistory__PrimaryKey() {
  // @@protoc_insertion_point(destructor:db.LoginHistory._PrimaryKey)
  SharedDtor();
}

void LoginHistory__PrimaryKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginHistory__PrimaryKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginHistory__PrimaryKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginHistory__PrimaryKey_descriptor_;
}

const LoginHistory__PrimaryKey& LoginHistory__PrimaryKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fLoginHistory_2eproto();
  return *default_instance_;
}

LoginHistory__PrimaryKey* LoginHistory__PrimaryKey::default_instance_ = NULL;

LoginHistory__PrimaryKey* LoginHistory__PrimaryKey::New() const {
  return new LoginHistory__PrimaryKey;
}

void LoginHistory__PrimaryKey::Clear() {
  gid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginHistory__PrimaryKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.LoginHistory._PrimaryKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.LoginHistory._PrimaryKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.LoginHistory._PrimaryKey)
  return false;
#undef DO_
}

void LoginHistory__PrimaryKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.LoginHistory._PrimaryKey)
  // optional uint32 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.LoginHistory._PrimaryKey)
}

::google::protobuf::uint8* LoginHistory__PrimaryKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.LoginHistory._PrimaryKey)
  // optional uint32 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.LoginHistory._PrimaryKey)
  return target;
}

int LoginHistory__PrimaryKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginHistory__PrimaryKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginHistory__PrimaryKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginHistory__PrimaryKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginHistory__PrimaryKey::MergeFrom(const LoginHistory__PrimaryKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginHistory__PrimaryKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginHistory__PrimaryKey::CopyFrom(const LoginHistory__PrimaryKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginHistory__PrimaryKey::IsInitialized() const {

  return true;
}

void LoginHistory__PrimaryKey::Swap(LoginHistory__PrimaryKey* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginHistory__PrimaryKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginHistory__PrimaryKey_descriptor_;
  metadata.reflection = LoginHistory__PrimaryKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LoginHistory__MaxLength::kOpenidFieldNumber;
#endif  // !_MSC_VER

LoginHistory__MaxLength::LoginHistory__MaxLength()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.LoginHistory._MaxLength)
}

void LoginHistory__MaxLength::InitAsDefaultInstance() {
}

LoginHistory__MaxLength::LoginHistory__MaxLength(const LoginHistory__MaxLength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.LoginHistory._MaxLength)
}

void LoginHistory__MaxLength::SharedCtor() {
  _cached_size_ = 0;
  openid_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginHistory__MaxLength::~LoginHistory__MaxLength() {
  // @@protoc_insertion_point(destructor:db.LoginHistory._MaxLength)
  SharedDtor();
}

void LoginHistory__MaxLength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginHistory__MaxLength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginHistory__MaxLength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginHistory__MaxLength_descriptor_;
}

const LoginHistory__MaxLength& LoginHistory__MaxLength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fLoginHistory_2eproto();
  return *default_instance_;
}

LoginHistory__MaxLength* LoginHistory__MaxLength::default_instance_ = NULL;

LoginHistory__MaxLength* LoginHistory__MaxLength::New() const {
  return new LoginHistory__MaxLength;
}

void LoginHistory__MaxLength::Clear() {
  openid_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginHistory__MaxLength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.LoginHistory._MaxLength)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 openid = 1 [default = 32];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openid_)));
          set_has_openid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.LoginHistory._MaxLength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.LoginHistory._MaxLength)
  return false;
#undef DO_
}

void LoginHistory__MaxLength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.LoginHistory._MaxLength)
  // optional uint32 openid = 1 [default = 32];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.LoginHistory._MaxLength)
}

::google::protobuf::uint8* LoginHistory__MaxLength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.LoginHistory._MaxLength)
  // optional uint32 openid = 1 [default = 32];
  if (has_openid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.LoginHistory._MaxLength)
  return target;
}

int LoginHistory__MaxLength::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 openid = 1 [default = 32];
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginHistory__MaxLength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginHistory__MaxLength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginHistory__MaxLength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginHistory__MaxLength::MergeFrom(const LoginHistory__MaxLength& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginHistory__MaxLength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginHistory__MaxLength::CopyFrom(const LoginHistory__MaxLength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginHistory__MaxLength::IsInitialized() const {

  return true;
}

void LoginHistory__MaxLength::Swap(LoginHistory__MaxLength* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginHistory__MaxLength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginHistory__MaxLength_descriptor_;
  metadata.reflection = LoginHistory__MaxLength_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LoginHistory__Index::kGidFieldNumber;
const int LoginHistory__Index::kOpenidFieldNumber;
#endif  // !_MSC_VER

LoginHistory__Index::LoginHistory__Index()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.LoginHistory._Index)
}

void LoginHistory__Index::InitAsDefaultInstance() {
}

LoginHistory__Index::LoginHistory__Index(const LoginHistory__Index& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.LoginHistory._Index)
}

void LoginHistory__Index::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginHistory__Index::~LoginHistory__Index() {
  // @@protoc_insertion_point(destructor:db.LoginHistory._Index)
  SharedDtor();
}

void LoginHistory__Index::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void LoginHistory__Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginHistory__Index::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginHistory__Index_descriptor_;
}

const LoginHistory__Index& LoginHistory__Index::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fLoginHistory_2eproto();
  return *default_instance_;
}

LoginHistory__Index* LoginHistory__Index::default_instance_ = NULL;

LoginHistory__Index* LoginHistory__Index::New() const {
  return new LoginHistory__Index;
}

void LoginHistory__Index::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginHistory__Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.LoginHistory._Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.LoginHistory._Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.LoginHistory._Index)
  return false;
#undef DO_
}

void LoginHistory__Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.LoginHistory._Index)
  // optional string gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gid(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.LoginHistory._Index)
}

::google::protobuf::uint8* LoginHistory__Index::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.LoginHistory._Index)
  // optional string gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gid(), target);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.LoginHistory._Index)
  return target;
}

int LoginHistory__Index::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginHistory__Index::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginHistory__Index* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginHistory__Index*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginHistory__Index::MergeFrom(const LoginHistory__Index& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginHistory__Index::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginHistory__Index::CopyFrom(const LoginHistory__Index& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginHistory__Index::IsInitialized() const {

  return true;
}

void LoginHistory__Index::Swap(LoginHistory__Index* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginHistory__Index::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginHistory__Index_descriptor_;
  metadata.reflection = LoginHistory__Index_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LoginHistory::kGidFieldNumber;
const int LoginHistory::kAreaFieldNumber;
const int LoginHistory::kHistoryFieldNumber;
#endif  // !_MSC_VER

LoginHistory::LoginHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.LoginHistory)
}

void LoginHistory::InitAsDefaultInstance() {
  history_ = const_cast< ::db::PlayerLoginHistory*>(&::db::PlayerLoginHistory::default_instance());
}

LoginHistory::LoginHistory(const LoginHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.LoginHistory)
}

void LoginHistory::SharedCtor() {
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  area_ = 0u;
  history_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginHistory::~LoginHistory() {
  // @@protoc_insertion_point(destructor:db.LoginHistory)
  SharedDtor();
}

void LoginHistory::SharedDtor() {
  if (this != default_instance_) {
    delete history_;
  }
}

void LoginHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginHistory_descriptor_;
}

const LoginHistory& LoginHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fLoginHistory_2eproto();
  return *default_instance_;
}

LoginHistory* LoginHistory::default_instance_ = NULL;

LoginHistory* LoginHistory::New() const {
  return new LoginHistory;
}

void LoginHistory::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    gid_ = GOOGLE_ULONGLONG(0);
    area_ = 0u;
    if (has_history()) {
      if (history_ != NULL) history_->::db::PlayerLoginHistory::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.LoginHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }

      // required uint32 area = 2;
      case 2: {
        if (tag == 16) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_history;
        break;
      }

      // optional .db.PlayerLoginHistory history = 3;
      case 3: {
        if (tag == 26) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.LoginHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.LoginHistory)
  return false;
#undef DO_
}

void LoginHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.LoginHistory)
  // required uint64 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gid(), output);
  }

  // required uint32 area = 2;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->area(), output);
  }

  // optional .db.PlayerLoginHistory history = 3;
  if (has_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.LoginHistory)
}

::google::protobuf::uint8* LoginHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.LoginHistory)
  // required uint64 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gid(), target);
  }

  // required uint32 area = 2;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->area(), target);
  }

  // optional .db.PlayerLoginHistory history = 3;
  if (has_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->history(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.LoginHistory)
  return target;
}

int LoginHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }

    // required uint32 area = 2;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

    // optional .db.PlayerLoginHistory history = 3;
    if (has_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginHistory::MergeFrom(const LoginHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_history()) {
      mutable_history()->::db::PlayerLoginHistory::MergeFrom(from.history());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginHistory::CopyFrom(const LoginHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_history()) {
    if (!this->history().IsInitialized()) return false;
  }
  return true;
}

void LoginHistory::Swap(LoginHistory* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(area_, other->area_);
    std::swap(history_, other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginHistory_descriptor_;
  metadata.reflection = LoginHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginLatest__PrimaryKey::kGidFieldNumber;
#endif  // !_MSC_VER

LoginLatest__PrimaryKey::LoginLatest__PrimaryKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.LoginLatest._PrimaryKey)
}

void LoginLatest__PrimaryKey::InitAsDefaultInstance() {
}

LoginLatest__PrimaryKey::LoginLatest__PrimaryKey(const LoginLatest__PrimaryKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.LoginLatest._PrimaryKey)
}

void LoginLatest__PrimaryKey::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginLatest__PrimaryKey::~LoginLatest__PrimaryKey() {
  // @@protoc_insertion_point(destructor:db.LoginLatest._PrimaryKey)
  SharedDtor();
}

void LoginLatest__PrimaryKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginLatest__PrimaryKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginLatest__PrimaryKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginLatest__PrimaryKey_descriptor_;
}

const LoginLatest__PrimaryKey& LoginLatest__PrimaryKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fLoginHistory_2eproto();
  return *default_instance_;
}

LoginLatest__PrimaryKey* LoginLatest__PrimaryKey::default_instance_ = NULL;

LoginLatest__PrimaryKey* LoginLatest__PrimaryKey::New() const {
  return new LoginLatest__PrimaryKey;
}

void LoginLatest__PrimaryKey::Clear() {
  gid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginLatest__PrimaryKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.LoginLatest._PrimaryKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.LoginLatest._PrimaryKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.LoginLatest._PrimaryKey)
  return false;
#undef DO_
}

void LoginLatest__PrimaryKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.LoginLatest._PrimaryKey)
  // optional uint32 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.LoginLatest._PrimaryKey)
}

::google::protobuf::uint8* LoginLatest__PrimaryKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.LoginLatest._PrimaryKey)
  // optional uint32 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.LoginLatest._PrimaryKey)
  return target;
}

int LoginLatest__PrimaryKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginLatest__PrimaryKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginLatest__PrimaryKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginLatest__PrimaryKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginLatest__PrimaryKey::MergeFrom(const LoginLatest__PrimaryKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginLatest__PrimaryKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginLatest__PrimaryKey::CopyFrom(const LoginLatest__PrimaryKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginLatest__PrimaryKey::IsInitialized() const {

  return true;
}

void LoginLatest__PrimaryKey::Swap(LoginLatest__PrimaryKey* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginLatest__PrimaryKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginLatest__PrimaryKey_descriptor_;
  metadata.reflection = LoginLatest__PrimaryKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LoginLatest::kGidFieldNumber;
const int LoginLatest::kAreaFieldNumber;
#endif  // !_MSC_VER

LoginLatest::LoginLatest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.LoginLatest)
}

void LoginLatest::InitAsDefaultInstance() {
}

LoginLatest::LoginLatest(const LoginLatest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.LoginLatest)
}

void LoginLatest::SharedCtor() {
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  area_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginLatest::~LoginLatest() {
  // @@protoc_insertion_point(destructor:db.LoginLatest)
  SharedDtor();
}

void LoginLatest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginLatest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginLatest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginLatest_descriptor_;
}

const LoginLatest& LoginLatest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fLoginHistory_2eproto();
  return *default_instance_;
}

LoginLatest* LoginLatest::default_instance_ = NULL;

LoginLatest* LoginLatest::New() const {
  return new LoginLatest;
}

void LoginLatest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginLatest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gid_, area_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginLatest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.LoginLatest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }

      // required uint32 area = 2;
      case 2: {
        if (tag == 16) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.LoginLatest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.LoginLatest)
  return false;
#undef DO_
}

void LoginLatest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.LoginLatest)
  // required uint64 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gid(), output);
  }

  // required uint32 area = 2;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.LoginLatest)
}

::google::protobuf::uint8* LoginLatest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.LoginLatest)
  // required uint64 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gid(), target);
  }

  // required uint32 area = 2;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.LoginLatest)
  return target;
}

int LoginLatest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }

    // required uint32 area = 2;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginLatest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginLatest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginLatest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginLatest::MergeFrom(const LoginLatest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginLatest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginLatest::CopyFrom(const LoginLatest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginLatest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginLatest::Swap(LoginLatest* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginLatest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginLatest_descriptor_;
  metadata.reflection = LoginLatest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)
