// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db/Account.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db/Account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace db {

namespace {

const ::google::protobuf::Descriptor* AccountMisc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountMisc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account__PrimaryKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account__PrimaryKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account__MaxLength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account__MaxLength_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account__Index_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account__Index_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLR_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLR__PrimaryKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLR__PrimaryKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLR__MaxLength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLR__MaxLength_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountRL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountRL_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountRL__PrimaryKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountRL__PrimaryKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountRL__MaxLength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountRL__MaxLength_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_2fAccount_2eproto() {
  protobuf_AddDesc_db_2fAccount_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db/Account.proto");
  GOOGLE_CHECK(file != NULL);
  AccountMisc_descriptor_ = file->message_type(0);
  static const int AccountMisc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMisc, dummy_),
  };
  AccountMisc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountMisc_descriptor_,
      AccountMisc::default_instance_,
      AccountMisc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMisc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountMisc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountMisc));
  Account_descriptor_ = file->message_type(1);
  static const int Account_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, misc_),
  };
  Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_descriptor_,
      Account::default_instance_,
      Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account));
  Account__PrimaryKey_descriptor_ = Account_descriptor_->nested_type(0);
  static const int Account__PrimaryKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account__PrimaryKey, gid_),
  };
  Account__PrimaryKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account__PrimaryKey_descriptor_,
      Account__PrimaryKey::default_instance_,
      Account__PrimaryKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account__PrimaryKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account__PrimaryKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account__PrimaryKey));
  Account__MaxLength_descriptor_ = Account_descriptor_->nested_type(1);
  static const int Account__MaxLength_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account__MaxLength, openid_),
  };
  Account__MaxLength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account__MaxLength_descriptor_,
      Account__MaxLength::default_instance_,
      Account__MaxLength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account__MaxLength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account__MaxLength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account__MaxLength));
  Account__Index_descriptor_ = Account_descriptor_->nested_type(2);
  static const int Account__Index_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account__Index, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account__Index, openid_),
  };
  Account__Index_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account__Index_descriptor_,
      Account__Index::default_instance_,
      Account__Index_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account__Index, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account__Index, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account__Index));
  AccountLR_descriptor_ = file->message_type(2);
  static const int AccountLR_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR, time_),
  };
  AccountLR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLR_descriptor_,
      AccountLR::default_instance_,
      AccountLR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLR));
  AccountLR__PrimaryKey_descriptor_ = AccountLR_descriptor_->nested_type(0);
  static const int AccountLR__PrimaryKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR__PrimaryKey, gid_),
  };
  AccountLR__PrimaryKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLR__PrimaryKey_descriptor_,
      AccountLR__PrimaryKey::default_instance_,
      AccountLR__PrimaryKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR__PrimaryKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR__PrimaryKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLR__PrimaryKey));
  AccountLR__MaxLength_descriptor_ = AccountLR_descriptor_->nested_type(1);
  static const int AccountLR__MaxLength_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR__MaxLength, openid_),
  };
  AccountLR__MaxLength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLR__MaxLength_descriptor_,
      AccountLR__MaxLength::default_instance_,
      AccountLR__MaxLength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR__MaxLength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLR__MaxLength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLR__MaxLength));
  AccountRL_descriptor_ = file->message_type(3);
  static const int AccountRL_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL, time_),
  };
  AccountRL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountRL_descriptor_,
      AccountRL::default_instance_,
      AccountRL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountRL));
  AccountRL__PrimaryKey_descriptor_ = AccountRL_descriptor_->nested_type(0);
  static const int AccountRL__PrimaryKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL__PrimaryKey, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL__PrimaryKey, openid_),
  };
  AccountRL__PrimaryKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountRL__PrimaryKey_descriptor_,
      AccountRL__PrimaryKey::default_instance_,
      AccountRL__PrimaryKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL__PrimaryKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL__PrimaryKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountRL__PrimaryKey));
  AccountRL__MaxLength_descriptor_ = AccountRL_descriptor_->nested_type(1);
  static const int AccountRL__MaxLength_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL__MaxLength, openid_),
  };
  AccountRL__MaxLength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountRL__MaxLength_descriptor_,
      AccountRL__MaxLength::default_instance_,
      AccountRL__MaxLength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL__MaxLength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRL__MaxLength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountRL__MaxLength));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_2fAccount_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountMisc_descriptor_, &AccountMisc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_descriptor_, &Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account__PrimaryKey_descriptor_, &Account__PrimaryKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account__MaxLength_descriptor_, &Account__MaxLength::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account__Index_descriptor_, &Account__Index::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLR_descriptor_, &AccountLR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLR__PrimaryKey_descriptor_, &AccountLR__PrimaryKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLR__MaxLength_descriptor_, &AccountLR__MaxLength::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountRL_descriptor_, &AccountRL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountRL__PrimaryKey_descriptor_, &AccountRL__PrimaryKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountRL__MaxLength_descriptor_, &AccountRL__MaxLength::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_2fAccount_2eproto() {
  delete AccountMisc::default_instance_;
  delete AccountMisc_reflection_;
  delete Account::default_instance_;
  delete Account_reflection_;
  delete Account__PrimaryKey::default_instance_;
  delete Account__PrimaryKey_reflection_;
  delete Account__MaxLength::default_instance_;
  delete Account__MaxLength_reflection_;
  delete Account__Index::default_instance_;
  delete Account__Index_reflection_;
  delete AccountLR::default_instance_;
  delete AccountLR_reflection_;
  delete AccountLR__PrimaryKey::default_instance_;
  delete AccountLR__PrimaryKey_reflection_;
  delete AccountLR__MaxLength::default_instance_;
  delete AccountLR__MaxLength_reflection_;
  delete AccountRL::default_instance_;
  delete AccountRL_reflection_;
  delete AccountRL__PrimaryKey::default_instance_;
  delete AccountRL__PrimaryKey_reflection_;
  delete AccountRL__MaxLength::default_instance_;
  delete AccountRL__MaxLength_reflection_;
}

void protobuf_AddDesc_db_2fAccount_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020db/Account.proto\022\002db\"\034\n\013AccountMisc\022\r\n"
    "\005dummy\030\001 \002(\r\"\312\001\n\007Account\022\013\n\003gid\030\001 \002(\004\022\020\n"
    "\010platform\030\002 \002(\r\022\016\n\006openid\030\003 \002(\t\022\014\n\004time\030"
    "\004 \002(\r\022\035\n\004misc\030\005 \002(\0132\017.db.AccountMisc\032\032\n\013"
    "_PrimaryKey\022\013\n\003gid\030\001 \001(\r\032 \n\n_MaxLength\022\022"
    "\n\006openid\030\001 \001(\r:\00232\032%\n\006_Index\022\013\n\003gid\030\001 \001("
    "\t\022\016\n\006openid\030\002 \001(\t\"\206\001\n\tAccountLR\022\013\n\003gid\030\001"
    " \002(\004\022\020\n\010platform\030\002 \002(\r\022\016\n\006openid\030\003 \002(\t\022\014"
    "\n\004time\030\004 \002(\r\032\032\n\013_PrimaryKey\022\013\n\003gid\030\001 \001(\r"
    "\032 \n\n_MaxLength\022\022\n\006openid\030\001 \001(\r:\00232\"\233\001\n\tA"
    "ccountRL\022\013\n\003gid\030\001 \002(\004\022\020\n\010platform\030\002 \002(\r\022"
    "\016\n\006openid\030\003 \002(\t\022\014\n\004time\030\004 \002(\r\032/\n\013_Primar"
    "yKey\022\020\n\010platform\030\001 \001(\r\022\016\n\006openid\030\002 \001(\r\032 "
    "\n\n_MaxLength\022\022\n\006openid\030\001 \001(\r:\00232", 552);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db/Account.proto", &protobuf_RegisterTypes);
  AccountMisc::default_instance_ = new AccountMisc();
  Account::default_instance_ = new Account();
  Account__PrimaryKey::default_instance_ = new Account__PrimaryKey();
  Account__MaxLength::default_instance_ = new Account__MaxLength();
  Account__Index::default_instance_ = new Account__Index();
  AccountLR::default_instance_ = new AccountLR();
  AccountLR__PrimaryKey::default_instance_ = new AccountLR__PrimaryKey();
  AccountLR__MaxLength::default_instance_ = new AccountLR__MaxLength();
  AccountRL::default_instance_ = new AccountRL();
  AccountRL__PrimaryKey::default_instance_ = new AccountRL__PrimaryKey();
  AccountRL__MaxLength::default_instance_ = new AccountRL__MaxLength();
  AccountMisc::default_instance_->InitAsDefaultInstance();
  Account::default_instance_->InitAsDefaultInstance();
  Account__PrimaryKey::default_instance_->InitAsDefaultInstance();
  Account__MaxLength::default_instance_->InitAsDefaultInstance();
  Account__Index::default_instance_->InitAsDefaultInstance();
  AccountLR::default_instance_->InitAsDefaultInstance();
  AccountLR__PrimaryKey::default_instance_->InitAsDefaultInstance();
  AccountLR__MaxLength::default_instance_->InitAsDefaultInstance();
  AccountRL::default_instance_->InitAsDefaultInstance();
  AccountRL__PrimaryKey::default_instance_->InitAsDefaultInstance();
  AccountRL__MaxLength::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_2fAccount_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_2fAccount_2eproto {
  StaticDescriptorInitializer_db_2fAccount_2eproto() {
    protobuf_AddDesc_db_2fAccount_2eproto();
  }
} static_descriptor_initializer_db_2fAccount_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AccountMisc::kDummyFieldNumber;
#endif  // !_MSC_VER

AccountMisc::AccountMisc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.AccountMisc)
}

void AccountMisc::InitAsDefaultInstance() {
}

AccountMisc::AccountMisc(const AccountMisc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.AccountMisc)
}

void AccountMisc::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountMisc::~AccountMisc() {
  // @@protoc_insertion_point(destructor:db.AccountMisc)
  SharedDtor();
}

void AccountMisc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountMisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountMisc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountMisc_descriptor_;
}

const AccountMisc& AccountMisc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

AccountMisc* AccountMisc::default_instance_ = NULL;

AccountMisc* AccountMisc::New() const {
  return new AccountMisc;
}

void AccountMisc::Clear() {
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountMisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.AccountMisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.AccountMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.AccountMisc)
  return false;
#undef DO_
}

void AccountMisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.AccountMisc)
  // required uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.AccountMisc)
}

::google::protobuf::uint8* AccountMisc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.AccountMisc)
  // required uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.AccountMisc)
  return target;
}

int AccountMisc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountMisc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountMisc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountMisc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountMisc::MergeFrom(const AccountMisc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountMisc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountMisc::CopyFrom(const AccountMisc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountMisc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccountMisc::Swap(AccountMisc* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountMisc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountMisc_descriptor_;
  metadata.reflection = AccountMisc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Account__PrimaryKey::kGidFieldNumber;
#endif  // !_MSC_VER

Account__PrimaryKey::Account__PrimaryKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.Account._PrimaryKey)
}

void Account__PrimaryKey::InitAsDefaultInstance() {
}

Account__PrimaryKey::Account__PrimaryKey(const Account__PrimaryKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.Account._PrimaryKey)
}

void Account__PrimaryKey::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account__PrimaryKey::~Account__PrimaryKey() {
  // @@protoc_insertion_point(destructor:db.Account._PrimaryKey)
  SharedDtor();
}

void Account__PrimaryKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Account__PrimaryKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account__PrimaryKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account__PrimaryKey_descriptor_;
}

const Account__PrimaryKey& Account__PrimaryKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

Account__PrimaryKey* Account__PrimaryKey::default_instance_ = NULL;

Account__PrimaryKey* Account__PrimaryKey::New() const {
  return new Account__PrimaryKey;
}

void Account__PrimaryKey::Clear() {
  gid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account__PrimaryKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.Account._PrimaryKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.Account._PrimaryKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.Account._PrimaryKey)
  return false;
#undef DO_
}

void Account__PrimaryKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.Account._PrimaryKey)
  // optional uint32 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.Account._PrimaryKey)
}

::google::protobuf::uint8* Account__PrimaryKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.Account._PrimaryKey)
  // optional uint32 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.Account._PrimaryKey)
  return target;
}

int Account__PrimaryKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account__PrimaryKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account__PrimaryKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account__PrimaryKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account__PrimaryKey::MergeFrom(const Account__PrimaryKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account__PrimaryKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account__PrimaryKey::CopyFrom(const Account__PrimaryKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account__PrimaryKey::IsInitialized() const {

  return true;
}

void Account__PrimaryKey::Swap(Account__PrimaryKey* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account__PrimaryKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account__PrimaryKey_descriptor_;
  metadata.reflection = Account__PrimaryKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Account__MaxLength::kOpenidFieldNumber;
#endif  // !_MSC_VER

Account__MaxLength::Account__MaxLength()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.Account._MaxLength)
}

void Account__MaxLength::InitAsDefaultInstance() {
}

Account__MaxLength::Account__MaxLength(const Account__MaxLength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.Account._MaxLength)
}

void Account__MaxLength::SharedCtor() {
  _cached_size_ = 0;
  openid_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account__MaxLength::~Account__MaxLength() {
  // @@protoc_insertion_point(destructor:db.Account._MaxLength)
  SharedDtor();
}

void Account__MaxLength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Account__MaxLength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account__MaxLength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account__MaxLength_descriptor_;
}

const Account__MaxLength& Account__MaxLength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

Account__MaxLength* Account__MaxLength::default_instance_ = NULL;

Account__MaxLength* Account__MaxLength::New() const {
  return new Account__MaxLength;
}

void Account__MaxLength::Clear() {
  openid_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account__MaxLength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.Account._MaxLength)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 openid = 1 [default = 32];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openid_)));
          set_has_openid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.Account._MaxLength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.Account._MaxLength)
  return false;
#undef DO_
}

void Account__MaxLength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.Account._MaxLength)
  // optional uint32 openid = 1 [default = 32];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.Account._MaxLength)
}

::google::protobuf::uint8* Account__MaxLength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.Account._MaxLength)
  // optional uint32 openid = 1 [default = 32];
  if (has_openid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.Account._MaxLength)
  return target;
}

int Account__MaxLength::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 openid = 1 [default = 32];
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account__MaxLength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account__MaxLength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account__MaxLength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account__MaxLength::MergeFrom(const Account__MaxLength& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account__MaxLength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account__MaxLength::CopyFrom(const Account__MaxLength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account__MaxLength::IsInitialized() const {

  return true;
}

void Account__MaxLength::Swap(Account__MaxLength* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account__MaxLength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account__MaxLength_descriptor_;
  metadata.reflection = Account__MaxLength_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Account__Index::kGidFieldNumber;
const int Account__Index::kOpenidFieldNumber;
#endif  // !_MSC_VER

Account__Index::Account__Index()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.Account._Index)
}

void Account__Index::InitAsDefaultInstance() {
}

Account__Index::Account__Index(const Account__Index& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.Account._Index)
}

void Account__Index::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account__Index::~Account__Index() {
  // @@protoc_insertion_point(destructor:db.Account._Index)
  SharedDtor();
}

void Account__Index::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void Account__Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account__Index::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account__Index_descriptor_;
}

const Account__Index& Account__Index::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

Account__Index* Account__Index::default_instance_ = NULL;

Account__Index* Account__Index::New() const {
  return new Account__Index;
}

void Account__Index::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account__Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.Account._Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.Account._Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.Account._Index)
  return false;
#undef DO_
}

void Account__Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.Account._Index)
  // optional string gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gid(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.Account._Index)
}

::google::protobuf::uint8* Account__Index::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.Account._Index)
  // optional string gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gid(), target);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.Account._Index)
  return target;
}

int Account__Index::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account__Index::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account__Index* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account__Index*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account__Index::MergeFrom(const Account__Index& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account__Index::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account__Index::CopyFrom(const Account__Index& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account__Index::IsInitialized() const {

  return true;
}

void Account__Index::Swap(Account__Index* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account__Index::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account__Index_descriptor_;
  metadata.reflection = Account__Index_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Account::kGidFieldNumber;
const int Account::kPlatformFieldNumber;
const int Account::kOpenidFieldNumber;
const int Account::kTimeFieldNumber;
const int Account::kMiscFieldNumber;
#endif  // !_MSC_VER

Account::Account()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.Account)
}

void Account::InitAsDefaultInstance() {
  misc_ = const_cast< ::db::AccountMisc*>(&::db::AccountMisc::default_instance());
}

Account::Account(const Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.Account)
}

void Account::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  platform_ = 0u;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  misc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:db.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (this != default_instance_) {
    delete misc_;
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_descriptor_;
}

const Account& Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

Account* Account::default_instance_ = NULL;

Account* Account::New() const {
  return new Account;
}

void Account::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Account*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(platform_, time_);
    gid_ = GOOGLE_ULONGLONG(0);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    if (has_misc()) {
      if (misc_ != NULL) misc_->::db::AccountMisc::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.Account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_platform;
        break;
      }

      // required uint32 platform = 2;
      case 2: {
        if (tag == 16) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_openid;
        break;
      }

      // required string openid = 3;
      case 3: {
        if (tag == 26) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_misc;
        break;
      }

      // required .db.AccountMisc misc = 5;
      case 5: {
        if (tag == 42) {
         parse_misc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.Account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.Account)
  return false;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.Account)
  // required uint64 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gid(), output);
  }

  // required uint32 platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->platform(), output);
  }

  // required string openid = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->openid(), output);
  }

  // required uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // required .db.AccountMisc misc = 5;
  if (has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->misc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.Account)
}

::google::protobuf::uint8* Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.Account)
  // required uint64 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gid(), target);
  }

  // required uint32 platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->platform(), target);
  }

  // required string openid = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->openid(), target);
  }

  // required uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // required .db.AccountMisc misc = 5;
  if (has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->misc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.Account)
  return target;
}

int Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }

    // required uint32 platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // required string openid = 3;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required .db.AccountMisc misc = 5;
    if (has_misc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->misc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_misc()) {
      mutable_misc()->::db::AccountMisc::MergeFrom(from.misc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_misc()) {
    if (!this->misc().IsInitialized()) return false;
  }
  return true;
}

void Account::Swap(Account* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(platform_, other->platform_);
    std::swap(openid_, other->openid_);
    std::swap(time_, other->time_);
    std::swap(misc_, other->misc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_descriptor_;
  metadata.reflection = Account_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLR__PrimaryKey::kGidFieldNumber;
#endif  // !_MSC_VER

AccountLR__PrimaryKey::AccountLR__PrimaryKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.AccountLR._PrimaryKey)
}

void AccountLR__PrimaryKey::InitAsDefaultInstance() {
}

AccountLR__PrimaryKey::AccountLR__PrimaryKey(const AccountLR__PrimaryKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.AccountLR._PrimaryKey)
}

void AccountLR__PrimaryKey::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLR__PrimaryKey::~AccountLR__PrimaryKey() {
  // @@protoc_insertion_point(destructor:db.AccountLR._PrimaryKey)
  SharedDtor();
}

void AccountLR__PrimaryKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountLR__PrimaryKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLR__PrimaryKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLR__PrimaryKey_descriptor_;
}

const AccountLR__PrimaryKey& AccountLR__PrimaryKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

AccountLR__PrimaryKey* AccountLR__PrimaryKey::default_instance_ = NULL;

AccountLR__PrimaryKey* AccountLR__PrimaryKey::New() const {
  return new AccountLR__PrimaryKey;
}

void AccountLR__PrimaryKey::Clear() {
  gid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLR__PrimaryKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.AccountLR._PrimaryKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.AccountLR._PrimaryKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.AccountLR._PrimaryKey)
  return false;
#undef DO_
}

void AccountLR__PrimaryKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.AccountLR._PrimaryKey)
  // optional uint32 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.AccountLR._PrimaryKey)
}

::google::protobuf::uint8* AccountLR__PrimaryKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.AccountLR._PrimaryKey)
  // optional uint32 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.AccountLR._PrimaryKey)
  return target;
}

int AccountLR__PrimaryKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLR__PrimaryKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLR__PrimaryKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLR__PrimaryKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLR__PrimaryKey::MergeFrom(const AccountLR__PrimaryKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLR__PrimaryKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLR__PrimaryKey::CopyFrom(const AccountLR__PrimaryKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLR__PrimaryKey::IsInitialized() const {

  return true;
}

void AccountLR__PrimaryKey::Swap(AccountLR__PrimaryKey* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLR__PrimaryKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLR__PrimaryKey_descriptor_;
  metadata.reflection = AccountLR__PrimaryKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AccountLR__MaxLength::kOpenidFieldNumber;
#endif  // !_MSC_VER

AccountLR__MaxLength::AccountLR__MaxLength()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.AccountLR._MaxLength)
}

void AccountLR__MaxLength::InitAsDefaultInstance() {
}

AccountLR__MaxLength::AccountLR__MaxLength(const AccountLR__MaxLength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.AccountLR._MaxLength)
}

void AccountLR__MaxLength::SharedCtor() {
  _cached_size_ = 0;
  openid_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLR__MaxLength::~AccountLR__MaxLength() {
  // @@protoc_insertion_point(destructor:db.AccountLR._MaxLength)
  SharedDtor();
}

void AccountLR__MaxLength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountLR__MaxLength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLR__MaxLength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLR__MaxLength_descriptor_;
}

const AccountLR__MaxLength& AccountLR__MaxLength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

AccountLR__MaxLength* AccountLR__MaxLength::default_instance_ = NULL;

AccountLR__MaxLength* AccountLR__MaxLength::New() const {
  return new AccountLR__MaxLength;
}

void AccountLR__MaxLength::Clear() {
  openid_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLR__MaxLength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.AccountLR._MaxLength)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 openid = 1 [default = 32];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openid_)));
          set_has_openid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.AccountLR._MaxLength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.AccountLR._MaxLength)
  return false;
#undef DO_
}

void AccountLR__MaxLength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.AccountLR._MaxLength)
  // optional uint32 openid = 1 [default = 32];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.AccountLR._MaxLength)
}

::google::protobuf::uint8* AccountLR__MaxLength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.AccountLR._MaxLength)
  // optional uint32 openid = 1 [default = 32];
  if (has_openid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.AccountLR._MaxLength)
  return target;
}

int AccountLR__MaxLength::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 openid = 1 [default = 32];
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLR__MaxLength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLR__MaxLength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLR__MaxLength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLR__MaxLength::MergeFrom(const AccountLR__MaxLength& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLR__MaxLength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLR__MaxLength::CopyFrom(const AccountLR__MaxLength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLR__MaxLength::IsInitialized() const {

  return true;
}

void AccountLR__MaxLength::Swap(AccountLR__MaxLength* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLR__MaxLength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLR__MaxLength_descriptor_;
  metadata.reflection = AccountLR__MaxLength_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AccountLR::kGidFieldNumber;
const int AccountLR::kPlatformFieldNumber;
const int AccountLR::kOpenidFieldNumber;
const int AccountLR::kTimeFieldNumber;
#endif  // !_MSC_VER

AccountLR::AccountLR()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.AccountLR)
}

void AccountLR::InitAsDefaultInstance() {
}

AccountLR::AccountLR(const AccountLR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.AccountLR)
}

void AccountLR::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  platform_ = 0u;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLR::~AccountLR() {
  // @@protoc_insertion_point(destructor:db.AccountLR)
  SharedDtor();
}

void AccountLR::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void AccountLR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLR_descriptor_;
}

const AccountLR& AccountLR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

AccountLR* AccountLR::default_instance_ = NULL;

AccountLR* AccountLR::New() const {
  return new AccountLR;
}

void AccountLR::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AccountLR*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(platform_, time_);
    gid_ = GOOGLE_ULONGLONG(0);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.AccountLR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_platform;
        break;
      }

      // required uint32 platform = 2;
      case 2: {
        if (tag == 16) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_openid;
        break;
      }

      // required string openid = 3;
      case 3: {
        if (tag == 26) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.AccountLR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.AccountLR)
  return false;
#undef DO_
}

void AccountLR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.AccountLR)
  // required uint64 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gid(), output);
  }

  // required uint32 platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->platform(), output);
  }

  // required string openid = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->openid(), output);
  }

  // required uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.AccountLR)
}

::google::protobuf::uint8* AccountLR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.AccountLR)
  // required uint64 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gid(), target);
  }

  // required uint32 platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->platform(), target);
  }

  // required string openid = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->openid(), target);
  }

  // required uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.AccountLR)
  return target;
}

int AccountLR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }

    // required uint32 platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // required string openid = 3;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLR::MergeFrom(const AccountLR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLR::CopyFrom(const AccountLR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLR::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AccountLR::Swap(AccountLR* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(platform_, other->platform_);
    std::swap(openid_, other->openid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLR_descriptor_;
  metadata.reflection = AccountLR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountRL__PrimaryKey::kPlatformFieldNumber;
const int AccountRL__PrimaryKey::kOpenidFieldNumber;
#endif  // !_MSC_VER

AccountRL__PrimaryKey::AccountRL__PrimaryKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.AccountRL._PrimaryKey)
}

void AccountRL__PrimaryKey::InitAsDefaultInstance() {
}

AccountRL__PrimaryKey::AccountRL__PrimaryKey(const AccountRL__PrimaryKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.AccountRL._PrimaryKey)
}

void AccountRL__PrimaryKey::SharedCtor() {
  _cached_size_ = 0;
  platform_ = 0u;
  openid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountRL__PrimaryKey::~AccountRL__PrimaryKey() {
  // @@protoc_insertion_point(destructor:db.AccountRL._PrimaryKey)
  SharedDtor();
}

void AccountRL__PrimaryKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountRL__PrimaryKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountRL__PrimaryKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRL__PrimaryKey_descriptor_;
}

const AccountRL__PrimaryKey& AccountRL__PrimaryKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

AccountRL__PrimaryKey* AccountRL__PrimaryKey::default_instance_ = NULL;

AccountRL__PrimaryKey* AccountRL__PrimaryKey::New() const {
  return new AccountRL__PrimaryKey;
}

void AccountRL__PrimaryKey::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AccountRL__PrimaryKey*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(platform_, openid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountRL__PrimaryKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.AccountRL._PrimaryKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 platform = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_openid;
        break;
      }

      // optional uint32 openid = 2;
      case 2: {
        if (tag == 16) {
         parse_openid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openid_)));
          set_has_openid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.AccountRL._PrimaryKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.AccountRL._PrimaryKey)
  return false;
#undef DO_
}

void AccountRL__PrimaryKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.AccountRL._PrimaryKey)
  // optional uint32 platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->platform(), output);
  }

  // optional uint32 openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.AccountRL._PrimaryKey)
}

::google::protobuf::uint8* AccountRL__PrimaryKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.AccountRL._PrimaryKey)
  // optional uint32 platform = 1;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->platform(), target);
  }

  // optional uint32 openid = 2;
  if (has_openid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.AccountRL._PrimaryKey)
  return target;
}

int AccountRL__PrimaryKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // optional uint32 openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountRL__PrimaryKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountRL__PrimaryKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountRL__PrimaryKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountRL__PrimaryKey::MergeFrom(const AccountRL__PrimaryKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountRL__PrimaryKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRL__PrimaryKey::CopyFrom(const AccountRL__PrimaryKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRL__PrimaryKey::IsInitialized() const {

  return true;
}

void AccountRL__PrimaryKey::Swap(AccountRL__PrimaryKey* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountRL__PrimaryKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountRL__PrimaryKey_descriptor_;
  metadata.reflection = AccountRL__PrimaryKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AccountRL__MaxLength::kOpenidFieldNumber;
#endif  // !_MSC_VER

AccountRL__MaxLength::AccountRL__MaxLength()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.AccountRL._MaxLength)
}

void AccountRL__MaxLength::InitAsDefaultInstance() {
}

AccountRL__MaxLength::AccountRL__MaxLength(const AccountRL__MaxLength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.AccountRL._MaxLength)
}

void AccountRL__MaxLength::SharedCtor() {
  _cached_size_ = 0;
  openid_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountRL__MaxLength::~AccountRL__MaxLength() {
  // @@protoc_insertion_point(destructor:db.AccountRL._MaxLength)
  SharedDtor();
}

void AccountRL__MaxLength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountRL__MaxLength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountRL__MaxLength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRL__MaxLength_descriptor_;
}

const AccountRL__MaxLength& AccountRL__MaxLength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

AccountRL__MaxLength* AccountRL__MaxLength::default_instance_ = NULL;

AccountRL__MaxLength* AccountRL__MaxLength::New() const {
  return new AccountRL__MaxLength;
}

void AccountRL__MaxLength::Clear() {
  openid_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountRL__MaxLength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.AccountRL._MaxLength)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 openid = 1 [default = 32];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openid_)));
          set_has_openid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.AccountRL._MaxLength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.AccountRL._MaxLength)
  return false;
#undef DO_
}

void AccountRL__MaxLength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.AccountRL._MaxLength)
  // optional uint32 openid = 1 [default = 32];
  if (has_openid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.AccountRL._MaxLength)
}

::google::protobuf::uint8* AccountRL__MaxLength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.AccountRL._MaxLength)
  // optional uint32 openid = 1 [default = 32];
  if (has_openid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.AccountRL._MaxLength)
  return target;
}

int AccountRL__MaxLength::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 openid = 1 [default = 32];
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountRL__MaxLength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountRL__MaxLength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountRL__MaxLength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountRL__MaxLength::MergeFrom(const AccountRL__MaxLength& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountRL__MaxLength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRL__MaxLength::CopyFrom(const AccountRL__MaxLength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRL__MaxLength::IsInitialized() const {

  return true;
}

void AccountRL__MaxLength::Swap(AccountRL__MaxLength* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountRL__MaxLength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountRL__MaxLength_descriptor_;
  metadata.reflection = AccountRL__MaxLength_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AccountRL::kGidFieldNumber;
const int AccountRL::kPlatformFieldNumber;
const int AccountRL::kOpenidFieldNumber;
const int AccountRL::kTimeFieldNumber;
#endif  // !_MSC_VER

AccountRL::AccountRL()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.AccountRL)
}

void AccountRL::InitAsDefaultInstance() {
}

AccountRL::AccountRL(const AccountRL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db.AccountRL)
}

void AccountRL::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  platform_ = 0u;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountRL::~AccountRL() {
  // @@protoc_insertion_point(destructor:db.AccountRL)
  SharedDtor();
}

void AccountRL::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void AccountRL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountRL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRL_descriptor_;
}

const AccountRL& AccountRL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fAccount_2eproto();
  return *default_instance_;
}

AccountRL* AccountRL::default_instance_ = NULL;

AccountRL* AccountRL::New() const {
  return new AccountRL;
}

void AccountRL::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AccountRL*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(platform_, time_);
    gid_ = GOOGLE_ULONGLONG(0);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountRL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.AccountRL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_platform;
        break;
      }

      // required uint32 platform = 2;
      case 2: {
        if (tag == 16) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_openid;
        break;
      }

      // required string openid = 3;
      case 3: {
        if (tag == 26) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.AccountRL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.AccountRL)
  return false;
#undef DO_
}

void AccountRL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.AccountRL)
  // required uint64 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gid(), output);
  }

  // required uint32 platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->platform(), output);
  }

  // required string openid = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->openid(), output);
  }

  // required uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.AccountRL)
}

::google::protobuf::uint8* AccountRL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.AccountRL)
  // required uint64 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gid(), target);
  }

  // required uint32 platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->platform(), target);
  }

  // required string openid = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->openid(), target);
  }

  // required uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.AccountRL)
  return target;
}

int AccountRL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }

    // required uint32 platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // required string openid = 3;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountRL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountRL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountRL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountRL::MergeFrom(const AccountRL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountRL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRL::CopyFrom(const AccountRL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRL::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AccountRL::Swap(AccountRL* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(platform_, other->platform_);
    std::swap(openid_, other->openid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountRL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountRL_descriptor_;
  metadata.reflection = AccountRL_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)
