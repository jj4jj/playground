// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate/GateCSMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gate/GateCSMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gate {

namespace {

const ::google::protobuf::Descriptor* AuthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateCSMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateCSMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GateCSMsg_GateAuthCMD_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gate_2fGateCSMsg_2eproto() {
  protobuf_AddDesc_gate_2fGateCSMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gate/GateCSMsg.proto");
  GOOGLE_CHECK(file != NULL);
  AuthReq_descriptor_ = file->message_type(0);
  static const int AuthReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, area_),
  };
  AuthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthReq_descriptor_,
      AuthReq::default_instance_,
      AuthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthReq));
  AuthRsp_descriptor_ = file->message_type(1);
  static const int AuthRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRsp, result_),
  };
  AuthRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthRsp_descriptor_,
      AuthRsp::default_instance_,
      AuthRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthRsp));
  GateCSMsg_descriptor_ = file->message_type(2);
  static const int GateCSMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCSMsg, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCSMsg, authreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCSMsg, authrsp_),
  };
  GateCSMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateCSMsg_descriptor_,
      GateCSMsg::default_instance_,
      GateCSMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCSMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateCSMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateCSMsg));
  GateCSMsg_GateAuthCMD_descriptor_ = GateCSMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gate_2fGateCSMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthReq_descriptor_, &AuthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthRsp_descriptor_, &AuthRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateCSMsg_descriptor_, &GateCSMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gate_2fGateCSMsg_2eproto() {
  delete AuthReq::default_instance_;
  delete AuthReq_reflection_;
  delete AuthRsp::default_instance_;
  delete AuthRsp_reflection_;
  delete GateCSMsg::default_instance_;
  delete GateCSMsg_reflection_;
}

void protobuf_AddDesc_gate_2fGateCSMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024gate/GateCSMsg.proto\022\004gate\"A\n\007AuthReq\022"
    "\013\n\003uid\030\001 \002(\004\022\014\n\004auth\030\002 \002(\r\022\r\n\005token\030\003 \001("
    "\t\022\014\n\004area\030\004 \001(\r\"\031\n\007AuthRsp\022\016\n\006result\030\001 \002"
    "(\r\"\241\001\n\tGateCSMsg\022\013\n\003cmd\030\001 \002(\r\022\036\n\007authReq"
    "\030\002 \001(\0132\r.gate.AuthReq\022\036\n\007authRsp\030\003 \001(\0132\r"
    ".gate.AuthRsp\"G\n\013GateAuthCMD\022\022\n\016GATE_NEE"
    "D_AUTH\020\001\022\021\n\rGATE_AUTH_REQ\020\002\022\021\n\rGATE_AUTH"
    "_RSP\020\003", 286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gate/GateCSMsg.proto", &protobuf_RegisterTypes);
  AuthReq::default_instance_ = new AuthReq();
  AuthRsp::default_instance_ = new AuthRsp();
  GateCSMsg::default_instance_ = new GateCSMsg();
  AuthReq::default_instance_->InitAsDefaultInstance();
  AuthRsp::default_instance_->InitAsDefaultInstance();
  GateCSMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gate_2fGateCSMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gate_2fGateCSMsg_2eproto {
  StaticDescriptorInitializer_gate_2fGateCSMsg_2eproto() {
    protobuf_AddDesc_gate_2fGateCSMsg_2eproto();
  }
} static_descriptor_initializer_gate_2fGateCSMsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuthReq::kUidFieldNumber;
const int AuthReq::kAuthFieldNumber;
const int AuthReq::kTokenFieldNumber;
const int AuthReq::kAreaFieldNumber;
#endif  // !_MSC_VER

AuthReq::AuthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.AuthReq)
}

void AuthReq::InitAsDefaultInstance() {
}

AuthReq::AuthReq(const AuthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gate.AuthReq)
}

void AuthReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  auth_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthReq::~AuthReq() {
  // @@protoc_insertion_point(destructor:gate.AuthReq)
  SharedDtor();
}

void AuthReq::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void AuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthReq_descriptor_;
}

const AuthReq& AuthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2fGateCSMsg_2eproto();
  return *default_instance_;
}

AuthReq* AuthReq::default_instance_ = NULL;

AuthReq* AuthReq::New() const {
  return new AuthReq;
}

void AuthReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(auth_, area_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.AuthReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_auth;
        break;
      }

      // required uint32 auth = 2;
      case 2: {
        if (tag == 16) {
         parse_auth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_)));
          set_has_auth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_area;
        break;
      }

      // optional uint32 area = 4;
      case 4: {
        if (tag == 32) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.AuthReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.AuthReq)
  return false;
#undef DO_
}

void AuthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.AuthReq)
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required uint32 auth = 2;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->auth(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional uint32 area = 4;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.AuthReq)
}

::google::protobuf::uint8* AuthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gate.AuthReq)
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required uint32 auth = 2;
  if (has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->auth(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional uint32 area = 4;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.AuthReq)
  return target;
}

int AuthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required uint32 auth = 2;
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 area = 4;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthReq::MergeFrom(const AuthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_auth()) {
      set_auth(from.auth());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthReq::CopyFrom(const AuthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AuthReq::Swap(AuthReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(auth_, other->auth_);
    std::swap(token_, other->token_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthReq_descriptor_;
  metadata.reflection = AuthReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthRsp::kResultFieldNumber;
#endif  // !_MSC_VER

AuthRsp::AuthRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.AuthRsp)
}

void AuthRsp::InitAsDefaultInstance() {
}

AuthRsp::AuthRsp(const AuthRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gate.AuthRsp)
}

void AuthRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthRsp::~AuthRsp() {
  // @@protoc_insertion_point(destructor:gate.AuthRsp)
  SharedDtor();
}

void AuthRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuthRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthRsp_descriptor_;
}

const AuthRsp& AuthRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2fGateCSMsg_2eproto();
  return *default_instance_;
}

AuthRsp* AuthRsp::default_instance_ = NULL;

AuthRsp* AuthRsp::New() const {
  return new AuthRsp;
}

void AuthRsp::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.AuthRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.AuthRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.AuthRsp)
  return false;
#undef DO_
}

void AuthRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.AuthRsp)
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.AuthRsp)
}

::google::protobuf::uint8* AuthRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gate.AuthRsp)
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.AuthRsp)
  return target;
}

int AuthRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthRsp::MergeFrom(const AuthRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRsp::CopyFrom(const AuthRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthRsp::Swap(AuthRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthRsp_descriptor_;
  metadata.reflection = AuthRsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GateCSMsg_GateAuthCMD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateCSMsg_GateAuthCMD_descriptor_;
}
bool GateCSMsg_GateAuthCMD_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GateCSMsg_GateAuthCMD GateCSMsg::GATE_NEED_AUTH;
const GateCSMsg_GateAuthCMD GateCSMsg::GATE_AUTH_REQ;
const GateCSMsg_GateAuthCMD GateCSMsg::GATE_AUTH_RSP;
const GateCSMsg_GateAuthCMD GateCSMsg::GateAuthCMD_MIN;
const GateCSMsg_GateAuthCMD GateCSMsg::GateAuthCMD_MAX;
const int GateCSMsg::GateAuthCMD_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GateCSMsg::kCmdFieldNumber;
const int GateCSMsg::kAuthReqFieldNumber;
const int GateCSMsg::kAuthRspFieldNumber;
#endif  // !_MSC_VER

GateCSMsg::GateCSMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.GateCSMsg)
}

void GateCSMsg::InitAsDefaultInstance() {
  authreq_ = const_cast< ::gate::AuthReq*>(&::gate::AuthReq::default_instance());
  authrsp_ = const_cast< ::gate::AuthRsp*>(&::gate::AuthRsp::default_instance());
}

GateCSMsg::GateCSMsg(const GateCSMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gate.GateCSMsg)
}

void GateCSMsg::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  authreq_ = NULL;
  authrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateCSMsg::~GateCSMsg() {
  // @@protoc_insertion_point(destructor:gate.GateCSMsg)
  SharedDtor();
}

void GateCSMsg::SharedDtor() {
  if (this != default_instance_) {
    delete authreq_;
    delete authrsp_;
  }
}

void GateCSMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateCSMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateCSMsg_descriptor_;
}

const GateCSMsg& GateCSMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2fGateCSMsg_2eproto();
  return *default_instance_;
}

GateCSMsg* GateCSMsg::default_instance_ = NULL;

GateCSMsg* GateCSMsg::New() const {
  return new GateCSMsg;
}

void GateCSMsg::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 0u;
    if (has_authreq()) {
      if (authreq_ != NULL) authreq_->::gate::AuthReq::Clear();
    }
    if (has_authrsp()) {
      if (authrsp_ != NULL) authrsp_->::gate::AuthRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateCSMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.GateCSMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_authReq;
        break;
      }

      // optional .gate.AuthReq authReq = 2;
      case 2: {
        if (tag == 18) {
         parse_authReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_authRsp;
        break;
      }

      // optional .gate.AuthRsp authRsp = 3;
      case 3: {
        if (tag == 26) {
         parse_authRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authrsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.GateCSMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.GateCSMsg)
  return false;
#undef DO_
}

void GateCSMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.GateCSMsg)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional .gate.AuthReq authReq = 2;
  if (has_authreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->authreq(), output);
  }

  // optional .gate.AuthRsp authRsp = 3;
  if (has_authrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->authrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.GateCSMsg)
}

::google::protobuf::uint8* GateCSMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gate.GateCSMsg)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional .gate.AuthReq authReq = 2;
  if (has_authreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->authreq(), target);
  }

  // optional .gate.AuthRsp authRsp = 3;
  if (has_authrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->authrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.GateCSMsg)
  return target;
}

int GateCSMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional .gate.AuthReq authReq = 2;
    if (has_authreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authreq());
    }

    // optional .gate.AuthRsp authRsp = 3;
    if (has_authrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateCSMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateCSMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateCSMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateCSMsg::MergeFrom(const GateCSMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_authreq()) {
      mutable_authreq()->::gate::AuthReq::MergeFrom(from.authreq());
    }
    if (from.has_authrsp()) {
      mutable_authrsp()->::gate::AuthRsp::MergeFrom(from.authrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateCSMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateCSMsg::CopyFrom(const GateCSMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateCSMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_authreq()) {
    if (!this->authreq().IsInitialized()) return false;
  }
  if (has_authrsp()) {
    if (!this->authrsp().IsInitialized()) return false;
  }
  return true;
}

void GateCSMsg::Swap(GateCSMsg* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(authreq_, other->authreq_);
    std::swap(authrsp_, other->authrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateCSMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateCSMsg_descriptor_;
  metadata.reflection = GateCSMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gate

// @@protoc_insertion_point(global_scope)
