// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate/GateSSMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gate/GateSSMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gate {

namespace {

const ::google::protobuf::Descriptor* GateSSMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateSSMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GateSSMsg_EventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GateSSMsg_ConnectionCloseReason_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gate_2fGateSSMsg_2eproto() {
  protobuf_AddDesc_gate_2fGateSSMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gate/GateSSMsg.proto");
  GOOGLE_CHECK(file != NULL);
  GateSSMsg_descriptor_ = file->message_type(0);
  static const int GateSSMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSSMsg, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSSMsg, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSSMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSSMsg, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSSMsg, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSSMsg, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSSMsg, reason_),
  };
  GateSSMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateSSMsg_descriptor_,
      GateSSMsg::default_instance_,
      GateSSMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSSMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateSSMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateSSMsg));
  GateSSMsg_EventType_descriptor_ = GateSSMsg_descriptor_->enum_type(0);
  GateSSMsg_ConnectionCloseReason_descriptor_ = GateSSMsg_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gate_2fGateSSMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateSSMsg_descriptor_, &GateSSMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gate_2fGateSSMsg_2eproto() {
  delete GateSSMsg::default_instance_;
  delete GateSSMsg_reflection_;
}

void protobuf_AddDesc_gate_2fGateSSMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024gate/GateSSMsg.proto\022\004gate\"\204\003\n\tGateSSM"
    "sg\022(\n\005event\030\001 \002(\0162\031.gate.GateSSMsg.Event"
    "Type\022\013\n\003idx\030\002 \002(\r\022\013\n\003uid\030\003 \002(\004\022\014\n\004area\030\004"
    " \002(\r\022\n\n\002ip\030\024 \001(\r\022\014\n\004port\030\025 \001(\r\022\016\n\006reason"
    "\030\026 \001(\r\"A\n\tEventType\022\023\n\017EVENT_CONNECTED\020\001"
    "\022\017\n\013EVENT_CLOSE\020\002\022\016\n\nEVENT_DATA\020\003\"\267\001\n\025Co"
    "nnectionCloseReason\022\037\n\033CONNECTION_CLOSE_"
    "BY_DEFAULT\020\000\022\036\n\032CONNECTION_CLOSE_BY_CLIE"
    "NT\020\001\022\035\n\031CONNECTION_CLOSE_STOP_SVR\020\002\022\036\n\032C"
    "ONNECTION_CLOSE_EXCEPTION\020\003\022\036\n\032CONNECTIO"
    "N_CLOSE_BY_SERVER\020\004", 419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gate/GateSSMsg.proto", &protobuf_RegisterTypes);
  GateSSMsg::default_instance_ = new GateSSMsg();
  GateSSMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gate_2fGateSSMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gate_2fGateSSMsg_2eproto {
  StaticDescriptorInitializer_gate_2fGateSSMsg_2eproto() {
    protobuf_AddDesc_gate_2fGateSSMsg_2eproto();
  }
} static_descriptor_initializer_gate_2fGateSSMsg_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* GateSSMsg_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateSSMsg_EventType_descriptor_;
}
bool GateSSMsg_EventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GateSSMsg_EventType GateSSMsg::EVENT_CONNECTED;
const GateSSMsg_EventType GateSSMsg::EVENT_CLOSE;
const GateSSMsg_EventType GateSSMsg::EVENT_DATA;
const GateSSMsg_EventType GateSSMsg::EventType_MIN;
const GateSSMsg_EventType GateSSMsg::EventType_MAX;
const int GateSSMsg::EventType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GateSSMsg_ConnectionCloseReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateSSMsg_ConnectionCloseReason_descriptor_;
}
bool GateSSMsg_ConnectionCloseReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GateSSMsg_ConnectionCloseReason GateSSMsg::CONNECTION_CLOSE_BY_DEFAULT;
const GateSSMsg_ConnectionCloseReason GateSSMsg::CONNECTION_CLOSE_BY_CLIENT;
const GateSSMsg_ConnectionCloseReason GateSSMsg::CONNECTION_CLOSE_STOP_SVR;
const GateSSMsg_ConnectionCloseReason GateSSMsg::CONNECTION_CLOSE_EXCEPTION;
const GateSSMsg_ConnectionCloseReason GateSSMsg::CONNECTION_CLOSE_BY_SERVER;
const GateSSMsg_ConnectionCloseReason GateSSMsg::ConnectionCloseReason_MIN;
const GateSSMsg_ConnectionCloseReason GateSSMsg::ConnectionCloseReason_MAX;
const int GateSSMsg::ConnectionCloseReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GateSSMsg::kEventFieldNumber;
const int GateSSMsg::kIdxFieldNumber;
const int GateSSMsg::kUidFieldNumber;
const int GateSSMsg::kAreaFieldNumber;
const int GateSSMsg::kIpFieldNumber;
const int GateSSMsg::kPortFieldNumber;
const int GateSSMsg::kReasonFieldNumber;
#endif  // !_MSC_VER

GateSSMsg::GateSSMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.GateSSMsg)
}

void GateSSMsg::InitAsDefaultInstance() {
}

GateSSMsg::GateSSMsg(const GateSSMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gate.GateSSMsg)
}

void GateSSMsg::SharedCtor() {
  _cached_size_ = 0;
  event_ = 1;
  idx_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  area_ = 0u;
  ip_ = 0u;
  port_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateSSMsg::~GateSSMsg() {
  // @@protoc_insertion_point(destructor:gate.GateSSMsg)
  SharedDtor();
}

void GateSSMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateSSMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateSSMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateSSMsg_descriptor_;
}

const GateSSMsg& GateSSMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2fGateSSMsg_2eproto();
  return *default_instance_;
}

GateSSMsg* GateSSMsg::default_instance_ = NULL;

GateSSMsg* GateSSMsg::New() const {
  return new GateSSMsg;
}

void GateSSMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GateSSMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(idx_, reason_);
    event_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateSSMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.GateSSMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gate.GateSSMsg.EventType event = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gate::GateSSMsg_EventType_IsValid(value)) {
            set_event(static_cast< ::gate::GateSSMsg_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // required uint32 idx = 2;
      case 2: {
        if (tag == 16) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint64 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_area;
        break;
      }

      // required uint32 area = 4;
      case 4: {
        if (tag == 32) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 20;
      case 20: {
        if (tag == 160) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_port;
        break;
      }

      // optional uint32 port = 21;
      case 21: {
        if (tag == 168) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 22;
      case 22: {
        if (tag == 176) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.GateSSMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.GateSSMsg)
  return false;
#undef DO_
}

void GateSSMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.GateSSMsg)
  // required .gate.GateSSMsg.EventType event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // required uint32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // required uint64 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  // required uint32 area = 4;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->area(), output);
  }

  // optional uint32 ip = 20;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->ip(), output);
  }

  // optional uint32 port = 21;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->port(), output);
  }

  // optional uint32 reason = 22;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.GateSSMsg)
}

::google::protobuf::uint8* GateSSMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gate.GateSSMsg)
  // required .gate.GateSSMsg.EventType event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // required uint32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  // required uint64 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  // required uint32 area = 4;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->area(), target);
  }

  // optional uint32 ip = 20;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->ip(), target);
  }

  // optional uint32 port = 21;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->port(), target);
  }

  // optional uint32 reason = 22;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.GateSSMsg)
  return target;
}

int GateSSMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gate.GateSSMsg.EventType event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // required uint32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // required uint64 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required uint32 area = 4;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

    // optional uint32 ip = 20;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 port = 21;
    if (has_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 reason = 22;
    if (has_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateSSMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateSSMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateSSMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateSSMsg::MergeFrom(const GateSSMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateSSMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateSSMsg::CopyFrom(const GateSSMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateSSMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GateSSMsg::Swap(GateSSMsg* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(idx_, other->idx_);
    std::swap(uid_, other->uid_);
    std::swap(area_, other->area_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateSSMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateSSMsg_descriptor_;
  metadata.reflection = GateSSMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gate

// @@protoc_insertion_point(global_scope)
