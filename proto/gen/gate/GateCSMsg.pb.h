// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate/GateCSMsg.proto

#ifndef PROTOBUF_gate_2fGateCSMsg_2eproto__INCLUDED
#define PROTOBUF_gate_2fGateCSMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gate {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gate_2fGateCSMsg_2eproto();
void protobuf_AssignDesc_gate_2fGateCSMsg_2eproto();
void protobuf_ShutdownFile_gate_2fGateCSMsg_2eproto();

class AuthReq;
class AuthRsp;
class GateCSMsg;

enum GateCSMsg_GateAuthCMD {
  GateCSMsg_GateAuthCMD_GATE_NEED_AUTH = 1,
  GateCSMsg_GateAuthCMD_GATE_AUTH_REQ = 2,
  GateCSMsg_GateAuthCMD_GATE_AUTH_RSP = 3
};
bool GateCSMsg_GateAuthCMD_IsValid(int value);
const GateCSMsg_GateAuthCMD GateCSMsg_GateAuthCMD_GateAuthCMD_MIN = GateCSMsg_GateAuthCMD_GATE_NEED_AUTH;
const GateCSMsg_GateAuthCMD GateCSMsg_GateAuthCMD_GateAuthCMD_MAX = GateCSMsg_GateAuthCMD_GATE_AUTH_RSP;
const int GateCSMsg_GateAuthCMD_GateAuthCMD_ARRAYSIZE = GateCSMsg_GateAuthCMD_GateAuthCMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* GateCSMsg_GateAuthCMD_descriptor();
inline const ::std::string& GateCSMsg_GateAuthCMD_Name(GateCSMsg_GateAuthCMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    GateCSMsg_GateAuthCMD_descriptor(), value);
}
inline bool GateCSMsg_GateAuthCMD_Parse(
    const ::std::string& name, GateCSMsg_GateAuthCMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GateCSMsg_GateAuthCMD>(
    GateCSMsg_GateAuthCMD_descriptor(), name, value);
}
// ===================================================================

class AuthReq : public ::google::protobuf::Message {
 public:
  AuthReq();
  virtual ~AuthReq();

  AuthReq(const AuthReq& from);

  inline AuthReq& operator=(const AuthReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthReq& default_instance();

  void Swap(AuthReq* other);

  // implements Message ----------------------------------------------

  AuthReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthReq& from);
  void MergeFrom(const AuthReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // required uint32 auth = 2;
  inline bool has_auth() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 2;
  inline ::google::protobuf::uint32 auth() const;
  inline void set_auth(::google::protobuf::uint32 value);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 area = 4;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 4;
  inline ::google::protobuf::uint32 area() const;
  inline void set_area(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gate.AuthReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_auth();
  inline void clear_has_auth();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_area();
  inline void clear_has_area();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* token_;
  ::google::protobuf::uint32 auth_;
  ::google::protobuf::uint32 area_;
  friend void  protobuf_AddDesc_gate_2fGateCSMsg_2eproto();
  friend void protobuf_AssignDesc_gate_2fGateCSMsg_2eproto();
  friend void protobuf_ShutdownFile_gate_2fGateCSMsg_2eproto();

  void InitAsDefaultInstance();
  static AuthReq* default_instance_;
};
// -------------------------------------------------------------------

class AuthRsp : public ::google::protobuf::Message {
 public:
  AuthRsp();
  virtual ~AuthRsp();

  AuthRsp(const AuthRsp& from);

  inline AuthRsp& operator=(const AuthRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthRsp& default_instance();

  void Swap(AuthRsp* other);

  // implements Message ----------------------------------------------

  AuthRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthRsp& from);
  void MergeFrom(const AuthRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gate.AuthRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_gate_2fGateCSMsg_2eproto();
  friend void protobuf_AssignDesc_gate_2fGateCSMsg_2eproto();
  friend void protobuf_ShutdownFile_gate_2fGateCSMsg_2eproto();

  void InitAsDefaultInstance();
  static AuthRsp* default_instance_;
};
// -------------------------------------------------------------------

class GateCSMsg : public ::google::protobuf::Message {
 public:
  GateCSMsg();
  virtual ~GateCSMsg();

  GateCSMsg(const GateCSMsg& from);

  inline GateCSMsg& operator=(const GateCSMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateCSMsg& default_instance();

  void Swap(GateCSMsg* other);

  // implements Message ----------------------------------------------

  GateCSMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateCSMsg& from);
  void MergeFrom(const GateCSMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GateCSMsg_GateAuthCMD GateAuthCMD;
  static const GateAuthCMD GATE_NEED_AUTH = GateCSMsg_GateAuthCMD_GATE_NEED_AUTH;
  static const GateAuthCMD GATE_AUTH_REQ = GateCSMsg_GateAuthCMD_GATE_AUTH_REQ;
  static const GateAuthCMD GATE_AUTH_RSP = GateCSMsg_GateAuthCMD_GATE_AUTH_RSP;
  static inline bool GateAuthCMD_IsValid(int value) {
    return GateCSMsg_GateAuthCMD_IsValid(value);
  }
  static const GateAuthCMD GateAuthCMD_MIN =
    GateCSMsg_GateAuthCMD_GateAuthCMD_MIN;
  static const GateAuthCMD GateAuthCMD_MAX =
    GateCSMsg_GateAuthCMD_GateAuthCMD_MAX;
  static const int GateAuthCMD_ARRAYSIZE =
    GateCSMsg_GateAuthCMD_GateAuthCMD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GateAuthCMD_descriptor() {
    return GateCSMsg_GateAuthCMD_descriptor();
  }
  static inline const ::std::string& GateAuthCMD_Name(GateAuthCMD value) {
    return GateCSMsg_GateAuthCMD_Name(value);
  }
  static inline bool GateAuthCMD_Parse(const ::std::string& name,
      GateAuthCMD* value) {
    return GateCSMsg_GateAuthCMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional .gate.AuthReq authReq = 2;
  inline bool has_authreq() const;
  inline void clear_authreq();
  static const int kAuthReqFieldNumber = 2;
  inline const ::gate::AuthReq& authreq() const;
  inline ::gate::AuthReq* mutable_authreq();
  inline ::gate::AuthReq* release_authreq();
  inline void set_allocated_authreq(::gate::AuthReq* authreq);

  // optional .gate.AuthRsp authRsp = 3;
  inline bool has_authrsp() const;
  inline void clear_authrsp();
  static const int kAuthRspFieldNumber = 3;
  inline const ::gate::AuthRsp& authrsp() const;
  inline ::gate::AuthRsp* mutable_authrsp();
  inline ::gate::AuthRsp* release_authrsp();
  inline void set_allocated_authrsp(::gate::AuthRsp* authrsp);

  // @@protoc_insertion_point(class_scope:gate.GateCSMsg)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_authreq();
  inline void clear_has_authreq();
  inline void set_has_authrsp();
  inline void clear_has_authrsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gate::AuthReq* authreq_;
  ::gate::AuthRsp* authrsp_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_gate_2fGateCSMsg_2eproto();
  friend void protobuf_AssignDesc_gate_2fGateCSMsg_2eproto();
  friend void protobuf_ShutdownFile_gate_2fGateCSMsg_2eproto();

  void InitAsDefaultInstance();
  static GateCSMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// AuthReq

// required uint64 uid = 1;
inline bool AuthReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 AuthReq::uid() const {
  // @@protoc_insertion_point(field_get:gate.AuthReq.uid)
  return uid_;
}
inline void AuthReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:gate.AuthReq.uid)
}

// required uint32 auth = 2;
inline bool AuthReq::has_auth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthReq::set_has_auth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthReq::clear_has_auth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthReq::clear_auth() {
  auth_ = 0u;
  clear_has_auth();
}
inline ::google::protobuf::uint32 AuthReq::auth() const {
  // @@protoc_insertion_point(field_get:gate.AuthReq.auth)
  return auth_;
}
inline void AuthReq::set_auth(::google::protobuf::uint32 value) {
  set_has_auth();
  auth_ = value;
  // @@protoc_insertion_point(field_set:gate.AuthReq.auth)
}

// optional string token = 3;
inline bool AuthReq::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthReq::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthReq::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& AuthReq::token() const {
  // @@protoc_insertion_point(field_get:gate.AuthReq.token)
  return *token_;
}
inline void AuthReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:gate.AuthReq.token)
}
inline void AuthReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:gate.AuthReq.token)
}
inline void AuthReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gate.AuthReq.token)
}
inline ::std::string* AuthReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gate.AuthReq.token)
  return token_;
}
inline ::std::string* AuthReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gate.AuthReq.token)
}

// optional uint32 area = 4;
inline bool AuthReq::has_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuthReq::set_has_area() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuthReq::clear_has_area() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuthReq::clear_area() {
  area_ = 0u;
  clear_has_area();
}
inline ::google::protobuf::uint32 AuthReq::area() const {
  // @@protoc_insertion_point(field_get:gate.AuthReq.area)
  return area_;
}
inline void AuthReq::set_area(::google::protobuf::uint32 value) {
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:gate.AuthReq.area)
}

// -------------------------------------------------------------------

// AuthRsp

// required uint32 result = 1;
inline bool AuthRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthRsp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 AuthRsp::result() const {
  // @@protoc_insertion_point(field_get:gate.AuthRsp.result)
  return result_;
}
inline void AuthRsp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:gate.AuthRsp.result)
}

// -------------------------------------------------------------------

// GateCSMsg

// required uint32 cmd = 1;
inline bool GateCSMsg::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateCSMsg::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateCSMsg::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateCSMsg::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 GateCSMsg::cmd() const {
  // @@protoc_insertion_point(field_get:gate.GateCSMsg.cmd)
  return cmd_;
}
inline void GateCSMsg::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:gate.GateCSMsg.cmd)
}

// optional .gate.AuthReq authReq = 2;
inline bool GateCSMsg::has_authreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateCSMsg::set_has_authreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateCSMsg::clear_has_authreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateCSMsg::clear_authreq() {
  if (authreq_ != NULL) authreq_->::gate::AuthReq::Clear();
  clear_has_authreq();
}
inline const ::gate::AuthReq& GateCSMsg::authreq() const {
  // @@protoc_insertion_point(field_get:gate.GateCSMsg.authReq)
  return authreq_ != NULL ? *authreq_ : *default_instance_->authreq_;
}
inline ::gate::AuthReq* GateCSMsg::mutable_authreq() {
  set_has_authreq();
  if (authreq_ == NULL) authreq_ = new ::gate::AuthReq;
  // @@protoc_insertion_point(field_mutable:gate.GateCSMsg.authReq)
  return authreq_;
}
inline ::gate::AuthReq* GateCSMsg::release_authreq() {
  clear_has_authreq();
  ::gate::AuthReq* temp = authreq_;
  authreq_ = NULL;
  return temp;
}
inline void GateCSMsg::set_allocated_authreq(::gate::AuthReq* authreq) {
  delete authreq_;
  authreq_ = authreq;
  if (authreq) {
    set_has_authreq();
  } else {
    clear_has_authreq();
  }
  // @@protoc_insertion_point(field_set_allocated:gate.GateCSMsg.authReq)
}

// optional .gate.AuthRsp authRsp = 3;
inline bool GateCSMsg::has_authrsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateCSMsg::set_has_authrsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateCSMsg::clear_has_authrsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateCSMsg::clear_authrsp() {
  if (authrsp_ != NULL) authrsp_->::gate::AuthRsp::Clear();
  clear_has_authrsp();
}
inline const ::gate::AuthRsp& GateCSMsg::authrsp() const {
  // @@protoc_insertion_point(field_get:gate.GateCSMsg.authRsp)
  return authrsp_ != NULL ? *authrsp_ : *default_instance_->authrsp_;
}
inline ::gate::AuthRsp* GateCSMsg::mutable_authrsp() {
  set_has_authrsp();
  if (authrsp_ == NULL) authrsp_ = new ::gate::AuthRsp;
  // @@protoc_insertion_point(field_mutable:gate.GateCSMsg.authRsp)
  return authrsp_;
}
inline ::gate::AuthRsp* GateCSMsg::release_authrsp() {
  clear_has_authrsp();
  ::gate::AuthRsp* temp = authrsp_;
  authrsp_ = NULL;
  return temp;
}
inline void GateCSMsg::set_allocated_authrsp(::gate::AuthRsp* authrsp) {
  delete authrsp_;
  authrsp_ = authrsp;
  if (authrsp) {
    set_has_authrsp();
  } else {
    clear_has_authrsp();
  }
  // @@protoc_insertion_point(field_set_allocated:gate.GateCSMsg.authRsp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gate

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gate::GateCSMsg_GateAuthCMD> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gate::GateCSMsg_GateAuthCMD>() {
  return ::gate::GateCSMsg_GateAuthCMD_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gate_2fGateCSMsg_2eproto__INCLUDED
