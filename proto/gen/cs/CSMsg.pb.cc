// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs/CSMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs/CSMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cs {

namespace {

const ::google::protobuf::Descriptor* TestInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgTest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMsgTest_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoginRegNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRegNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRegisterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRegisterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgLogin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMsgLogin_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSAccountBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAccountBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAccountExt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAccountExt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAccountMisc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAccountMisc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgAccount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMsgAccount_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSMsgTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMsgTask_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSRank_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSFriend_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFamily_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSFamily_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSKnapsack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSKnapsack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSKnapsack_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSStage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSStage_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSActivity_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSBattle_CmdCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMsg_CSMsgCmdCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_2fCSMsg_2eproto() {
  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs/CSMsg.proto");
  GOOGLE_CHECK(file != NULL);
  TestInfoRsp_descriptor_ = file->message_type(0);
  static const int TestInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInfoRsp, dummy_),
  };
  TestInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestInfoRsp_descriptor_,
      TestInfoRsp::default_instance_,
      TestInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestInfoRsp));
  CSMsgTest_descriptor_ = file->message_type(1);
  static const int CSMsgTest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgTest, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgTest, infrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgTest, txtrsp_),
  };
  CSMsgTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgTest_descriptor_,
      CSMsgTest::default_instance_,
      CSMsgTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgTest));
  CSMsgTest_CmdCode_descriptor_ = CSMsgTest_descriptor_->enum_type(0);
  LoginRegNotify_descriptor_ = file->message_type(2);
  static const int LoginRegNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegNotify, dummy_),
  };
  LoginRegNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRegNotify_descriptor_,
      LoginRegNotify::default_instance_,
      LoginRegNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRegNotify));
  LoginRegisterReq_descriptor_ = file->message_type(3);
  static const int LoginRegisterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegisterReq, dummy_),
  };
  LoginRegisterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRegisterReq_descriptor_,
      LoginRegisterReq::default_instance_,
      LoginRegisterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegisterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegisterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRegisterReq));
  CSMsgLogin_descriptor_ = file->message_type(4);
  static const int CSMsgLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLogin, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLogin, notifyreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLogin, regreq_),
  };
  CSMsgLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgLogin_descriptor_,
      CSMsgLogin::default_instance_,
      CSMsgLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgLogin));
  CSMsgLogin_CmdCode_descriptor_ = CSMsgLogin_descriptor_->enum_type(0);
  CSAccountBase_descriptor_ = file->message_type(5);
  static const int CSAccountBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountBase, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountBase, level_),
  };
  CSAccountBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAccountBase_descriptor_,
      CSAccountBase::default_instance_,
      CSAccountBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAccountBase));
  CSAccountExt_descriptor_ = file->message_type(6);
  static const int CSAccountExt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountExt, dummy_),
  };
  CSAccountExt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAccountExt_descriptor_,
      CSAccountExt::default_instance_,
      CSAccountExt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountExt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountExt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAccountExt));
  CSAccountMisc_descriptor_ = file->message_type(7);
  static const int CSAccountMisc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountMisc, dummy_),
  };
  CSAccountMisc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAccountMisc_descriptor_,
      CSAccountMisc::default_instance_,
      CSAccountMisc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountMisc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccountMisc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAccountMisc));
  CSAccount_descriptor_ = file->message_type(8);
  static const int CSAccount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccount, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccount, ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccount, misc_),
  };
  CSAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAccount_descriptor_,
      CSAccount::default_instance_,
      CSAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAccount));
  CSMsgAccount_descriptor_ = file->message_type(9);
  static const int CSMsgAccount_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAccount, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAccount, allinforsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAccount, baseinforsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAccount, extinforsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAccount, miscinforsp_),
  };
  CSMsgAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgAccount_descriptor_,
      CSMsgAccount::default_instance_,
      CSMsgAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgAccount));
  CSMsgAccount_CmdCode_descriptor_ = CSMsgAccount_descriptor_->enum_type(0);
  CSMsgTask_descriptor_ = file->message_type(10);
  static const int CSMsgTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgTask, cmd_),
  };
  CSMsgTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgTask_descriptor_,
      CSMsgTask::default_instance_,
      CSMsgTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgTask));
  CSMsgTask_CmdCode_descriptor_ = CSMsgTask_descriptor_->enum_type(0);
  CSRank_descriptor_ = file->message_type(11);
  static const int CSRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRank, cmd_),
  };
  CSRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRank_descriptor_,
      CSRank::default_instance_,
      CSRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRank));
  CSRank_CmdCode_descriptor_ = CSRank_descriptor_->enum_type(0);
  CSFriend_descriptor_ = file->message_type(12);
  static const int CSFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFriend, cmd_),
  };
  CSFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFriend_descriptor_,
      CSFriend::default_instance_,
      CSFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFriend));
  CSFriend_CmdCode_descriptor_ = CSFriend_descriptor_->enum_type(0);
  CSFamily_descriptor_ = file->message_type(13);
  static const int CSFamily_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFamily, cmd_),
  };
  CSFamily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFamily_descriptor_,
      CSFamily::default_instance_,
      CSFamily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFamily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFamily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFamily));
  CSFamily_CmdCode_descriptor_ = CSFamily_descriptor_->enum_type(0);
  CSKnapsack_descriptor_ = file->message_type(14);
  static const int CSKnapsack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSKnapsack, cmd_),
  };
  CSKnapsack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSKnapsack_descriptor_,
      CSKnapsack::default_instance_,
      CSKnapsack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSKnapsack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSKnapsack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSKnapsack));
  CSKnapsack_CmdCode_descriptor_ = CSKnapsack_descriptor_->enum_type(0);
  CSStage_descriptor_ = file->message_type(15);
  static const int CSStage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStage, cmd_),
  };
  CSStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSStage_descriptor_,
      CSStage::default_instance_,
      CSStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSStage));
  CSStage_CmdCode_descriptor_ = CSStage_descriptor_->enum_type(0);
  CSActivity_descriptor_ = file->message_type(16);
  static const int CSActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSActivity, cmd_),
  };
  CSActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSActivity_descriptor_,
      CSActivity::default_instance_,
      CSActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSActivity));
  CSActivity_CmdCode_descriptor_ = CSActivity_descriptor_->enum_type(0);
  CSBattle_descriptor_ = file->message_type(17);
  static const int CSBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattle, cmd_),
  };
  CSBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattle_descriptor_,
      CSBattle::default_instance_,
      CSBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattle));
  CSBattle_CmdCode_descriptor_ = CSBattle_descriptor_->enum_type(0);
  CSMsg_descriptor_ = file->message_type(18);
  static const int CSMsg_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, knapsack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, battle_),
  };
  CSMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsg_descriptor_,
      CSMsg::default_instance_,
      CSMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsg));
  CSMsg_CSMsgCmdCode_descriptor_ = CSMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_2fCSMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestInfoRsp_descriptor_, &TestInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgTest_descriptor_, &CSMsgTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRegNotify_descriptor_, &LoginRegNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRegisterReq_descriptor_, &LoginRegisterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgLogin_descriptor_, &CSMsgLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAccountBase_descriptor_, &CSAccountBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAccountExt_descriptor_, &CSAccountExt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAccountMisc_descriptor_, &CSAccountMisc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAccount_descriptor_, &CSAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgAccount_descriptor_, &CSMsgAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgTask_descriptor_, &CSMsgTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRank_descriptor_, &CSRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFriend_descriptor_, &CSFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFamily_descriptor_, &CSFamily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSKnapsack_descriptor_, &CSKnapsack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSStage_descriptor_, &CSStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSActivity_descriptor_, &CSActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattle_descriptor_, &CSBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsg_descriptor_, &CSMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_2fCSMsg_2eproto() {
  delete TestInfoRsp::default_instance_;
  delete TestInfoRsp_reflection_;
  delete CSMsgTest::default_instance_;
  delete CSMsgTest_reflection_;
  delete LoginRegNotify::default_instance_;
  delete LoginRegNotify_reflection_;
  delete LoginRegisterReq::default_instance_;
  delete LoginRegisterReq_reflection_;
  delete CSMsgLogin::default_instance_;
  delete CSMsgLogin_reflection_;
  delete CSAccountBase::default_instance_;
  delete CSAccountBase_reflection_;
  delete CSAccountExt::default_instance_;
  delete CSAccountExt_reflection_;
  delete CSAccountMisc::default_instance_;
  delete CSAccountMisc_reflection_;
  delete CSAccount::default_instance_;
  delete CSAccount_reflection_;
  delete CSMsgAccount::default_instance_;
  delete CSMsgAccount_reflection_;
  delete CSMsgTask::default_instance_;
  delete CSMsgTask_reflection_;
  delete CSRank::default_instance_;
  delete CSRank_reflection_;
  delete CSFriend::default_instance_;
  delete CSFriend_reflection_;
  delete CSFamily::default_instance_;
  delete CSFamily_reflection_;
  delete CSKnapsack::default_instance_;
  delete CSKnapsack_reflection_;
  delete CSStage::default_instance_;
  delete CSStage_reflection_;
  delete CSActivity::default_instance_;
  delete CSActivity_reflection_;
  delete CSBattle::default_instance_;
  delete CSBattle_reflection_;
  delete CSMsg::default_instance_;
  delete CSMsg_reflection_;
}

void protobuf_AddDesc_cs_2fCSMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016cs/CSMsg.proto\022\002cs\"\034\n\013TestInfoRsp\022\r\n\005d"
    "ummy\030\001 \002(\r\"\236\001\n\tCSMsgTest\022\013\n\003cmd\030\001 \002(\r\022\037\n"
    "\006infRsp\030\002 \001(\0132\017.cs.TestInfoRsp\022\016\n\006txtRsp"
    "\030\003 \001(\t\"S\n\007CmdCode\022\027\n\023CSMSG_TEST_INFO_REQ"
    "\020\001\022\027\n\023CSMSG_TEST_INFO_RSP\020\002\022\026\n\022CSMSG_TES"
    "T_TXT_RSP\020\003\"\037\n\016LoginRegNotify\022\r\n\005dummy\030\001"
    " \001(\r\"!\n\020LoginRegisterReq\022\r\n\005dummy\030\001 \001(\r\""
    "\246\001\n\nCSMsgLogin\022\013\n\003cmd\030\001 \002(\r\022%\n\tnotifyReq"
    "\030\002 \001(\0132\022.cs.LoginRegNotify\022$\n\006regReq\030\003 \001"
    "(\0132\024.cs.LoginRegisterReq\">\n\007CmdCode\022\032\n\026C"
    "SMSG_LOGIN_REG_NOTIFY\020\001\022\027\n\023CSMSG_LOGIN_R"
    "EG_REQ\020\002\"9\n\rCSAccountBase\022\013\n\003uid\030\001 \002(\004\022\014"
    "\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\"\035\n\014CSAccount"
    "Ext\022\r\n\005dummy\030\001 \001(\r\"\036\n\rCSAccountMisc\022\r\n\005d"
    "ummy\030\001 \001(\r\"l\n\tCSAccount\022\037\n\004base\030\001 \002(\0132\021."
    "cs.CSAccountBase\022\035\n\003ext\030\002 \002(\0132\020.cs.CSAcc"
    "ountExt\022\037\n\004misc\030\003 \002(\0132\021.cs.CSAccountMisc"
    "\"\304\003\n\014CSMsgAccount\022\013\n\003cmd\030\001 \002(\r\022!\n\nallInf"
    "oRsp\030\002 \001(\0132\r.cs.CSAccount\022&\n\013baseInfoRsp"
    "\030\003 \001(\0132\021.cs.CSAccountBase\022$\n\nextInfoRsp\030"
    "\004 \001(\0132\020.cs.CSAccountExt\022&\n\013miscInfoRsp\030\005"
    " \001(\0132\021.cs.CSAccountMisc\"\215\002\n\007CmdCode\022\036\n\032C"
    "SMSG_ACCOUNT_ALL_INFO_REQ\020\001\022\037\n\033CSMSG_ACC"
    "OUNT_BASE_INFO_REQ\020\002\022\036\n\032CSMSG_ACCOUNT_EX"
    "T_INFO_REQ\020\003\022\037\n\033CSMSG_ACCOUNT_MISC_INFO_"
    "REQ\020\004\022\036\n\032CSMSG_ACCOUNT_ALL_INFO_RSP\020\005\022\037\n"
    "\033CSMSG_ACCOUNT_BASE_INFO_RSP\020\006\022\036\n\032CSMSG_"
    "ACCOUNT_EXT_INFO_RSP\020\007\022\037\n\033CSMSG_ACCOUNT_"
    "MISC_INFO_RSP\020\010\";\n\tCSMsgTask\022\013\n\003cmd\030\001 \002("
    "\r\"!\n\007CmdCode\022\026\n\022CSMSG_TASK_UPD_REQ\020\001\"8\n\006"
    "CSRank\022\013\n\003cmd\030\001 \002(\r\"!\n\007CmdCode\022\026\n\022CSMSG_"
    "RANK_UPD_REQ\020\001\"<\n\010CSFriend\022\013\n\003cmd\030\001 \002(\r\""
    "#\n\007CmdCode\022\030\n\024CSMSG_FRIEND_UPD_REQ\020\001\"<\n\010"
    "CSFamily\022\013\n\003cmd\030\001 \002(\r\"#\n\007CmdCode\022\030\n\024CSMS"
    "G_FAMILY_UPD_REQ\020\001\"@\n\nCSKnapsack\022\013\n\003cmd\030"
    "\001 \002(\r\"%\n\007CmdCode\022\032\n\026CSMSG_KNAPSACK_UPD_R"
    "EQ\020\001\":\n\007CSStage\022\013\n\003cmd\030\001 \002(\r\"\"\n\007CmdCode\022"
    "\027\n\023CSMSG_STAGE_UPD_REQ\020\001\"@\n\nCSActivity\022\013"
    "\n\003cmd\030\001 \002(\r\"%\n\007CmdCode\022\032\n\026CSMSG_ACTIVITY"
    "_UPD_REQ\020\001\"<\n\010CSBattle\022\013\n\003cmd\030\001 \002(\r\"#\n\007C"
    "mdCode\022\030\n\024CSMSG_BATTLE_UPD_REQ\020\001\"\225\003\n\005CSM"
    "sg\022\013\n\003cmd\030\001 \002(\r\022\013\n\003err\030\002 \001(\r\022\035\n\005login\030e "
    "\001(\0132\016.cs.CSMsgLogin\022\033\n\004test\030f \001(\0132\r.cs.C"
    "SMsgTest\022!\n\007account\030g \001(\0132\020.cs.CSMsgAcco"
    "unt\022\033\n\004task\030h \001(\0132\r.cs.CSMsgTask\022\030\n\004rank"
    "\030i \001(\0132\n.cs.CSRank\022\034\n\006friend\030j \001(\0132\014.cs."
    "CSFriend\022\034\n\006family\030k \001(\0132\014.cs.CSFamily\022 "
    "\n\010knapsack\030l \001(\0132\016.cs.CSKnapsack\022\032\n\005stag"
    "e\030m \001(\0132\013.cs.CSStage\022 \n\010activity\030n \001(\0132\016"
    ".cs.CSActivity\022\034\n\006battle\030o \001(\0132\014.cs.CSBa"
    "ttle\"\"\n\014CSMsgCmdCode\022\022\n\016CSMSG_CMD_TEST\020\001", 2040);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs/CSMsg.proto", &protobuf_RegisterTypes);
  TestInfoRsp::default_instance_ = new TestInfoRsp();
  CSMsgTest::default_instance_ = new CSMsgTest();
  LoginRegNotify::default_instance_ = new LoginRegNotify();
  LoginRegisterReq::default_instance_ = new LoginRegisterReq();
  CSMsgLogin::default_instance_ = new CSMsgLogin();
  CSAccountBase::default_instance_ = new CSAccountBase();
  CSAccountExt::default_instance_ = new CSAccountExt();
  CSAccountMisc::default_instance_ = new CSAccountMisc();
  CSAccount::default_instance_ = new CSAccount();
  CSMsgAccount::default_instance_ = new CSMsgAccount();
  CSMsgTask::default_instance_ = new CSMsgTask();
  CSRank::default_instance_ = new CSRank();
  CSFriend::default_instance_ = new CSFriend();
  CSFamily::default_instance_ = new CSFamily();
  CSKnapsack::default_instance_ = new CSKnapsack();
  CSStage::default_instance_ = new CSStage();
  CSActivity::default_instance_ = new CSActivity();
  CSBattle::default_instance_ = new CSBattle();
  CSMsg::default_instance_ = new CSMsg();
  TestInfoRsp::default_instance_->InitAsDefaultInstance();
  CSMsgTest::default_instance_->InitAsDefaultInstance();
  LoginRegNotify::default_instance_->InitAsDefaultInstance();
  LoginRegisterReq::default_instance_->InitAsDefaultInstance();
  CSMsgLogin::default_instance_->InitAsDefaultInstance();
  CSAccountBase::default_instance_->InitAsDefaultInstance();
  CSAccountExt::default_instance_->InitAsDefaultInstance();
  CSAccountMisc::default_instance_->InitAsDefaultInstance();
  CSAccount::default_instance_->InitAsDefaultInstance();
  CSMsgAccount::default_instance_->InitAsDefaultInstance();
  CSMsgTask::default_instance_->InitAsDefaultInstance();
  CSRank::default_instance_->InitAsDefaultInstance();
  CSFriend::default_instance_->InitAsDefaultInstance();
  CSFamily::default_instance_->InitAsDefaultInstance();
  CSKnapsack::default_instance_->InitAsDefaultInstance();
  CSStage::default_instance_->InitAsDefaultInstance();
  CSActivity::default_instance_->InitAsDefaultInstance();
  CSBattle::default_instance_->InitAsDefaultInstance();
  CSMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_2fCSMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_2fCSMsg_2eproto {
  StaticDescriptorInitializer_cs_2fCSMsg_2eproto() {
    protobuf_AddDesc_cs_2fCSMsg_2eproto();
  }
} static_descriptor_initializer_cs_2fCSMsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TestInfoRsp::kDummyFieldNumber;
#endif  // !_MSC_VER

TestInfoRsp::TestInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.TestInfoRsp)
}

void TestInfoRsp::InitAsDefaultInstance() {
}

TestInfoRsp::TestInfoRsp(const TestInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.TestInfoRsp)
}

void TestInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestInfoRsp::~TestInfoRsp() {
  // @@protoc_insertion_point(destructor:cs.TestInfoRsp)
  SharedDtor();
}

void TestInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestInfoRsp_descriptor_;
}

const TestInfoRsp& TestInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

TestInfoRsp* TestInfoRsp::default_instance_ = NULL;

TestInfoRsp* TestInfoRsp::New() const {
  return new TestInfoRsp;
}

void TestInfoRsp::Clear() {
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.TestInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.TestInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.TestInfoRsp)
  return false;
#undef DO_
}

void TestInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.TestInfoRsp)
  // required uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.TestInfoRsp)
}

::google::protobuf::uint8* TestInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.TestInfoRsp)
  // required uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.TestInfoRsp)
  return target;
}

int TestInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestInfoRsp::MergeFrom(const TestInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestInfoRsp::CopyFrom(const TestInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestInfoRsp::Swap(TestInfoRsp* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestInfoRsp_descriptor_;
  metadata.reflection = TestInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSMsgTest_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgTest_CmdCode_descriptor_;
}
bool CSMsgTest_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSMsgTest_CmdCode CSMsgTest::CSMSG_TEST_INFO_REQ;
const CSMsgTest_CmdCode CSMsgTest::CSMSG_TEST_INFO_RSP;
const CSMsgTest_CmdCode CSMsgTest::CSMSG_TEST_TXT_RSP;
const CSMsgTest_CmdCode CSMsgTest::CmdCode_MIN;
const CSMsgTest_CmdCode CSMsgTest::CmdCode_MAX;
const int CSMsgTest::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSMsgTest::kCmdFieldNumber;
const int CSMsgTest::kInfRspFieldNumber;
const int CSMsgTest::kTxtRspFieldNumber;
#endif  // !_MSC_VER

CSMsgTest::CSMsgTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSMsgTest)
}

void CSMsgTest::InitAsDefaultInstance() {
  infrsp_ = const_cast< ::cs::TestInfoRsp*>(&::cs::TestInfoRsp::default_instance());
}

CSMsgTest::CSMsgTest(const CSMsgTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSMsgTest)
}

void CSMsgTest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 0u;
  infrsp_ = NULL;
  txtrsp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgTest::~CSMsgTest() {
  // @@protoc_insertion_point(destructor:cs.CSMsgTest)
  SharedDtor();
}

void CSMsgTest::SharedDtor() {
  if (txtrsp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete txtrsp_;
  }
  if (this != default_instance_) {
    delete infrsp_;
  }
}

void CSMsgTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgTest_descriptor_;
}

const CSMsgTest& CSMsgTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSMsgTest* CSMsgTest::default_instance_ = NULL;

CSMsgTest* CSMsgTest::New() const {
  return new CSMsgTest;
}

void CSMsgTest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 0u;
    if (has_infrsp()) {
      if (infrsp_ != NULL) infrsp_->::cs::TestInfoRsp::Clear();
    }
    if (has_txtrsp()) {
      if (txtrsp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        txtrsp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSMsgTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infRsp;
        break;
      }

      // optional .cs.TestInfoRsp infRsp = 2;
      case 2: {
        if (tag == 18) {
         parse_infRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infrsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_txtRsp;
        break;
      }

      // optional string txtRsp = 3;
      case 3: {
        if (tag == 26) {
         parse_txtRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txtrsp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->txtrsp().data(), this->txtrsp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "txtrsp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSMsgTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSMsgTest)
  return false;
#undef DO_
}

void CSMsgTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSMsgTest)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional .cs.TestInfoRsp infRsp = 2;
  if (has_infrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infrsp(), output);
  }

  // optional string txtRsp = 3;
  if (has_txtrsp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txtrsp().data(), this->txtrsp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "txtrsp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->txtrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSMsgTest)
}

::google::protobuf::uint8* CSMsgTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSMsgTest)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional .cs.TestInfoRsp infRsp = 2;
  if (has_infrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infrsp(), target);
  }

  // optional string txtRsp = 3;
  if (has_txtrsp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txtrsp().data(), this->txtrsp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "txtrsp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->txtrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSMsgTest)
  return target;
}

int CSMsgTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional .cs.TestInfoRsp infRsp = 2;
    if (has_infrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infrsp());
    }

    // optional string txtRsp = 3;
    if (has_txtrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txtrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgTest::MergeFrom(const CSMsgTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_infrsp()) {
      mutable_infrsp()->::cs::TestInfoRsp::MergeFrom(from.infrsp());
    }
    if (from.has_txtrsp()) {
      set_txtrsp(from.txtrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgTest::CopyFrom(const CSMsgTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgTest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_infrsp()) {
    if (!this->infrsp().IsInitialized()) return false;
  }
  return true;
}

void CSMsgTest::Swap(CSMsgTest* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(infrsp_, other->infrsp_);
    std::swap(txtrsp_, other->txtrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgTest_descriptor_;
  metadata.reflection = CSMsgTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRegNotify::kDummyFieldNumber;
#endif  // !_MSC_VER

LoginRegNotify::LoginRegNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.LoginRegNotify)
}

void LoginRegNotify::InitAsDefaultInstance() {
}

LoginRegNotify::LoginRegNotify(const LoginRegNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.LoginRegNotify)
}

void LoginRegNotify::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRegNotify::~LoginRegNotify() {
  // @@protoc_insertion_point(destructor:cs.LoginRegNotify)
  SharedDtor();
}

void LoginRegNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRegNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRegNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRegNotify_descriptor_;
}

const LoginRegNotify& LoginRegNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

LoginRegNotify* LoginRegNotify::default_instance_ = NULL;

LoginRegNotify* LoginRegNotify::New() const {
  return new LoginRegNotify;
}

void LoginRegNotify::Clear() {
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRegNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.LoginRegNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.LoginRegNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.LoginRegNotify)
  return false;
#undef DO_
}

void LoginRegNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.LoginRegNotify)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.LoginRegNotify)
}

::google::protobuf::uint8* LoginRegNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.LoginRegNotify)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.LoginRegNotify)
  return target;
}

int LoginRegNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRegNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRegNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRegNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRegNotify::MergeFrom(const LoginRegNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRegNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRegNotify::CopyFrom(const LoginRegNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRegNotify::IsInitialized() const {

  return true;
}

void LoginRegNotify::Swap(LoginRegNotify* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRegNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRegNotify_descriptor_;
  metadata.reflection = LoginRegNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRegisterReq::kDummyFieldNumber;
#endif  // !_MSC_VER

LoginRegisterReq::LoginRegisterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.LoginRegisterReq)
}

void LoginRegisterReq::InitAsDefaultInstance() {
}

LoginRegisterReq::LoginRegisterReq(const LoginRegisterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.LoginRegisterReq)
}

void LoginRegisterReq::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRegisterReq::~LoginRegisterReq() {
  // @@protoc_insertion_point(destructor:cs.LoginRegisterReq)
  SharedDtor();
}

void LoginRegisterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRegisterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRegisterReq_descriptor_;
}

const LoginRegisterReq& LoginRegisterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

LoginRegisterReq* LoginRegisterReq::default_instance_ = NULL;

LoginRegisterReq* LoginRegisterReq::New() const {
  return new LoginRegisterReq;
}

void LoginRegisterReq::Clear() {
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.LoginRegisterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.LoginRegisterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.LoginRegisterReq)
  return false;
#undef DO_
}

void LoginRegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.LoginRegisterReq)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.LoginRegisterReq)
}

::google::protobuf::uint8* LoginRegisterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.LoginRegisterReq)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.LoginRegisterReq)
  return target;
}

int LoginRegisterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRegisterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRegisterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRegisterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRegisterReq::MergeFrom(const LoginRegisterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRegisterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRegisterReq::CopyFrom(const LoginRegisterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRegisterReq::IsInitialized() const {

  return true;
}

void LoginRegisterReq::Swap(LoginRegisterReq* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRegisterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRegisterReq_descriptor_;
  metadata.reflection = LoginRegisterReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSMsgLogin_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgLogin_CmdCode_descriptor_;
}
bool CSMsgLogin_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSMsgLogin_CmdCode CSMsgLogin::CSMSG_LOGIN_REG_NOTIFY;
const CSMsgLogin_CmdCode CSMsgLogin::CSMSG_LOGIN_REG_REQ;
const CSMsgLogin_CmdCode CSMsgLogin::CmdCode_MIN;
const CSMsgLogin_CmdCode CSMsgLogin::CmdCode_MAX;
const int CSMsgLogin::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSMsgLogin::kCmdFieldNumber;
const int CSMsgLogin::kNotifyReqFieldNumber;
const int CSMsgLogin::kRegReqFieldNumber;
#endif  // !_MSC_VER

CSMsgLogin::CSMsgLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSMsgLogin)
}

void CSMsgLogin::InitAsDefaultInstance() {
  notifyreq_ = const_cast< ::cs::LoginRegNotify*>(&::cs::LoginRegNotify::default_instance());
  regreq_ = const_cast< ::cs::LoginRegisterReq*>(&::cs::LoginRegisterReq::default_instance());
}

CSMsgLogin::CSMsgLogin(const CSMsgLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSMsgLogin)
}

void CSMsgLogin::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  notifyreq_ = NULL;
  regreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgLogin::~CSMsgLogin() {
  // @@protoc_insertion_point(destructor:cs.CSMsgLogin)
  SharedDtor();
}

void CSMsgLogin::SharedDtor() {
  if (this != default_instance_) {
    delete notifyreq_;
    delete regreq_;
  }
}

void CSMsgLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgLogin_descriptor_;
}

const CSMsgLogin& CSMsgLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSMsgLogin* CSMsgLogin::default_instance_ = NULL;

CSMsgLogin* CSMsgLogin::New() const {
  return new CSMsgLogin;
}

void CSMsgLogin::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 0u;
    if (has_notifyreq()) {
      if (notifyreq_ != NULL) notifyreq_->::cs::LoginRegNotify::Clear();
    }
    if (has_regreq()) {
      if (regreq_ != NULL) regreq_->::cs::LoginRegisterReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSMsgLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notifyReq;
        break;
      }

      // optional .cs.LoginRegNotify notifyReq = 2;
      case 2: {
        if (tag == 18) {
         parse_notifyReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifyreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_regReq;
        break;
      }

      // optional .cs.LoginRegisterReq regReq = 3;
      case 3: {
        if (tag == 26) {
         parse_regReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSMsgLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSMsgLogin)
  return false;
#undef DO_
}

void CSMsgLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSMsgLogin)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional .cs.LoginRegNotify notifyReq = 2;
  if (has_notifyreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notifyreq(), output);
  }

  // optional .cs.LoginRegisterReq regReq = 3;
  if (has_regreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->regreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSMsgLogin)
}

::google::protobuf::uint8* CSMsgLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSMsgLogin)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional .cs.LoginRegNotify notifyReq = 2;
  if (has_notifyreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->notifyreq(), target);
  }

  // optional .cs.LoginRegisterReq regReq = 3;
  if (has_regreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->regreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSMsgLogin)
  return target;
}

int CSMsgLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional .cs.LoginRegNotify notifyReq = 2;
    if (has_notifyreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notifyreq());
    }

    // optional .cs.LoginRegisterReq regReq = 3;
    if (has_regreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgLogin::MergeFrom(const CSMsgLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_notifyreq()) {
      mutable_notifyreq()->::cs::LoginRegNotify::MergeFrom(from.notifyreq());
    }
    if (from.has_regreq()) {
      mutable_regreq()->::cs::LoginRegisterReq::MergeFrom(from.regreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgLogin::CopyFrom(const CSMsgLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSMsgLogin::Swap(CSMsgLogin* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(notifyreq_, other->notifyreq_);
    std::swap(regreq_, other->regreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgLogin_descriptor_;
  metadata.reflection = CSMsgLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAccountBase::kUidFieldNumber;
const int CSAccountBase::kNameFieldNumber;
const int CSAccountBase::kLevelFieldNumber;
#endif  // !_MSC_VER

CSAccountBase::CSAccountBase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSAccountBase)
}

void CSAccountBase::InitAsDefaultInstance() {
}

CSAccountBase::CSAccountBase(const CSAccountBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSAccountBase)
}

void CSAccountBase::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAccountBase::~CSAccountBase() {
  // @@protoc_insertion_point(destructor:cs.CSAccountBase)
  SharedDtor();
}

void CSAccountBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSAccountBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAccountBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAccountBase_descriptor_;
}

const CSAccountBase& CSAccountBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSAccountBase* CSAccountBase::default_instance_ = NULL;

CSAccountBase* CSAccountBase::New() const {
  return new CSAccountBase;
}

void CSAccountBase::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAccountBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSAccountBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSAccountBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSAccountBase)
  return false;
#undef DO_
}

void CSAccountBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSAccountBase)
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSAccountBase)
}

::google::protobuf::uint8* CSAccountBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSAccountBase)
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSAccountBase)
  return target;
}

int CSAccountBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAccountBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAccountBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAccountBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAccountBase::MergeFrom(const CSAccountBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAccountBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAccountBase::CopyFrom(const CSAccountBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAccountBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSAccountBase::Swap(CSAccountBase* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAccountBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAccountBase_descriptor_;
  metadata.reflection = CSAccountBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAccountExt::kDummyFieldNumber;
#endif  // !_MSC_VER

CSAccountExt::CSAccountExt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSAccountExt)
}

void CSAccountExt::InitAsDefaultInstance() {
}

CSAccountExt::CSAccountExt(const CSAccountExt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSAccountExt)
}

void CSAccountExt::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAccountExt::~CSAccountExt() {
  // @@protoc_insertion_point(destructor:cs.CSAccountExt)
  SharedDtor();
}

void CSAccountExt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAccountExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAccountExt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAccountExt_descriptor_;
}

const CSAccountExt& CSAccountExt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSAccountExt* CSAccountExt::default_instance_ = NULL;

CSAccountExt* CSAccountExt::New() const {
  return new CSAccountExt;
}

void CSAccountExt::Clear() {
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAccountExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSAccountExt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSAccountExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSAccountExt)
  return false;
#undef DO_
}

void CSAccountExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSAccountExt)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSAccountExt)
}

::google::protobuf::uint8* CSAccountExt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSAccountExt)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSAccountExt)
  return target;
}

int CSAccountExt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAccountExt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAccountExt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAccountExt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAccountExt::MergeFrom(const CSAccountExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAccountExt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAccountExt::CopyFrom(const CSAccountExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAccountExt::IsInitialized() const {

  return true;
}

void CSAccountExt::Swap(CSAccountExt* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAccountExt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAccountExt_descriptor_;
  metadata.reflection = CSAccountExt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAccountMisc::kDummyFieldNumber;
#endif  // !_MSC_VER

CSAccountMisc::CSAccountMisc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSAccountMisc)
}

void CSAccountMisc::InitAsDefaultInstance() {
}

CSAccountMisc::CSAccountMisc(const CSAccountMisc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSAccountMisc)
}

void CSAccountMisc::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAccountMisc::~CSAccountMisc() {
  // @@protoc_insertion_point(destructor:cs.CSAccountMisc)
  SharedDtor();
}

void CSAccountMisc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAccountMisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAccountMisc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAccountMisc_descriptor_;
}

const CSAccountMisc& CSAccountMisc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSAccountMisc* CSAccountMisc::default_instance_ = NULL;

CSAccountMisc* CSAccountMisc::New() const {
  return new CSAccountMisc;
}

void CSAccountMisc::Clear() {
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAccountMisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSAccountMisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSAccountMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSAccountMisc)
  return false;
#undef DO_
}

void CSAccountMisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSAccountMisc)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSAccountMisc)
}

::google::protobuf::uint8* CSAccountMisc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSAccountMisc)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSAccountMisc)
  return target;
}

int CSAccountMisc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAccountMisc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAccountMisc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAccountMisc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAccountMisc::MergeFrom(const CSAccountMisc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAccountMisc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAccountMisc::CopyFrom(const CSAccountMisc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAccountMisc::IsInitialized() const {

  return true;
}

void CSAccountMisc::Swap(CSAccountMisc* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAccountMisc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAccountMisc_descriptor_;
  metadata.reflection = CSAccountMisc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAccount::kBaseFieldNumber;
const int CSAccount::kExtFieldNumber;
const int CSAccount::kMiscFieldNumber;
#endif  // !_MSC_VER

CSAccount::CSAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSAccount)
}

void CSAccount::InitAsDefaultInstance() {
  base_ = const_cast< ::cs::CSAccountBase*>(&::cs::CSAccountBase::default_instance());
  ext_ = const_cast< ::cs::CSAccountExt*>(&::cs::CSAccountExt::default_instance());
  misc_ = const_cast< ::cs::CSAccountMisc*>(&::cs::CSAccountMisc::default_instance());
}

CSAccount::CSAccount(const CSAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSAccount)
}

void CSAccount::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ext_ = NULL;
  misc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAccount::~CSAccount() {
  // @@protoc_insertion_point(destructor:cs.CSAccount)
  SharedDtor();
}

void CSAccount::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete ext_;
    delete misc_;
  }
}

void CSAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAccount_descriptor_;
}

const CSAccount& CSAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSAccount* CSAccount::default_instance_ = NULL;

CSAccount* CSAccount::New() const {
  return new CSAccount;
}

void CSAccount::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_base()) {
      if (base_ != NULL) base_->::cs::CSAccountBase::Clear();
    }
    if (has_ext()) {
      if (ext_ != NULL) ext_->::cs::CSAccountExt::Clear();
    }
    if (has_misc()) {
      if (misc_ != NULL) misc_->::cs::CSAccountMisc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cs.CSAccountBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ext;
        break;
      }

      // required .cs.CSAccountExt ext = 2;
      case 2: {
        if (tag == 18) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_misc;
        break;
      }

      // required .cs.CSAccountMisc misc = 3;
      case 3: {
        if (tag == 26) {
         parse_misc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSAccount)
  return false;
#undef DO_
}

void CSAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSAccount)
  // required .cs.CSAccountBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // required .cs.CSAccountExt ext = 2;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ext(), output);
  }

  // required .cs.CSAccountMisc misc = 3;
  if (has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->misc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSAccount)
}

::google::protobuf::uint8* CSAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSAccount)
  // required .cs.CSAccountBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // required .cs.CSAccountExt ext = 2;
  if (has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ext(), target);
  }

  // required .cs.CSAccountMisc misc = 3;
  if (has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->misc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSAccount)
  return target;
}

int CSAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cs.CSAccountBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required .cs.CSAccountExt ext = 2;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext());
    }

    // required .cs.CSAccountMisc misc = 3;
    if (has_misc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->misc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAccount::MergeFrom(const CSAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::cs::CSAccountBase::MergeFrom(from.base());
    }
    if (from.has_ext()) {
      mutable_ext()->::cs::CSAccountExt::MergeFrom(from.ext());
    }
    if (from.has_misc()) {
      mutable_misc()->::cs::CSAccountMisc::MergeFrom(from.misc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAccount::CopyFrom(const CSAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void CSAccount::Swap(CSAccount* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ext_, other->ext_);
    std::swap(misc_, other->misc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAccount_descriptor_;
  metadata.reflection = CSAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSMsgAccount_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgAccount_CmdCode_descriptor_;
}
bool CSMsgAccount_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSMsgAccount_CmdCode CSMsgAccount::CSMSG_ACCOUNT_ALL_INFO_REQ;
const CSMsgAccount_CmdCode CSMsgAccount::CSMSG_ACCOUNT_BASE_INFO_REQ;
const CSMsgAccount_CmdCode CSMsgAccount::CSMSG_ACCOUNT_EXT_INFO_REQ;
const CSMsgAccount_CmdCode CSMsgAccount::CSMSG_ACCOUNT_MISC_INFO_REQ;
const CSMsgAccount_CmdCode CSMsgAccount::CSMSG_ACCOUNT_ALL_INFO_RSP;
const CSMsgAccount_CmdCode CSMsgAccount::CSMSG_ACCOUNT_BASE_INFO_RSP;
const CSMsgAccount_CmdCode CSMsgAccount::CSMSG_ACCOUNT_EXT_INFO_RSP;
const CSMsgAccount_CmdCode CSMsgAccount::CSMSG_ACCOUNT_MISC_INFO_RSP;
const CSMsgAccount_CmdCode CSMsgAccount::CmdCode_MIN;
const CSMsgAccount_CmdCode CSMsgAccount::CmdCode_MAX;
const int CSMsgAccount::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSMsgAccount::kCmdFieldNumber;
const int CSMsgAccount::kAllInfoRspFieldNumber;
const int CSMsgAccount::kBaseInfoRspFieldNumber;
const int CSMsgAccount::kExtInfoRspFieldNumber;
const int CSMsgAccount::kMiscInfoRspFieldNumber;
#endif  // !_MSC_VER

CSMsgAccount::CSMsgAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSMsgAccount)
}

void CSMsgAccount::InitAsDefaultInstance() {
  allinforsp_ = const_cast< ::cs::CSAccount*>(&::cs::CSAccount::default_instance());
  baseinforsp_ = const_cast< ::cs::CSAccountBase*>(&::cs::CSAccountBase::default_instance());
  extinforsp_ = const_cast< ::cs::CSAccountExt*>(&::cs::CSAccountExt::default_instance());
  miscinforsp_ = const_cast< ::cs::CSAccountMisc*>(&::cs::CSAccountMisc::default_instance());
}

CSMsgAccount::CSMsgAccount(const CSMsgAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSMsgAccount)
}

void CSMsgAccount::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  allinforsp_ = NULL;
  baseinforsp_ = NULL;
  extinforsp_ = NULL;
  miscinforsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgAccount::~CSMsgAccount() {
  // @@protoc_insertion_point(destructor:cs.CSMsgAccount)
  SharedDtor();
}

void CSMsgAccount::SharedDtor() {
  if (this != default_instance_) {
    delete allinforsp_;
    delete baseinforsp_;
    delete extinforsp_;
    delete miscinforsp_;
  }
}

void CSMsgAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgAccount_descriptor_;
}

const CSMsgAccount& CSMsgAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSMsgAccount* CSMsgAccount::default_instance_ = NULL;

CSMsgAccount* CSMsgAccount::New() const {
  return new CSMsgAccount;
}

void CSMsgAccount::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 0u;
    if (has_allinforsp()) {
      if (allinforsp_ != NULL) allinforsp_->::cs::CSAccount::Clear();
    }
    if (has_baseinforsp()) {
      if (baseinforsp_ != NULL) baseinforsp_->::cs::CSAccountBase::Clear();
    }
    if (has_extinforsp()) {
      if (extinforsp_ != NULL) extinforsp_->::cs::CSAccountExt::Clear();
    }
    if (has_miscinforsp()) {
      if (miscinforsp_ != NULL) miscinforsp_->::cs::CSAccountMisc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSMsgAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_allInfoRsp;
        break;
      }

      // optional .cs.CSAccount allInfoRsp = 2;
      case 2: {
        if (tag == 18) {
         parse_allInfoRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allinforsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseInfoRsp;
        break;
      }

      // optional .cs.CSAccountBase baseInfoRsp = 3;
      case 3: {
        if (tag == 26) {
         parse_baseInfoRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinforsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_extInfoRsp;
        break;
      }

      // optional .cs.CSAccountExt extInfoRsp = 4;
      case 4: {
        if (tag == 34) {
         parse_extInfoRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extinforsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_miscInfoRsp;
        break;
      }

      // optional .cs.CSAccountMisc miscInfoRsp = 5;
      case 5: {
        if (tag == 42) {
         parse_miscInfoRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_miscinforsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSMsgAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSMsgAccount)
  return false;
#undef DO_
}

void CSMsgAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSMsgAccount)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional .cs.CSAccount allInfoRsp = 2;
  if (has_allinforsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allinforsp(), output);
  }

  // optional .cs.CSAccountBase baseInfoRsp = 3;
  if (has_baseinforsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baseinforsp(), output);
  }

  // optional .cs.CSAccountExt extInfoRsp = 4;
  if (has_extinforsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extinforsp(), output);
  }

  // optional .cs.CSAccountMisc miscInfoRsp = 5;
  if (has_miscinforsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->miscinforsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSMsgAccount)
}

::google::protobuf::uint8* CSMsgAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSMsgAccount)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional .cs.CSAccount allInfoRsp = 2;
  if (has_allinforsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allinforsp(), target);
  }

  // optional .cs.CSAccountBase baseInfoRsp = 3;
  if (has_baseinforsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baseinforsp(), target);
  }

  // optional .cs.CSAccountExt extInfoRsp = 4;
  if (has_extinforsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extinforsp(), target);
  }

  // optional .cs.CSAccountMisc miscInfoRsp = 5;
  if (has_miscinforsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->miscinforsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSMsgAccount)
  return target;
}

int CSMsgAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional .cs.CSAccount allInfoRsp = 2;
    if (has_allinforsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allinforsp());
    }

    // optional .cs.CSAccountBase baseInfoRsp = 3;
    if (has_baseinforsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinforsp());
    }

    // optional .cs.CSAccountExt extInfoRsp = 4;
    if (has_extinforsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extinforsp());
    }

    // optional .cs.CSAccountMisc miscInfoRsp = 5;
    if (has_miscinforsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->miscinforsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgAccount::MergeFrom(const CSMsgAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_allinforsp()) {
      mutable_allinforsp()->::cs::CSAccount::MergeFrom(from.allinforsp());
    }
    if (from.has_baseinforsp()) {
      mutable_baseinforsp()->::cs::CSAccountBase::MergeFrom(from.baseinforsp());
    }
    if (from.has_extinforsp()) {
      mutable_extinforsp()->::cs::CSAccountExt::MergeFrom(from.extinforsp());
    }
    if (from.has_miscinforsp()) {
      mutable_miscinforsp()->::cs::CSAccountMisc::MergeFrom(from.miscinforsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgAccount::CopyFrom(const CSMsgAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_allinforsp()) {
    if (!this->allinforsp().IsInitialized()) return false;
  }
  if (has_baseinforsp()) {
    if (!this->baseinforsp().IsInitialized()) return false;
  }
  return true;
}

void CSMsgAccount::Swap(CSMsgAccount* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(allinforsp_, other->allinforsp_);
    std::swap(baseinforsp_, other->baseinforsp_);
    std::swap(extinforsp_, other->extinforsp_);
    std::swap(miscinforsp_, other->miscinforsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgAccount_descriptor_;
  metadata.reflection = CSMsgAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSMsgTask_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgTask_CmdCode_descriptor_;
}
bool CSMsgTask_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSMsgTask_CmdCode CSMsgTask::CSMSG_TASK_UPD_REQ;
const CSMsgTask_CmdCode CSMsgTask::CmdCode_MIN;
const CSMsgTask_CmdCode CSMsgTask::CmdCode_MAX;
const int CSMsgTask::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSMsgTask::kCmdFieldNumber;
#endif  // !_MSC_VER

CSMsgTask::CSMsgTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSMsgTask)
}

void CSMsgTask::InitAsDefaultInstance() {
}

CSMsgTask::CSMsgTask(const CSMsgTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSMsgTask)
}

void CSMsgTask::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgTask::~CSMsgTask() {
  // @@protoc_insertion_point(destructor:cs.CSMsgTask)
  SharedDtor();
}

void CSMsgTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgTask_descriptor_;
}

const CSMsgTask& CSMsgTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSMsgTask* CSMsgTask::default_instance_ = NULL;

CSMsgTask* CSMsgTask::New() const {
  return new CSMsgTask;
}

void CSMsgTask::Clear() {
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSMsgTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSMsgTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSMsgTask)
  return false;
#undef DO_
}

void CSMsgTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSMsgTask)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSMsgTask)
}

::google::protobuf::uint8* CSMsgTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSMsgTask)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSMsgTask)
  return target;
}

int CSMsgTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgTask::MergeFrom(const CSMsgTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgTask::CopyFrom(const CSMsgTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSMsgTask::Swap(CSMsgTask* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgTask_descriptor_;
  metadata.reflection = CSMsgTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSRank_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRank_CmdCode_descriptor_;
}
bool CSRank_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSRank_CmdCode CSRank::CSMSG_RANK_UPD_REQ;
const CSRank_CmdCode CSRank::CmdCode_MIN;
const CSRank_CmdCode CSRank::CmdCode_MAX;
const int CSRank::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSRank::kCmdFieldNumber;
#endif  // !_MSC_VER

CSRank::CSRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSRank)
}

void CSRank::InitAsDefaultInstance() {
}

CSRank::CSRank(const CSRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSRank)
}

void CSRank::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRank::~CSRank() {
  // @@protoc_insertion_point(destructor:cs.CSRank)
  SharedDtor();
}

void CSRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRank_descriptor_;
}

const CSRank& CSRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSRank* CSRank::default_instance_ = NULL;

CSRank* CSRank::New() const {
  return new CSRank;
}

void CSRank::Clear() {
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSRank)
  return false;
#undef DO_
}

void CSRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSRank)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSRank)
}

::google::protobuf::uint8* CSRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSRank)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSRank)
  return target;
}

int CSRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRank::MergeFrom(const CSRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRank::CopyFrom(const CSRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRank::Swap(CSRank* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRank_descriptor_;
  metadata.reflection = CSRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSFriend_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFriend_CmdCode_descriptor_;
}
bool CSFriend_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSFriend_CmdCode CSFriend::CSMSG_FRIEND_UPD_REQ;
const CSFriend_CmdCode CSFriend::CmdCode_MIN;
const CSFriend_CmdCode CSFriend::CmdCode_MAX;
const int CSFriend::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSFriend::kCmdFieldNumber;
#endif  // !_MSC_VER

CSFriend::CSFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSFriend)
}

void CSFriend::InitAsDefaultInstance() {
}

CSFriend::CSFriend(const CSFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSFriend)
}

void CSFriend::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriend::~CSFriend() {
  // @@protoc_insertion_point(destructor:cs.CSFriend)
  SharedDtor();
}

void CSFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFriend_descriptor_;
}

const CSFriend& CSFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSFriend* CSFriend::default_instance_ = NULL;

CSFriend* CSFriend::New() const {
  return new CSFriend;
}

void CSFriend::Clear() {
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSFriend)
  return false;
#undef DO_
}

void CSFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSFriend)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSFriend)
}

::google::protobuf::uint8* CSFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSFriend)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSFriend)
  return target;
}

int CSFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFriend::MergeFrom(const CSFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFriend::CopyFrom(const CSFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSFriend::Swap(CSFriend* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFriend_descriptor_;
  metadata.reflection = CSFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSFamily_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFamily_CmdCode_descriptor_;
}
bool CSFamily_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSFamily_CmdCode CSFamily::CSMSG_FAMILY_UPD_REQ;
const CSFamily_CmdCode CSFamily::CmdCode_MIN;
const CSFamily_CmdCode CSFamily::CmdCode_MAX;
const int CSFamily::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSFamily::kCmdFieldNumber;
#endif  // !_MSC_VER

CSFamily::CSFamily()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSFamily)
}

void CSFamily::InitAsDefaultInstance() {
}

CSFamily::CSFamily(const CSFamily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSFamily)
}

void CSFamily::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFamily::~CSFamily() {
  // @@protoc_insertion_point(destructor:cs.CSFamily)
  SharedDtor();
}

void CSFamily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFamily_descriptor_;
}

const CSFamily& CSFamily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSFamily* CSFamily::default_instance_ = NULL;

CSFamily* CSFamily::New() const {
  return new CSFamily;
}

void CSFamily::Clear() {
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSFamily)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSFamily)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSFamily)
  return false;
#undef DO_
}

void CSFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSFamily)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSFamily)
}

::google::protobuf::uint8* CSFamily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSFamily)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSFamily)
  return target;
}

int CSFamily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFamily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFamily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFamily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFamily::MergeFrom(const CSFamily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFamily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFamily::CopyFrom(const CSFamily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFamily::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSFamily::Swap(CSFamily* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFamily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFamily_descriptor_;
  metadata.reflection = CSFamily_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSKnapsack_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSKnapsack_CmdCode_descriptor_;
}
bool CSKnapsack_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSKnapsack_CmdCode CSKnapsack::CSMSG_KNAPSACK_UPD_REQ;
const CSKnapsack_CmdCode CSKnapsack::CmdCode_MIN;
const CSKnapsack_CmdCode CSKnapsack::CmdCode_MAX;
const int CSKnapsack::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSKnapsack::kCmdFieldNumber;
#endif  // !_MSC_VER

CSKnapsack::CSKnapsack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSKnapsack)
}

void CSKnapsack::InitAsDefaultInstance() {
}

CSKnapsack::CSKnapsack(const CSKnapsack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSKnapsack)
}

void CSKnapsack::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSKnapsack::~CSKnapsack() {
  // @@protoc_insertion_point(destructor:cs.CSKnapsack)
  SharedDtor();
}

void CSKnapsack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSKnapsack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSKnapsack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSKnapsack_descriptor_;
}

const CSKnapsack& CSKnapsack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSKnapsack* CSKnapsack::default_instance_ = NULL;

CSKnapsack* CSKnapsack::New() const {
  return new CSKnapsack;
}

void CSKnapsack::Clear() {
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSKnapsack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSKnapsack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSKnapsack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSKnapsack)
  return false;
#undef DO_
}

void CSKnapsack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSKnapsack)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSKnapsack)
}

::google::protobuf::uint8* CSKnapsack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSKnapsack)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSKnapsack)
  return target;
}

int CSKnapsack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSKnapsack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSKnapsack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSKnapsack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSKnapsack::MergeFrom(const CSKnapsack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSKnapsack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSKnapsack::CopyFrom(const CSKnapsack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSKnapsack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSKnapsack::Swap(CSKnapsack* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSKnapsack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSKnapsack_descriptor_;
  metadata.reflection = CSKnapsack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSStage_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSStage_CmdCode_descriptor_;
}
bool CSStage_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSStage_CmdCode CSStage::CSMSG_STAGE_UPD_REQ;
const CSStage_CmdCode CSStage::CmdCode_MIN;
const CSStage_CmdCode CSStage::CmdCode_MAX;
const int CSStage::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSStage::kCmdFieldNumber;
#endif  // !_MSC_VER

CSStage::CSStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSStage)
}

void CSStage::InitAsDefaultInstance() {
}

CSStage::CSStage(const CSStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSStage)
}

void CSStage::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStage::~CSStage() {
  // @@protoc_insertion_point(destructor:cs.CSStage)
  SharedDtor();
}

void CSStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSStage_descriptor_;
}

const CSStage& CSStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSStage* CSStage::default_instance_ = NULL;

CSStage* CSStage::New() const {
  return new CSStage;
}

void CSStage::Clear() {
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSStage)
  return false;
#undef DO_
}

void CSStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSStage)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSStage)
}

::google::protobuf::uint8* CSStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSStage)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSStage)
  return target;
}

int CSStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSStage::MergeFrom(const CSStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSStage::CopyFrom(const CSStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSStage::Swap(CSStage* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSStage_descriptor_;
  metadata.reflection = CSStage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSActivity_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSActivity_CmdCode_descriptor_;
}
bool CSActivity_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSActivity_CmdCode CSActivity::CSMSG_ACTIVITY_UPD_REQ;
const CSActivity_CmdCode CSActivity::CmdCode_MIN;
const CSActivity_CmdCode CSActivity::CmdCode_MAX;
const int CSActivity::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSActivity::kCmdFieldNumber;
#endif  // !_MSC_VER

CSActivity::CSActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSActivity)
}

void CSActivity::InitAsDefaultInstance() {
}

CSActivity::CSActivity(const CSActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSActivity)
}

void CSActivity::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSActivity::~CSActivity() {
  // @@protoc_insertion_point(destructor:cs.CSActivity)
  SharedDtor();
}

void CSActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSActivity_descriptor_;
}

const CSActivity& CSActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSActivity* CSActivity::default_instance_ = NULL;

CSActivity* CSActivity::New() const {
  return new CSActivity;
}

void CSActivity::Clear() {
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSActivity)
  return false;
#undef DO_
}

void CSActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSActivity)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSActivity)
}

::google::protobuf::uint8* CSActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSActivity)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSActivity)
  return target;
}

int CSActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSActivity::MergeFrom(const CSActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSActivity::CopyFrom(const CSActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSActivity::Swap(CSActivity* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSActivity_descriptor_;
  metadata.reflection = CSActivity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSBattle_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattle_CmdCode_descriptor_;
}
bool CSBattle_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSBattle_CmdCode CSBattle::CSMSG_BATTLE_UPD_REQ;
const CSBattle_CmdCode CSBattle::CmdCode_MIN;
const CSBattle_CmdCode CSBattle::CmdCode_MAX;
const int CSBattle::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSBattle::kCmdFieldNumber;
#endif  // !_MSC_VER

CSBattle::CSBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSBattle)
}

void CSBattle::InitAsDefaultInstance() {
}

CSBattle::CSBattle(const CSBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSBattle)
}

void CSBattle::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattle::~CSBattle() {
  // @@protoc_insertion_point(destructor:cs.CSBattle)
  SharedDtor();
}

void CSBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattle_descriptor_;
}

const CSBattle& CSBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSBattle* CSBattle::default_instance_ = NULL;

CSBattle* CSBattle::New() const {
  return new CSBattle;
}

void CSBattle::Clear() {
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSBattle)
  return false;
#undef DO_
}

void CSBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSBattle)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSBattle)
}

::google::protobuf::uint8* CSBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSBattle)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSBattle)
  return target;
}

int CSBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattle::MergeFrom(const CSBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattle::CopyFrom(const CSBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBattle::Swap(CSBattle* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattle_descriptor_;
  metadata.reflection = CSBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSMsg_CSMsgCmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsg_CSMsgCmdCode_descriptor_;
}
bool CSMsg_CSMsgCmdCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSMsg_CSMsgCmdCode CSMsg::CSMSG_CMD_TEST;
const CSMsg_CSMsgCmdCode CSMsg::CSMsgCmdCode_MIN;
const CSMsg_CSMsgCmdCode CSMsg::CSMsgCmdCode_MAX;
const int CSMsg::CSMsgCmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSMsg::kCmdFieldNumber;
const int CSMsg::kErrFieldNumber;
const int CSMsg::kLoginFieldNumber;
const int CSMsg::kTestFieldNumber;
const int CSMsg::kAccountFieldNumber;
const int CSMsg::kTaskFieldNumber;
const int CSMsg::kRankFieldNumber;
const int CSMsg::kFriendFieldNumber;
const int CSMsg::kFamilyFieldNumber;
const int CSMsg::kKnapsackFieldNumber;
const int CSMsg::kStageFieldNumber;
const int CSMsg::kActivityFieldNumber;
const int CSMsg::kBattleFieldNumber;
#endif  // !_MSC_VER

CSMsg::CSMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSMsg)
}

void CSMsg::InitAsDefaultInstance() {
  login_ = const_cast< ::cs::CSMsgLogin*>(&::cs::CSMsgLogin::default_instance());
  test_ = const_cast< ::cs::CSMsgTest*>(&::cs::CSMsgTest::default_instance());
  account_ = const_cast< ::cs::CSMsgAccount*>(&::cs::CSMsgAccount::default_instance());
  task_ = const_cast< ::cs::CSMsgTask*>(&::cs::CSMsgTask::default_instance());
  rank_ = const_cast< ::cs::CSRank*>(&::cs::CSRank::default_instance());
  friend__ = const_cast< ::cs::CSFriend*>(&::cs::CSFriend::default_instance());
  family_ = const_cast< ::cs::CSFamily*>(&::cs::CSFamily::default_instance());
  knapsack_ = const_cast< ::cs::CSKnapsack*>(&::cs::CSKnapsack::default_instance());
  stage_ = const_cast< ::cs::CSStage*>(&::cs::CSStage::default_instance());
  activity_ = const_cast< ::cs::CSActivity*>(&::cs::CSActivity::default_instance());
  battle_ = const_cast< ::cs::CSBattle*>(&::cs::CSBattle::default_instance());
}

CSMsg::CSMsg(const CSMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSMsg)
}

void CSMsg::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  err_ = 0u;
  login_ = NULL;
  test_ = NULL;
  account_ = NULL;
  task_ = NULL;
  rank_ = NULL;
  friend__ = NULL;
  family_ = NULL;
  knapsack_ = NULL;
  stage_ = NULL;
  activity_ = NULL;
  battle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsg::~CSMsg() {
  // @@protoc_insertion_point(destructor:cs.CSMsg)
  SharedDtor();
}

void CSMsg::SharedDtor() {
  if (this != default_instance_) {
    delete login_;
    delete test_;
    delete account_;
    delete task_;
    delete rank_;
    delete friend__;
    delete family_;
    delete knapsack_;
    delete stage_;
    delete activity_;
    delete battle_;
  }
}

void CSMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsg_descriptor_;
}

const CSMsg& CSMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsg_2eproto();
  return *default_instance_;
}

CSMsg* CSMsg::default_instance_ = NULL;

CSMsg* CSMsg::New() const {
  return new CSMsg;
}

void CSMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cmd_, err_);
    if (has_login()) {
      if (login_ != NULL) login_->::cs::CSMsgLogin::Clear();
    }
    if (has_test()) {
      if (test_ != NULL) test_->::cs::CSMsgTest::Clear();
    }
    if (has_account()) {
      if (account_ != NULL) account_->::cs::CSMsgAccount::Clear();
    }
    if (has_task()) {
      if (task_ != NULL) task_->::cs::CSMsgTask::Clear();
    }
    if (has_rank()) {
      if (rank_ != NULL) rank_->::cs::CSRank::Clear();
    }
    if (has_friend_()) {
      if (friend__ != NULL) friend__->::cs::CSFriend::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_family()) {
      if (family_ != NULL) family_->::cs::CSFamily::Clear();
    }
    if (has_knapsack()) {
      if (knapsack_ != NULL) knapsack_->::cs::CSKnapsack::Clear();
    }
    if (has_stage()) {
      if (stage_ != NULL) stage_->::cs::CSStage::Clear();
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::cs::CSActivity::Clear();
    }
    if (has_battle()) {
      if (battle_ != NULL) battle_->::cs::CSBattle::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_err;
        break;
      }

      // optional uint32 err = 2;
      case 2: {
        if (tag == 16) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_login;
        break;
      }

      // optional .cs.CSMsgLogin login = 101;
      case 101: {
        if (tag == 810) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_test;
        break;
      }

      // optional .cs.CSMsgTest test = 102;
      case 102: {
        if (tag == 818) {
         parse_test:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_account;
        break;
      }

      // optional .cs.CSMsgAccount account = 103;
      case 103: {
        if (tag == 826) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_task;
        break;
      }

      // optional .cs.CSMsgTask task = 104;
      case 104: {
        if (tag == 834) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_rank;
        break;
      }

      // optional .cs.CSRank rank = 105;
      case 105: {
        if (tag == 842) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_friend;
        break;
      }

      // optional .cs.CSFriend friend = 106;
      case 106: {
        if (tag == 850) {
         parse_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_family;
        break;
      }

      // optional .cs.CSFamily family = 107;
      case 107: {
        if (tag == 858) {
         parse_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_family()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_knapsack;
        break;
      }

      // optional .cs.CSKnapsack knapsack = 108;
      case 108: {
        if (tag == 866) {
         parse_knapsack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_knapsack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_stage;
        break;
      }

      // optional .cs.CSStage stage = 109;
      case 109: {
        if (tag == 874) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_activity;
        break;
      }

      // optional .cs.CSActivity activity = 110;
      case 110: {
        if (tag == 882) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_battle;
        break;
      }

      // optional .cs.CSBattle battle = 111;
      case 111: {
        if (tag == 890) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSMsg)
  return false;
#undef DO_
}

void CSMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSMsg)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional uint32 err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->err(), output);
  }

  // optional .cs.CSMsgLogin login = 101;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->login(), output);
  }

  // optional .cs.CSMsgTest test = 102;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->test(), output);
  }

  // optional .cs.CSMsgAccount account = 103;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->account(), output);
  }

  // optional .cs.CSMsgTask task = 104;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->task(), output);
  }

  // optional .cs.CSRank rank = 105;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->rank(), output);
  }

  // optional .cs.CSFriend friend = 106;
  if (has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->friend_(), output);
  }

  // optional .cs.CSFamily family = 107;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->family(), output);
  }

  // optional .cs.CSKnapsack knapsack = 108;
  if (has_knapsack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->knapsack(), output);
  }

  // optional .cs.CSStage stage = 109;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->stage(), output);
  }

  // optional .cs.CSActivity activity = 110;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->activity(), output);
  }

  // optional .cs.CSBattle battle = 111;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->battle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSMsg)
}

::google::protobuf::uint8* CSMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSMsg)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional uint32 err = 2;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->err(), target);
  }

  // optional .cs.CSMsgLogin login = 101;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->login(), target);
  }

  // optional .cs.CSMsgTest test = 102;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->test(), target);
  }

  // optional .cs.CSMsgAccount account = 103;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->account(), target);
  }

  // optional .cs.CSMsgTask task = 104;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->task(), target);
  }

  // optional .cs.CSRank rank = 105;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->rank(), target);
  }

  // optional .cs.CSFriend friend = 106;
  if (has_friend_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->friend_(), target);
  }

  // optional .cs.CSFamily family = 107;
  if (has_family()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->family(), target);
  }

  // optional .cs.CSKnapsack knapsack = 108;
  if (has_knapsack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->knapsack(), target);
  }

  // optional .cs.CSStage stage = 109;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->stage(), target);
  }

  // optional .cs.CSActivity activity = 110;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->activity(), target);
  }

  // optional .cs.CSBattle battle = 111;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->battle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSMsg)
  return target;
}

int CSMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

    // optional .cs.CSMsgLogin login = 101;
    if (has_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .cs.CSMsgTest test = 102;
    if (has_test()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test());
    }

    // optional .cs.CSMsgAccount account = 103;
    if (has_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional .cs.CSMsgTask task = 104;
    if (has_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

    // optional .cs.CSRank rank = 105;
    if (has_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

    // optional .cs.CSFriend friend = 106;
    if (has_friend_()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cs.CSFamily family = 107;
    if (has_family()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->family());
    }

    // optional .cs.CSKnapsack knapsack = 108;
    if (has_knapsack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knapsack());
    }

    // optional .cs.CSStage stage = 109;
    if (has_stage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage());
    }

    // optional .cs.CSActivity activity = 110;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

    // optional .cs.CSBattle battle = 111;
    if (has_battle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsg::MergeFrom(const CSMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_login()) {
      mutable_login()->::cs::CSMsgLogin::MergeFrom(from.login());
    }
    if (from.has_test()) {
      mutable_test()->::cs::CSMsgTest::MergeFrom(from.test());
    }
    if (from.has_account()) {
      mutable_account()->::cs::CSMsgAccount::MergeFrom(from.account());
    }
    if (from.has_task()) {
      mutable_task()->::cs::CSMsgTask::MergeFrom(from.task());
    }
    if (from.has_rank()) {
      mutable_rank()->::cs::CSRank::MergeFrom(from.rank());
    }
    if (from.has_friend_()) {
      mutable_friend_()->::cs::CSFriend::MergeFrom(from.friend_());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_family()) {
      mutable_family()->::cs::CSFamily::MergeFrom(from.family());
    }
    if (from.has_knapsack()) {
      mutable_knapsack()->::cs::CSKnapsack::MergeFrom(from.knapsack());
    }
    if (from.has_stage()) {
      mutable_stage()->::cs::CSStage::MergeFrom(from.stage());
    }
    if (from.has_activity()) {
      mutable_activity()->::cs::CSActivity::MergeFrom(from.activity());
    }
    if (from.has_battle()) {
      mutable_battle()->::cs::CSBattle::MergeFrom(from.battle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsg::CopyFrom(const CSMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_test()) {
    if (!this->test().IsInitialized()) return false;
  }
  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  if (has_rank()) {
    if (!this->rank().IsInitialized()) return false;
  }
  if (has_friend_()) {
    if (!this->friend_().IsInitialized()) return false;
  }
  if (has_family()) {
    if (!this->family().IsInitialized()) return false;
  }
  if (has_knapsack()) {
    if (!this->knapsack().IsInitialized()) return false;
  }
  if (has_stage()) {
    if (!this->stage().IsInitialized()) return false;
  }
  if (has_activity()) {
    if (!this->activity().IsInitialized()) return false;
  }
  if (has_battle()) {
    if (!this->battle().IsInitialized()) return false;
  }
  return true;
}

void CSMsg::Swap(CSMsg* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(err_, other->err_);
    std::swap(login_, other->login_);
    std::swap(test_, other->test_);
    std::swap(account_, other->account_);
    std::swap(task_, other->task_);
    std::swap(rank_, other->rank_);
    std::swap(friend__, other->friend__);
    std::swap(family_, other->family_);
    std::swap(knapsack_, other->knapsack_);
    std::swap(stage_, other->stage_);
    std::swap(activity_, other->activity_);
    std::swap(battle_, other->battle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsg_descriptor_;
  metadata.reflection = CSMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)
