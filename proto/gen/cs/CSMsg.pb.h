// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs/CSMsg.proto

#ifndef PROTOBUF_cs_2fCSMsg_2eproto__INCLUDED
#define PROTOBUF_cs_2fCSMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

class TestInfoRsp;
class CSMsgTest;
class LoginRegNotify;
class LoginRegisterReq;
class CSMsgLogin;
class CSAccountBase;
class CSAccountExt;
class CSAccountMisc;
class CSAccount;
class CSMsgAccount;
class CSMsgTask;
class CSRank;
class CSFriend;
class CSFamily;
class CSKnapsack;
class CSStage;
class CSActivity;
class CSBattle;
class CSMsg;

enum CSMsgTest_CmdCode {
  CSMsgTest_CmdCode_CSMSG_TEST_INFO_REQ = 1,
  CSMsgTest_CmdCode_CSMSG_TEST_INFO_RSP = 2
};
bool CSMsgTest_CmdCode_IsValid(int value);
const CSMsgTest_CmdCode CSMsgTest_CmdCode_CmdCode_MIN = CSMsgTest_CmdCode_CSMSG_TEST_INFO_REQ;
const CSMsgTest_CmdCode CSMsgTest_CmdCode_CmdCode_MAX = CSMsgTest_CmdCode_CSMSG_TEST_INFO_RSP;
const int CSMsgTest_CmdCode_CmdCode_ARRAYSIZE = CSMsgTest_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSMsgTest_CmdCode_descriptor();
inline const ::std::string& CSMsgTest_CmdCode_Name(CSMsgTest_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSMsgTest_CmdCode_descriptor(), value);
}
inline bool CSMsgTest_CmdCode_Parse(
    const ::std::string& name, CSMsgTest_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSMsgTest_CmdCode>(
    CSMsgTest_CmdCode_descriptor(), name, value);
}
enum CSMsgLogin_CmdCode {
  CSMsgLogin_CmdCode_CSMSG_LOGIN_REG_NOTIFY = 1,
  CSMsgLogin_CmdCode_CSMSG_LOGIN_REG_REQ = 2
};
bool CSMsgLogin_CmdCode_IsValid(int value);
const CSMsgLogin_CmdCode CSMsgLogin_CmdCode_CmdCode_MIN = CSMsgLogin_CmdCode_CSMSG_LOGIN_REG_NOTIFY;
const CSMsgLogin_CmdCode CSMsgLogin_CmdCode_CmdCode_MAX = CSMsgLogin_CmdCode_CSMSG_LOGIN_REG_REQ;
const int CSMsgLogin_CmdCode_CmdCode_ARRAYSIZE = CSMsgLogin_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSMsgLogin_CmdCode_descriptor();
inline const ::std::string& CSMsgLogin_CmdCode_Name(CSMsgLogin_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSMsgLogin_CmdCode_descriptor(), value);
}
inline bool CSMsgLogin_CmdCode_Parse(
    const ::std::string& name, CSMsgLogin_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSMsgLogin_CmdCode>(
    CSMsgLogin_CmdCode_descriptor(), name, value);
}
enum CSMsgAccount_CmdCode {
  CSMsgAccount_CmdCode_CSMSG_ACCOUNT_ALL_INFO_REQ = 1,
  CSMsgAccount_CmdCode_CSMSG_ACCOUNT_BASE_INFO_REQ = 2,
  CSMsgAccount_CmdCode_CSMSG_ACCOUNT_EXT_INFO_REQ = 3,
  CSMsgAccount_CmdCode_CSMSG_ACCOUNT_MISC_INFO_REQ = 4,
  CSMsgAccount_CmdCode_CSMSG_ACCOUNT_ALL_INFO_RSP = 5,
  CSMsgAccount_CmdCode_CSMSG_ACCOUNT_BASE_INFO_RSP = 6,
  CSMsgAccount_CmdCode_CSMSG_ACCOUNT_EXT_INFO_RSP = 7,
  CSMsgAccount_CmdCode_CSMSG_ACCOUNT_MISC_INFO_RSP = 8
};
bool CSMsgAccount_CmdCode_IsValid(int value);
const CSMsgAccount_CmdCode CSMsgAccount_CmdCode_CmdCode_MIN = CSMsgAccount_CmdCode_CSMSG_ACCOUNT_ALL_INFO_REQ;
const CSMsgAccount_CmdCode CSMsgAccount_CmdCode_CmdCode_MAX = CSMsgAccount_CmdCode_CSMSG_ACCOUNT_MISC_INFO_RSP;
const int CSMsgAccount_CmdCode_CmdCode_ARRAYSIZE = CSMsgAccount_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSMsgAccount_CmdCode_descriptor();
inline const ::std::string& CSMsgAccount_CmdCode_Name(CSMsgAccount_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSMsgAccount_CmdCode_descriptor(), value);
}
inline bool CSMsgAccount_CmdCode_Parse(
    const ::std::string& name, CSMsgAccount_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSMsgAccount_CmdCode>(
    CSMsgAccount_CmdCode_descriptor(), name, value);
}
enum CSMsgTask_CmdCode {
  CSMsgTask_CmdCode_CSMSG_TASK_UPD_REQ = 1
};
bool CSMsgTask_CmdCode_IsValid(int value);
const CSMsgTask_CmdCode CSMsgTask_CmdCode_CmdCode_MIN = CSMsgTask_CmdCode_CSMSG_TASK_UPD_REQ;
const CSMsgTask_CmdCode CSMsgTask_CmdCode_CmdCode_MAX = CSMsgTask_CmdCode_CSMSG_TASK_UPD_REQ;
const int CSMsgTask_CmdCode_CmdCode_ARRAYSIZE = CSMsgTask_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSMsgTask_CmdCode_descriptor();
inline const ::std::string& CSMsgTask_CmdCode_Name(CSMsgTask_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSMsgTask_CmdCode_descriptor(), value);
}
inline bool CSMsgTask_CmdCode_Parse(
    const ::std::string& name, CSMsgTask_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSMsgTask_CmdCode>(
    CSMsgTask_CmdCode_descriptor(), name, value);
}
enum CSRank_CmdCode {
  CSRank_CmdCode_CSMSG_RANK_UPD_REQ = 1
};
bool CSRank_CmdCode_IsValid(int value);
const CSRank_CmdCode CSRank_CmdCode_CmdCode_MIN = CSRank_CmdCode_CSMSG_RANK_UPD_REQ;
const CSRank_CmdCode CSRank_CmdCode_CmdCode_MAX = CSRank_CmdCode_CSMSG_RANK_UPD_REQ;
const int CSRank_CmdCode_CmdCode_ARRAYSIZE = CSRank_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSRank_CmdCode_descriptor();
inline const ::std::string& CSRank_CmdCode_Name(CSRank_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSRank_CmdCode_descriptor(), value);
}
inline bool CSRank_CmdCode_Parse(
    const ::std::string& name, CSRank_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSRank_CmdCode>(
    CSRank_CmdCode_descriptor(), name, value);
}
enum CSFriend_CmdCode {
  CSFriend_CmdCode_CSMSG_FRIEND_UPD_REQ = 1
};
bool CSFriend_CmdCode_IsValid(int value);
const CSFriend_CmdCode CSFriend_CmdCode_CmdCode_MIN = CSFriend_CmdCode_CSMSG_FRIEND_UPD_REQ;
const CSFriend_CmdCode CSFriend_CmdCode_CmdCode_MAX = CSFriend_CmdCode_CSMSG_FRIEND_UPD_REQ;
const int CSFriend_CmdCode_CmdCode_ARRAYSIZE = CSFriend_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSFriend_CmdCode_descriptor();
inline const ::std::string& CSFriend_CmdCode_Name(CSFriend_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSFriend_CmdCode_descriptor(), value);
}
inline bool CSFriend_CmdCode_Parse(
    const ::std::string& name, CSFriend_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSFriend_CmdCode>(
    CSFriend_CmdCode_descriptor(), name, value);
}
enum CSFamily_CmdCode {
  CSFamily_CmdCode_CSMSG_FAMILY_UPD_REQ = 1
};
bool CSFamily_CmdCode_IsValid(int value);
const CSFamily_CmdCode CSFamily_CmdCode_CmdCode_MIN = CSFamily_CmdCode_CSMSG_FAMILY_UPD_REQ;
const CSFamily_CmdCode CSFamily_CmdCode_CmdCode_MAX = CSFamily_CmdCode_CSMSG_FAMILY_UPD_REQ;
const int CSFamily_CmdCode_CmdCode_ARRAYSIZE = CSFamily_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSFamily_CmdCode_descriptor();
inline const ::std::string& CSFamily_CmdCode_Name(CSFamily_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSFamily_CmdCode_descriptor(), value);
}
inline bool CSFamily_CmdCode_Parse(
    const ::std::string& name, CSFamily_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSFamily_CmdCode>(
    CSFamily_CmdCode_descriptor(), name, value);
}
enum CSKnapsack_CmdCode {
  CSKnapsack_CmdCode_CSMSG_KNAPSACK_UPD_REQ = 1
};
bool CSKnapsack_CmdCode_IsValid(int value);
const CSKnapsack_CmdCode CSKnapsack_CmdCode_CmdCode_MIN = CSKnapsack_CmdCode_CSMSG_KNAPSACK_UPD_REQ;
const CSKnapsack_CmdCode CSKnapsack_CmdCode_CmdCode_MAX = CSKnapsack_CmdCode_CSMSG_KNAPSACK_UPD_REQ;
const int CSKnapsack_CmdCode_CmdCode_ARRAYSIZE = CSKnapsack_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSKnapsack_CmdCode_descriptor();
inline const ::std::string& CSKnapsack_CmdCode_Name(CSKnapsack_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSKnapsack_CmdCode_descriptor(), value);
}
inline bool CSKnapsack_CmdCode_Parse(
    const ::std::string& name, CSKnapsack_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSKnapsack_CmdCode>(
    CSKnapsack_CmdCode_descriptor(), name, value);
}
enum CSStage_CmdCode {
  CSStage_CmdCode_CSMSG_STAGE_UPD_REQ = 1
};
bool CSStage_CmdCode_IsValid(int value);
const CSStage_CmdCode CSStage_CmdCode_CmdCode_MIN = CSStage_CmdCode_CSMSG_STAGE_UPD_REQ;
const CSStage_CmdCode CSStage_CmdCode_CmdCode_MAX = CSStage_CmdCode_CSMSG_STAGE_UPD_REQ;
const int CSStage_CmdCode_CmdCode_ARRAYSIZE = CSStage_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSStage_CmdCode_descriptor();
inline const ::std::string& CSStage_CmdCode_Name(CSStage_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSStage_CmdCode_descriptor(), value);
}
inline bool CSStage_CmdCode_Parse(
    const ::std::string& name, CSStage_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSStage_CmdCode>(
    CSStage_CmdCode_descriptor(), name, value);
}
enum CSActivity_CmdCode {
  CSActivity_CmdCode_CSMSG_ACTIVITY_UPD_REQ = 1
};
bool CSActivity_CmdCode_IsValid(int value);
const CSActivity_CmdCode CSActivity_CmdCode_CmdCode_MIN = CSActivity_CmdCode_CSMSG_ACTIVITY_UPD_REQ;
const CSActivity_CmdCode CSActivity_CmdCode_CmdCode_MAX = CSActivity_CmdCode_CSMSG_ACTIVITY_UPD_REQ;
const int CSActivity_CmdCode_CmdCode_ARRAYSIZE = CSActivity_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSActivity_CmdCode_descriptor();
inline const ::std::string& CSActivity_CmdCode_Name(CSActivity_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSActivity_CmdCode_descriptor(), value);
}
inline bool CSActivity_CmdCode_Parse(
    const ::std::string& name, CSActivity_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSActivity_CmdCode>(
    CSActivity_CmdCode_descriptor(), name, value);
}
enum CSBattle_CmdCode {
  CSBattle_CmdCode_CSMSG_BATTLE_UPD_REQ = 1
};
bool CSBattle_CmdCode_IsValid(int value);
const CSBattle_CmdCode CSBattle_CmdCode_CmdCode_MIN = CSBattle_CmdCode_CSMSG_BATTLE_UPD_REQ;
const CSBattle_CmdCode CSBattle_CmdCode_CmdCode_MAX = CSBattle_CmdCode_CSMSG_BATTLE_UPD_REQ;
const int CSBattle_CmdCode_CmdCode_ARRAYSIZE = CSBattle_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSBattle_CmdCode_descriptor();
inline const ::std::string& CSBattle_CmdCode_Name(CSBattle_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSBattle_CmdCode_descriptor(), value);
}
inline bool CSBattle_CmdCode_Parse(
    const ::std::string& name, CSBattle_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSBattle_CmdCode>(
    CSBattle_CmdCode_descriptor(), name, value);
}
enum CSMsg_CSMsgCmdCode {
  CSMsg_CSMsgCmdCode_CSMSG_CMD_TEST = 1
};
bool CSMsg_CSMsgCmdCode_IsValid(int value);
const CSMsg_CSMsgCmdCode CSMsg_CSMsgCmdCode_CSMsgCmdCode_MIN = CSMsg_CSMsgCmdCode_CSMSG_CMD_TEST;
const CSMsg_CSMsgCmdCode CSMsg_CSMsgCmdCode_CSMsgCmdCode_MAX = CSMsg_CSMsgCmdCode_CSMSG_CMD_TEST;
const int CSMsg_CSMsgCmdCode_CSMsgCmdCode_ARRAYSIZE = CSMsg_CSMsgCmdCode_CSMsgCmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSMsg_CSMsgCmdCode_descriptor();
inline const ::std::string& CSMsg_CSMsgCmdCode_Name(CSMsg_CSMsgCmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSMsg_CSMsgCmdCode_descriptor(), value);
}
inline bool CSMsg_CSMsgCmdCode_Parse(
    const ::std::string& name, CSMsg_CSMsgCmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSMsg_CSMsgCmdCode>(
    CSMsg_CSMsgCmdCode_descriptor(), name, value);
}
// ===================================================================

class TestInfoRsp : public ::google::protobuf::Message {
 public:
  TestInfoRsp();
  virtual ~TestInfoRsp();

  TestInfoRsp(const TestInfoRsp& from);

  inline TestInfoRsp& operator=(const TestInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestInfoRsp& default_instance();

  void Swap(TestInfoRsp* other);

  // implements Message ----------------------------------------------

  TestInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestInfoRsp& from);
  void MergeFrom(const TestInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::google::protobuf::uint32 dummy() const;
  inline void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.TestInfoRsp)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dummy_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static TestInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMsgTest : public ::google::protobuf::Message {
 public:
  CSMsgTest();
  virtual ~CSMsgTest();

  CSMsgTest(const CSMsgTest& from);

  inline CSMsgTest& operator=(const CSMsgTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMsgTest& default_instance();

  void Swap(CSMsgTest* other);

  // implements Message ----------------------------------------------

  CSMsgTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMsgTest& from);
  void MergeFrom(const CSMsgTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSMsgTest_CmdCode CmdCode;
  static const CmdCode CSMSG_TEST_INFO_REQ = CSMsgTest_CmdCode_CSMSG_TEST_INFO_REQ;
  static const CmdCode CSMSG_TEST_INFO_RSP = CSMsgTest_CmdCode_CSMSG_TEST_INFO_RSP;
  static inline bool CmdCode_IsValid(int value) {
    return CSMsgTest_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSMsgTest_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSMsgTest_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSMsgTest_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSMsgTest_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSMsgTest_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSMsgTest_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional .cs.TestInfoRsp infRsp = 2;
  inline bool has_infrsp() const;
  inline void clear_infrsp();
  static const int kInfRspFieldNumber = 2;
  inline const ::cs::TestInfoRsp& infrsp() const;
  inline ::cs::TestInfoRsp* mutable_infrsp();
  inline ::cs::TestInfoRsp* release_infrsp();
  inline void set_allocated_infrsp(::cs::TestInfoRsp* infrsp);

  // @@protoc_insertion_point(class_scope:cs.CSMsgTest)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_infrsp();
  inline void clear_has_infrsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cs::TestInfoRsp* infrsp_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSMsgTest* default_instance_;
};
// -------------------------------------------------------------------

class LoginRegNotify : public ::google::protobuf::Message {
 public:
  LoginRegNotify();
  virtual ~LoginRegNotify();

  LoginRegNotify(const LoginRegNotify& from);

  inline LoginRegNotify& operator=(const LoginRegNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRegNotify& default_instance();

  void Swap(LoginRegNotify* other);

  // implements Message ----------------------------------------------

  LoginRegNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRegNotify& from);
  void MergeFrom(const LoginRegNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::google::protobuf::uint32 dummy() const;
  inline void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.LoginRegNotify)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dummy_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static LoginRegNotify* default_instance_;
};
// -------------------------------------------------------------------

class LoginRegisterReq : public ::google::protobuf::Message {
 public:
  LoginRegisterReq();
  virtual ~LoginRegisterReq();

  LoginRegisterReq(const LoginRegisterReq& from);

  inline LoginRegisterReq& operator=(const LoginRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRegisterReq& default_instance();

  void Swap(LoginRegisterReq* other);

  // implements Message ----------------------------------------------

  LoginRegisterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRegisterReq& from);
  void MergeFrom(const LoginRegisterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::google::protobuf::uint32 dummy() const;
  inline void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.LoginRegisterReq)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dummy_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static LoginRegisterReq* default_instance_;
};
// -------------------------------------------------------------------

class CSMsgLogin : public ::google::protobuf::Message {
 public:
  CSMsgLogin();
  virtual ~CSMsgLogin();

  CSMsgLogin(const CSMsgLogin& from);

  inline CSMsgLogin& operator=(const CSMsgLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMsgLogin& default_instance();

  void Swap(CSMsgLogin* other);

  // implements Message ----------------------------------------------

  CSMsgLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMsgLogin& from);
  void MergeFrom(const CSMsgLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSMsgLogin_CmdCode CmdCode;
  static const CmdCode CSMSG_LOGIN_REG_NOTIFY = CSMsgLogin_CmdCode_CSMSG_LOGIN_REG_NOTIFY;
  static const CmdCode CSMSG_LOGIN_REG_REQ = CSMsgLogin_CmdCode_CSMSG_LOGIN_REG_REQ;
  static inline bool CmdCode_IsValid(int value) {
    return CSMsgLogin_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSMsgLogin_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSMsgLogin_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSMsgLogin_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSMsgLogin_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSMsgLogin_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSMsgLogin_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional .cs.LoginRegNotify notifyReq = 2;
  inline bool has_notifyreq() const;
  inline void clear_notifyreq();
  static const int kNotifyReqFieldNumber = 2;
  inline const ::cs::LoginRegNotify& notifyreq() const;
  inline ::cs::LoginRegNotify* mutable_notifyreq();
  inline ::cs::LoginRegNotify* release_notifyreq();
  inline void set_allocated_notifyreq(::cs::LoginRegNotify* notifyreq);

  // optional .cs.LoginRegisterReq regReq = 3;
  inline bool has_regreq() const;
  inline void clear_regreq();
  static const int kRegReqFieldNumber = 3;
  inline const ::cs::LoginRegisterReq& regreq() const;
  inline ::cs::LoginRegisterReq* mutable_regreq();
  inline ::cs::LoginRegisterReq* release_regreq();
  inline void set_allocated_regreq(::cs::LoginRegisterReq* regreq);

  // @@protoc_insertion_point(class_scope:cs.CSMsgLogin)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_notifyreq();
  inline void clear_has_notifyreq();
  inline void set_has_regreq();
  inline void clear_has_regreq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cs::LoginRegNotify* notifyreq_;
  ::cs::LoginRegisterReq* regreq_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSMsgLogin* default_instance_;
};
// -------------------------------------------------------------------

class CSAccountBase : public ::google::protobuf::Message {
 public:
  CSAccountBase();
  virtual ~CSAccountBase();

  CSAccountBase(const CSAccountBase& from);

  inline CSAccountBase& operator=(const CSAccountBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSAccountBase& default_instance();

  void Swap(CSAccountBase* other);

  // implements Message ----------------------------------------------

  CSAccountBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSAccountBase& from);
  void MergeFrom(const CSAccountBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSAccountBase)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSAccountBase* default_instance_;
};
// -------------------------------------------------------------------

class CSAccountExt : public ::google::protobuf::Message {
 public:
  CSAccountExt();
  virtual ~CSAccountExt();

  CSAccountExt(const CSAccountExt& from);

  inline CSAccountExt& operator=(const CSAccountExt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSAccountExt& default_instance();

  void Swap(CSAccountExt* other);

  // implements Message ----------------------------------------------

  CSAccountExt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSAccountExt& from);
  void MergeFrom(const CSAccountExt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::google::protobuf::uint32 dummy() const;
  inline void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSAccountExt)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dummy_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSAccountExt* default_instance_;
};
// -------------------------------------------------------------------

class CSAccountMisc : public ::google::protobuf::Message {
 public:
  CSAccountMisc();
  virtual ~CSAccountMisc();

  CSAccountMisc(const CSAccountMisc& from);

  inline CSAccountMisc& operator=(const CSAccountMisc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSAccountMisc& default_instance();

  void Swap(CSAccountMisc* other);

  // implements Message ----------------------------------------------

  CSAccountMisc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSAccountMisc& from);
  void MergeFrom(const CSAccountMisc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::google::protobuf::uint32 dummy() const;
  inline void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSAccountMisc)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dummy_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSAccountMisc* default_instance_;
};
// -------------------------------------------------------------------

class CSAccount : public ::google::protobuf::Message {
 public:
  CSAccount();
  virtual ~CSAccount();

  CSAccount(const CSAccount& from);

  inline CSAccount& operator=(const CSAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSAccount& default_instance();

  void Swap(CSAccount* other);

  // implements Message ----------------------------------------------

  CSAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSAccount& from);
  void MergeFrom(const CSAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .cs.CSAccountBase base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::cs::CSAccountBase& base() const;
  inline ::cs::CSAccountBase* mutable_base();
  inline ::cs::CSAccountBase* release_base();
  inline void set_allocated_base(::cs::CSAccountBase* base);

  // required .cs.CSAccountExt ext = 2;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 2;
  inline const ::cs::CSAccountExt& ext() const;
  inline ::cs::CSAccountExt* mutable_ext();
  inline ::cs::CSAccountExt* release_ext();
  inline void set_allocated_ext(::cs::CSAccountExt* ext);

  // required .cs.CSAccountMisc misc = 3;
  inline bool has_misc() const;
  inline void clear_misc();
  static const int kMiscFieldNumber = 3;
  inline const ::cs::CSAccountMisc& misc() const;
  inline ::cs::CSAccountMisc* mutable_misc();
  inline ::cs::CSAccountMisc* release_misc();
  inline void set_allocated_misc(::cs::CSAccountMisc* misc);

  // @@protoc_insertion_point(class_scope:cs.CSAccount)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_ext();
  inline void clear_has_ext();
  inline void set_has_misc();
  inline void clear_has_misc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cs::CSAccountBase* base_;
  ::cs::CSAccountExt* ext_;
  ::cs::CSAccountMisc* misc_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSAccount* default_instance_;
};
// -------------------------------------------------------------------

class CSMsgAccount : public ::google::protobuf::Message {
 public:
  CSMsgAccount();
  virtual ~CSMsgAccount();

  CSMsgAccount(const CSMsgAccount& from);

  inline CSMsgAccount& operator=(const CSMsgAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMsgAccount& default_instance();

  void Swap(CSMsgAccount* other);

  // implements Message ----------------------------------------------

  CSMsgAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMsgAccount& from);
  void MergeFrom(const CSMsgAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSMsgAccount_CmdCode CmdCode;
  static const CmdCode CSMSG_ACCOUNT_ALL_INFO_REQ = CSMsgAccount_CmdCode_CSMSG_ACCOUNT_ALL_INFO_REQ;
  static const CmdCode CSMSG_ACCOUNT_BASE_INFO_REQ = CSMsgAccount_CmdCode_CSMSG_ACCOUNT_BASE_INFO_REQ;
  static const CmdCode CSMSG_ACCOUNT_EXT_INFO_REQ = CSMsgAccount_CmdCode_CSMSG_ACCOUNT_EXT_INFO_REQ;
  static const CmdCode CSMSG_ACCOUNT_MISC_INFO_REQ = CSMsgAccount_CmdCode_CSMSG_ACCOUNT_MISC_INFO_REQ;
  static const CmdCode CSMSG_ACCOUNT_ALL_INFO_RSP = CSMsgAccount_CmdCode_CSMSG_ACCOUNT_ALL_INFO_RSP;
  static const CmdCode CSMSG_ACCOUNT_BASE_INFO_RSP = CSMsgAccount_CmdCode_CSMSG_ACCOUNT_BASE_INFO_RSP;
  static const CmdCode CSMSG_ACCOUNT_EXT_INFO_RSP = CSMsgAccount_CmdCode_CSMSG_ACCOUNT_EXT_INFO_RSP;
  static const CmdCode CSMSG_ACCOUNT_MISC_INFO_RSP = CSMsgAccount_CmdCode_CSMSG_ACCOUNT_MISC_INFO_RSP;
  static inline bool CmdCode_IsValid(int value) {
    return CSMsgAccount_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSMsgAccount_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSMsgAccount_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSMsgAccount_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSMsgAccount_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSMsgAccount_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSMsgAccount_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional .cs.CSAccount allInfoRsp = 2;
  inline bool has_allinforsp() const;
  inline void clear_allinforsp();
  static const int kAllInfoRspFieldNumber = 2;
  inline const ::cs::CSAccount& allinforsp() const;
  inline ::cs::CSAccount* mutable_allinforsp();
  inline ::cs::CSAccount* release_allinforsp();
  inline void set_allocated_allinforsp(::cs::CSAccount* allinforsp);

  // optional .cs.CSAccountBase baseInfoRsp = 3;
  inline bool has_baseinforsp() const;
  inline void clear_baseinforsp();
  static const int kBaseInfoRspFieldNumber = 3;
  inline const ::cs::CSAccountBase& baseinforsp() const;
  inline ::cs::CSAccountBase* mutable_baseinforsp();
  inline ::cs::CSAccountBase* release_baseinforsp();
  inline void set_allocated_baseinforsp(::cs::CSAccountBase* baseinforsp);

  // optional .cs.CSAccountExt extInfoRsp = 4;
  inline bool has_extinforsp() const;
  inline void clear_extinforsp();
  static const int kExtInfoRspFieldNumber = 4;
  inline const ::cs::CSAccountExt& extinforsp() const;
  inline ::cs::CSAccountExt* mutable_extinforsp();
  inline ::cs::CSAccountExt* release_extinforsp();
  inline void set_allocated_extinforsp(::cs::CSAccountExt* extinforsp);

  // optional .cs.CSAccountMisc miscInfoRsp = 5;
  inline bool has_miscinforsp() const;
  inline void clear_miscinforsp();
  static const int kMiscInfoRspFieldNumber = 5;
  inline const ::cs::CSAccountMisc& miscinforsp() const;
  inline ::cs::CSAccountMisc* mutable_miscinforsp();
  inline ::cs::CSAccountMisc* release_miscinforsp();
  inline void set_allocated_miscinforsp(::cs::CSAccountMisc* miscinforsp);

  // @@protoc_insertion_point(class_scope:cs.CSMsgAccount)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_allinforsp();
  inline void clear_has_allinforsp();
  inline void set_has_baseinforsp();
  inline void clear_has_baseinforsp();
  inline void set_has_extinforsp();
  inline void clear_has_extinforsp();
  inline void set_has_miscinforsp();
  inline void clear_has_miscinforsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cs::CSAccount* allinforsp_;
  ::cs::CSAccountBase* baseinforsp_;
  ::cs::CSAccountExt* extinforsp_;
  ::cs::CSAccountMisc* miscinforsp_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSMsgAccount* default_instance_;
};
// -------------------------------------------------------------------

class CSMsgTask : public ::google::protobuf::Message {
 public:
  CSMsgTask();
  virtual ~CSMsgTask();

  CSMsgTask(const CSMsgTask& from);

  inline CSMsgTask& operator=(const CSMsgTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMsgTask& default_instance();

  void Swap(CSMsgTask* other);

  // implements Message ----------------------------------------------

  CSMsgTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMsgTask& from);
  void MergeFrom(const CSMsgTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSMsgTask_CmdCode CmdCode;
  static const CmdCode CSMSG_TASK_UPD_REQ = CSMsgTask_CmdCode_CSMSG_TASK_UPD_REQ;
  static inline bool CmdCode_IsValid(int value) {
    return CSMsgTask_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSMsgTask_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSMsgTask_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSMsgTask_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSMsgTask_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSMsgTask_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSMsgTask_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSMsgTask)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSMsgTask* default_instance_;
};
// -------------------------------------------------------------------

class CSRank : public ::google::protobuf::Message {
 public:
  CSRank();
  virtual ~CSRank();

  CSRank(const CSRank& from);

  inline CSRank& operator=(const CSRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSRank& default_instance();

  void Swap(CSRank* other);

  // implements Message ----------------------------------------------

  CSRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSRank& from);
  void MergeFrom(const CSRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSRank_CmdCode CmdCode;
  static const CmdCode CSMSG_RANK_UPD_REQ = CSRank_CmdCode_CSMSG_RANK_UPD_REQ;
  static inline bool CmdCode_IsValid(int value) {
    return CSRank_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSRank_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSRank_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSRank_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSRank_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSRank_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSRank_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSRank)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRank* default_instance_;
};
// -------------------------------------------------------------------

class CSFriend : public ::google::protobuf::Message {
 public:
  CSFriend();
  virtual ~CSFriend();

  CSFriend(const CSFriend& from);

  inline CSFriend& operator=(const CSFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSFriend& default_instance();

  void Swap(CSFriend* other);

  // implements Message ----------------------------------------------

  CSFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSFriend& from);
  void MergeFrom(const CSFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSFriend_CmdCode CmdCode;
  static const CmdCode CSMSG_FRIEND_UPD_REQ = CSFriend_CmdCode_CSMSG_FRIEND_UPD_REQ;
  static inline bool CmdCode_IsValid(int value) {
    return CSFriend_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSFriend_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSFriend_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSFriend_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSFriend_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSFriend_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSFriend_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSFriend)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSFriend* default_instance_;
};
// -------------------------------------------------------------------

class CSFamily : public ::google::protobuf::Message {
 public:
  CSFamily();
  virtual ~CSFamily();

  CSFamily(const CSFamily& from);

  inline CSFamily& operator=(const CSFamily& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSFamily& default_instance();

  void Swap(CSFamily* other);

  // implements Message ----------------------------------------------

  CSFamily* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSFamily& from);
  void MergeFrom(const CSFamily& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSFamily_CmdCode CmdCode;
  static const CmdCode CSMSG_FAMILY_UPD_REQ = CSFamily_CmdCode_CSMSG_FAMILY_UPD_REQ;
  static inline bool CmdCode_IsValid(int value) {
    return CSFamily_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSFamily_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSFamily_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSFamily_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSFamily_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSFamily_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSFamily_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSFamily)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSFamily* default_instance_;
};
// -------------------------------------------------------------------

class CSKnapsack : public ::google::protobuf::Message {
 public:
  CSKnapsack();
  virtual ~CSKnapsack();

  CSKnapsack(const CSKnapsack& from);

  inline CSKnapsack& operator=(const CSKnapsack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSKnapsack& default_instance();

  void Swap(CSKnapsack* other);

  // implements Message ----------------------------------------------

  CSKnapsack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSKnapsack& from);
  void MergeFrom(const CSKnapsack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSKnapsack_CmdCode CmdCode;
  static const CmdCode CSMSG_KNAPSACK_UPD_REQ = CSKnapsack_CmdCode_CSMSG_KNAPSACK_UPD_REQ;
  static inline bool CmdCode_IsValid(int value) {
    return CSKnapsack_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSKnapsack_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSKnapsack_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSKnapsack_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSKnapsack_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSKnapsack_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSKnapsack_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSKnapsack)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSKnapsack* default_instance_;
};
// -------------------------------------------------------------------

class CSStage : public ::google::protobuf::Message {
 public:
  CSStage();
  virtual ~CSStage();

  CSStage(const CSStage& from);

  inline CSStage& operator=(const CSStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSStage& default_instance();

  void Swap(CSStage* other);

  // implements Message ----------------------------------------------

  CSStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSStage& from);
  void MergeFrom(const CSStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSStage_CmdCode CmdCode;
  static const CmdCode CSMSG_STAGE_UPD_REQ = CSStage_CmdCode_CSMSG_STAGE_UPD_REQ;
  static inline bool CmdCode_IsValid(int value) {
    return CSStage_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSStage_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSStage_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSStage_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSStage_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSStage_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSStage_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSStage)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSStage* default_instance_;
};
// -------------------------------------------------------------------

class CSActivity : public ::google::protobuf::Message {
 public:
  CSActivity();
  virtual ~CSActivity();

  CSActivity(const CSActivity& from);

  inline CSActivity& operator=(const CSActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSActivity& default_instance();

  void Swap(CSActivity* other);

  // implements Message ----------------------------------------------

  CSActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSActivity& from);
  void MergeFrom(const CSActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSActivity_CmdCode CmdCode;
  static const CmdCode CSMSG_ACTIVITY_UPD_REQ = CSActivity_CmdCode_CSMSG_ACTIVITY_UPD_REQ;
  static inline bool CmdCode_IsValid(int value) {
    return CSActivity_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSActivity_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSActivity_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSActivity_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSActivity_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSActivity_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSActivity_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSActivity)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSActivity* default_instance_;
};
// -------------------------------------------------------------------

class CSBattle : public ::google::protobuf::Message {
 public:
  CSBattle();
  virtual ~CSBattle();

  CSBattle(const CSBattle& from);

  inline CSBattle& operator=(const CSBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattle& default_instance();

  void Swap(CSBattle* other);

  // implements Message ----------------------------------------------

  CSBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattle& from);
  void MergeFrom(const CSBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSBattle_CmdCode CmdCode;
  static const CmdCode CSMSG_BATTLE_UPD_REQ = CSBattle_CmdCode_CSMSG_BATTLE_UPD_REQ;
  static inline bool CmdCode_IsValid(int value) {
    return CSBattle_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSBattle_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSBattle_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSBattle_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSBattle_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSBattle_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSBattle_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSBattle)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSBattle* default_instance_;
};
// -------------------------------------------------------------------

class CSMsg : public ::google::protobuf::Message {
 public:
  CSMsg();
  virtual ~CSMsg();

  CSMsg(const CSMsg& from);

  inline CSMsg& operator=(const CSMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMsg& default_instance();

  void Swap(CSMsg* other);

  // implements Message ----------------------------------------------

  CSMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMsg& from);
  void MergeFrom(const CSMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSMsg_CSMsgCmdCode CSMsgCmdCode;
  static const CSMsgCmdCode CSMSG_CMD_TEST = CSMsg_CSMsgCmdCode_CSMSG_CMD_TEST;
  static inline bool CSMsgCmdCode_IsValid(int value) {
    return CSMsg_CSMsgCmdCode_IsValid(value);
  }
  static const CSMsgCmdCode CSMsgCmdCode_MIN =
    CSMsg_CSMsgCmdCode_CSMsgCmdCode_MIN;
  static const CSMsgCmdCode CSMsgCmdCode_MAX =
    CSMsg_CSMsgCmdCode_CSMsgCmdCode_MAX;
  static const int CSMsgCmdCode_ARRAYSIZE =
    CSMsg_CSMsgCmdCode_CSMsgCmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CSMsgCmdCode_descriptor() {
    return CSMsg_CSMsgCmdCode_descriptor();
  }
  static inline const ::std::string& CSMsgCmdCode_Name(CSMsgCmdCode value) {
    return CSMsg_CSMsgCmdCode_Name(value);
  }
  static inline bool CSMsgCmdCode_Parse(const ::std::string& name,
      CSMsgCmdCode* value) {
    return CSMsg_CSMsgCmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline ::google::protobuf::uint32 err() const;
  inline void set_err(::google::protobuf::uint32 value);

  // optional .cs.CSMsgLogin login = 101;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 101;
  inline const ::cs::CSMsgLogin& login() const;
  inline ::cs::CSMsgLogin* mutable_login();
  inline ::cs::CSMsgLogin* release_login();
  inline void set_allocated_login(::cs::CSMsgLogin* login);

  // optional .cs.CSMsgTest test = 102;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 102;
  inline const ::cs::CSMsgTest& test() const;
  inline ::cs::CSMsgTest* mutable_test();
  inline ::cs::CSMsgTest* release_test();
  inline void set_allocated_test(::cs::CSMsgTest* test);

  // optional .cs.CSMsgAccount account = 103;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 103;
  inline const ::cs::CSMsgAccount& account() const;
  inline ::cs::CSMsgAccount* mutable_account();
  inline ::cs::CSMsgAccount* release_account();
  inline void set_allocated_account(::cs::CSMsgAccount* account);

  // optional .cs.CSMsgTask task = 104;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 104;
  inline const ::cs::CSMsgTask& task() const;
  inline ::cs::CSMsgTask* mutable_task();
  inline ::cs::CSMsgTask* release_task();
  inline void set_allocated_task(::cs::CSMsgTask* task);

  // optional .cs.CSRank rank = 105;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 105;
  inline const ::cs::CSRank& rank() const;
  inline ::cs::CSRank* mutable_rank();
  inline ::cs::CSRank* release_rank();
  inline void set_allocated_rank(::cs::CSRank* rank);

  // optional .cs.CSFriend friend = 106;
  inline bool has_friend_() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 106;
  inline const ::cs::CSFriend& friend_() const;
  inline ::cs::CSFriend* mutable_friend_();
  inline ::cs::CSFriend* release_friend_();
  inline void set_allocated_friend_(::cs::CSFriend* friend_);

  // optional .cs.CSFamily family = 107;
  inline bool has_family() const;
  inline void clear_family();
  static const int kFamilyFieldNumber = 107;
  inline const ::cs::CSFamily& family() const;
  inline ::cs::CSFamily* mutable_family();
  inline ::cs::CSFamily* release_family();
  inline void set_allocated_family(::cs::CSFamily* family);

  // optional .cs.CSKnapsack knapsack = 108;
  inline bool has_knapsack() const;
  inline void clear_knapsack();
  static const int kKnapsackFieldNumber = 108;
  inline const ::cs::CSKnapsack& knapsack() const;
  inline ::cs::CSKnapsack* mutable_knapsack();
  inline ::cs::CSKnapsack* release_knapsack();
  inline void set_allocated_knapsack(::cs::CSKnapsack* knapsack);

  // optional .cs.CSStage stage = 109;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 109;
  inline const ::cs::CSStage& stage() const;
  inline ::cs::CSStage* mutable_stage();
  inline ::cs::CSStage* release_stage();
  inline void set_allocated_stage(::cs::CSStage* stage);

  // optional .cs.CSActivity activity = 110;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 110;
  inline const ::cs::CSActivity& activity() const;
  inline ::cs::CSActivity* mutable_activity();
  inline ::cs::CSActivity* release_activity();
  inline void set_allocated_activity(::cs::CSActivity* activity);

  // optional .cs.CSBattle battle = 111;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 111;
  inline const ::cs::CSBattle& battle() const;
  inline ::cs::CSBattle* mutable_battle();
  inline ::cs::CSBattle* release_battle();
  inline void set_allocated_battle(::cs::CSBattle* battle);

  // @@protoc_insertion_point(class_scope:cs.CSMsg)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_test();
  inline void clear_has_test();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_friend_();
  inline void clear_has_friend_();
  inline void set_has_family();
  inline void clear_has_family();
  inline void set_has_knapsack();
  inline void clear_has_knapsack();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_battle();
  inline void clear_has_battle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 err_;
  ::cs::CSMsgLogin* login_;
  ::cs::CSMsgTest* test_;
  ::cs::CSMsgAccount* account_;
  ::cs::CSMsgTask* task_;
  ::cs::CSRank* rank_;
  ::cs::CSFriend* friend__;
  ::cs::CSFamily* family_;
  ::cs::CSKnapsack* knapsack_;
  ::cs::CSStage* stage_;
  ::cs::CSActivity* activity_;
  ::cs::CSBattle* battle_;
  friend void  protobuf_AddDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsg_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsg_2eproto();

  void InitAsDefaultInstance();
  static CSMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// TestInfoRsp

// required uint32 dummy = 1;
inline bool TestInfoRsp::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestInfoRsp::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestInfoRsp::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestInfoRsp::clear_dummy() {
  dummy_ = 0u;
  clear_has_dummy();
}
inline ::google::protobuf::uint32 TestInfoRsp::dummy() const {
  // @@protoc_insertion_point(field_get:cs.TestInfoRsp.dummy)
  return dummy_;
}
inline void TestInfoRsp::set_dummy(::google::protobuf::uint32 value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:cs.TestInfoRsp.dummy)
}

// -------------------------------------------------------------------

// CSMsgTest

// required uint32 cmd = 1;
inline bool CSMsgTest::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMsgTest::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMsgTest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMsgTest::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSMsgTest::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgTest.cmd)
  return cmd_;
}
inline void CSMsgTest::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSMsgTest.cmd)
}

// optional .cs.TestInfoRsp infRsp = 2;
inline bool CSMsgTest::has_infrsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMsgTest::set_has_infrsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMsgTest::clear_has_infrsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMsgTest::clear_infrsp() {
  if (infrsp_ != NULL) infrsp_->::cs::TestInfoRsp::Clear();
  clear_has_infrsp();
}
inline const ::cs::TestInfoRsp& CSMsgTest::infrsp() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgTest.infRsp)
  return infrsp_ != NULL ? *infrsp_ : *default_instance_->infrsp_;
}
inline ::cs::TestInfoRsp* CSMsgTest::mutable_infrsp() {
  set_has_infrsp();
  if (infrsp_ == NULL) infrsp_ = new ::cs::TestInfoRsp;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgTest.infRsp)
  return infrsp_;
}
inline ::cs::TestInfoRsp* CSMsgTest::release_infrsp() {
  clear_has_infrsp();
  ::cs::TestInfoRsp* temp = infrsp_;
  infrsp_ = NULL;
  return temp;
}
inline void CSMsgTest::set_allocated_infrsp(::cs::TestInfoRsp* infrsp) {
  delete infrsp_;
  infrsp_ = infrsp;
  if (infrsp) {
    set_has_infrsp();
  } else {
    clear_has_infrsp();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgTest.infRsp)
}

// -------------------------------------------------------------------

// LoginRegNotify

// optional uint32 dummy = 1;
inline bool LoginRegNotify::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRegNotify::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRegNotify::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRegNotify::clear_dummy() {
  dummy_ = 0u;
  clear_has_dummy();
}
inline ::google::protobuf::uint32 LoginRegNotify::dummy() const {
  // @@protoc_insertion_point(field_get:cs.LoginRegNotify.dummy)
  return dummy_;
}
inline void LoginRegNotify::set_dummy(::google::protobuf::uint32 value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:cs.LoginRegNotify.dummy)
}

// -------------------------------------------------------------------

// LoginRegisterReq

// optional uint32 dummy = 1;
inline bool LoginRegisterReq::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRegisterReq::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRegisterReq::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRegisterReq::clear_dummy() {
  dummy_ = 0u;
  clear_has_dummy();
}
inline ::google::protobuf::uint32 LoginRegisterReq::dummy() const {
  // @@protoc_insertion_point(field_get:cs.LoginRegisterReq.dummy)
  return dummy_;
}
inline void LoginRegisterReq::set_dummy(::google::protobuf::uint32 value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:cs.LoginRegisterReq.dummy)
}

// -------------------------------------------------------------------

// CSMsgLogin

// required uint32 cmd = 1;
inline bool CSMsgLogin::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMsgLogin::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMsgLogin::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMsgLogin::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSMsgLogin::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgLogin.cmd)
  return cmd_;
}
inline void CSMsgLogin::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSMsgLogin.cmd)
}

// optional .cs.LoginRegNotify notifyReq = 2;
inline bool CSMsgLogin::has_notifyreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMsgLogin::set_has_notifyreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMsgLogin::clear_has_notifyreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMsgLogin::clear_notifyreq() {
  if (notifyreq_ != NULL) notifyreq_->::cs::LoginRegNotify::Clear();
  clear_has_notifyreq();
}
inline const ::cs::LoginRegNotify& CSMsgLogin::notifyreq() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgLogin.notifyReq)
  return notifyreq_ != NULL ? *notifyreq_ : *default_instance_->notifyreq_;
}
inline ::cs::LoginRegNotify* CSMsgLogin::mutable_notifyreq() {
  set_has_notifyreq();
  if (notifyreq_ == NULL) notifyreq_ = new ::cs::LoginRegNotify;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgLogin.notifyReq)
  return notifyreq_;
}
inline ::cs::LoginRegNotify* CSMsgLogin::release_notifyreq() {
  clear_has_notifyreq();
  ::cs::LoginRegNotify* temp = notifyreq_;
  notifyreq_ = NULL;
  return temp;
}
inline void CSMsgLogin::set_allocated_notifyreq(::cs::LoginRegNotify* notifyreq) {
  delete notifyreq_;
  notifyreq_ = notifyreq;
  if (notifyreq) {
    set_has_notifyreq();
  } else {
    clear_has_notifyreq();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgLogin.notifyReq)
}

// optional .cs.LoginRegisterReq regReq = 3;
inline bool CSMsgLogin::has_regreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMsgLogin::set_has_regreq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMsgLogin::clear_has_regreq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMsgLogin::clear_regreq() {
  if (regreq_ != NULL) regreq_->::cs::LoginRegisterReq::Clear();
  clear_has_regreq();
}
inline const ::cs::LoginRegisterReq& CSMsgLogin::regreq() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgLogin.regReq)
  return regreq_ != NULL ? *regreq_ : *default_instance_->regreq_;
}
inline ::cs::LoginRegisterReq* CSMsgLogin::mutable_regreq() {
  set_has_regreq();
  if (regreq_ == NULL) regreq_ = new ::cs::LoginRegisterReq;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgLogin.regReq)
  return regreq_;
}
inline ::cs::LoginRegisterReq* CSMsgLogin::release_regreq() {
  clear_has_regreq();
  ::cs::LoginRegisterReq* temp = regreq_;
  regreq_ = NULL;
  return temp;
}
inline void CSMsgLogin::set_allocated_regreq(::cs::LoginRegisterReq* regreq) {
  delete regreq_;
  regreq_ = regreq;
  if (regreq) {
    set_has_regreq();
  } else {
    clear_has_regreq();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgLogin.regReq)
}

// -------------------------------------------------------------------

// CSAccountBase

// required uint64 uid = 1;
inline bool CSAccountBase::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSAccountBase::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSAccountBase::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSAccountBase::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 CSAccountBase::uid() const {
  // @@protoc_insertion_point(field_get:cs.CSAccountBase.uid)
  return uid_;
}
inline void CSAccountBase::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:cs.CSAccountBase.uid)
}

// optional string name = 2;
inline bool CSAccountBase::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSAccountBase::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSAccountBase::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSAccountBase::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSAccountBase::name() const {
  // @@protoc_insertion_point(field_get:cs.CSAccountBase.name)
  return *name_;
}
inline void CSAccountBase::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:cs.CSAccountBase.name)
}
inline void CSAccountBase::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:cs.CSAccountBase.name)
}
inline void CSAccountBase::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cs.CSAccountBase.name)
}
inline ::std::string* CSAccountBase::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cs.CSAccountBase.name)
  return name_;
}
inline ::std::string* CSAccountBase::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSAccountBase::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSAccountBase.name)
}

// optional uint32 level = 3;
inline bool CSAccountBase::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSAccountBase::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSAccountBase::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSAccountBase::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CSAccountBase::level() const {
  // @@protoc_insertion_point(field_get:cs.CSAccountBase.level)
  return level_;
}
inline void CSAccountBase::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:cs.CSAccountBase.level)
}

// -------------------------------------------------------------------

// CSAccountExt

// optional uint32 dummy = 1;
inline bool CSAccountExt::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSAccountExt::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSAccountExt::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSAccountExt::clear_dummy() {
  dummy_ = 0u;
  clear_has_dummy();
}
inline ::google::protobuf::uint32 CSAccountExt::dummy() const {
  // @@protoc_insertion_point(field_get:cs.CSAccountExt.dummy)
  return dummy_;
}
inline void CSAccountExt::set_dummy(::google::protobuf::uint32 value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:cs.CSAccountExt.dummy)
}

// -------------------------------------------------------------------

// CSAccountMisc

// optional uint32 dummy = 1;
inline bool CSAccountMisc::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSAccountMisc::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSAccountMisc::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSAccountMisc::clear_dummy() {
  dummy_ = 0u;
  clear_has_dummy();
}
inline ::google::protobuf::uint32 CSAccountMisc::dummy() const {
  // @@protoc_insertion_point(field_get:cs.CSAccountMisc.dummy)
  return dummy_;
}
inline void CSAccountMisc::set_dummy(::google::protobuf::uint32 value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:cs.CSAccountMisc.dummy)
}

// -------------------------------------------------------------------

// CSAccount

// required .cs.CSAccountBase base = 1;
inline bool CSAccount::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSAccount::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSAccount::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSAccount::clear_base() {
  if (base_ != NULL) base_->::cs::CSAccountBase::Clear();
  clear_has_base();
}
inline const ::cs::CSAccountBase& CSAccount::base() const {
  // @@protoc_insertion_point(field_get:cs.CSAccount.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::cs::CSAccountBase* CSAccount::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::cs::CSAccountBase;
  // @@protoc_insertion_point(field_mutable:cs.CSAccount.base)
  return base_;
}
inline ::cs::CSAccountBase* CSAccount::release_base() {
  clear_has_base();
  ::cs::CSAccountBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CSAccount::set_allocated_base(::cs::CSAccountBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSAccount.base)
}

// required .cs.CSAccountExt ext = 2;
inline bool CSAccount::has_ext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSAccount::set_has_ext() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSAccount::clear_has_ext() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSAccount::clear_ext() {
  if (ext_ != NULL) ext_->::cs::CSAccountExt::Clear();
  clear_has_ext();
}
inline const ::cs::CSAccountExt& CSAccount::ext() const {
  // @@protoc_insertion_point(field_get:cs.CSAccount.ext)
  return ext_ != NULL ? *ext_ : *default_instance_->ext_;
}
inline ::cs::CSAccountExt* CSAccount::mutable_ext() {
  set_has_ext();
  if (ext_ == NULL) ext_ = new ::cs::CSAccountExt;
  // @@protoc_insertion_point(field_mutable:cs.CSAccount.ext)
  return ext_;
}
inline ::cs::CSAccountExt* CSAccount::release_ext() {
  clear_has_ext();
  ::cs::CSAccountExt* temp = ext_;
  ext_ = NULL;
  return temp;
}
inline void CSAccount::set_allocated_ext(::cs::CSAccountExt* ext) {
  delete ext_;
  ext_ = ext;
  if (ext) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSAccount.ext)
}

// required .cs.CSAccountMisc misc = 3;
inline bool CSAccount::has_misc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSAccount::set_has_misc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSAccount::clear_has_misc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSAccount::clear_misc() {
  if (misc_ != NULL) misc_->::cs::CSAccountMisc::Clear();
  clear_has_misc();
}
inline const ::cs::CSAccountMisc& CSAccount::misc() const {
  // @@protoc_insertion_point(field_get:cs.CSAccount.misc)
  return misc_ != NULL ? *misc_ : *default_instance_->misc_;
}
inline ::cs::CSAccountMisc* CSAccount::mutable_misc() {
  set_has_misc();
  if (misc_ == NULL) misc_ = new ::cs::CSAccountMisc;
  // @@protoc_insertion_point(field_mutable:cs.CSAccount.misc)
  return misc_;
}
inline ::cs::CSAccountMisc* CSAccount::release_misc() {
  clear_has_misc();
  ::cs::CSAccountMisc* temp = misc_;
  misc_ = NULL;
  return temp;
}
inline void CSAccount::set_allocated_misc(::cs::CSAccountMisc* misc) {
  delete misc_;
  misc_ = misc;
  if (misc) {
    set_has_misc();
  } else {
    clear_has_misc();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSAccount.misc)
}

// -------------------------------------------------------------------

// CSMsgAccount

// required uint32 cmd = 1;
inline bool CSMsgAccount::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMsgAccount::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMsgAccount::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMsgAccount::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSMsgAccount::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgAccount.cmd)
  return cmd_;
}
inline void CSMsgAccount::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSMsgAccount.cmd)
}

// optional .cs.CSAccount allInfoRsp = 2;
inline bool CSMsgAccount::has_allinforsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMsgAccount::set_has_allinforsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMsgAccount::clear_has_allinforsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMsgAccount::clear_allinforsp() {
  if (allinforsp_ != NULL) allinforsp_->::cs::CSAccount::Clear();
  clear_has_allinforsp();
}
inline const ::cs::CSAccount& CSMsgAccount::allinforsp() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgAccount.allInfoRsp)
  return allinforsp_ != NULL ? *allinforsp_ : *default_instance_->allinforsp_;
}
inline ::cs::CSAccount* CSMsgAccount::mutable_allinforsp() {
  set_has_allinforsp();
  if (allinforsp_ == NULL) allinforsp_ = new ::cs::CSAccount;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgAccount.allInfoRsp)
  return allinforsp_;
}
inline ::cs::CSAccount* CSMsgAccount::release_allinforsp() {
  clear_has_allinforsp();
  ::cs::CSAccount* temp = allinforsp_;
  allinforsp_ = NULL;
  return temp;
}
inline void CSMsgAccount::set_allocated_allinforsp(::cs::CSAccount* allinforsp) {
  delete allinforsp_;
  allinforsp_ = allinforsp;
  if (allinforsp) {
    set_has_allinforsp();
  } else {
    clear_has_allinforsp();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgAccount.allInfoRsp)
}

// optional .cs.CSAccountBase baseInfoRsp = 3;
inline bool CSMsgAccount::has_baseinforsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMsgAccount::set_has_baseinforsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMsgAccount::clear_has_baseinforsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMsgAccount::clear_baseinforsp() {
  if (baseinforsp_ != NULL) baseinforsp_->::cs::CSAccountBase::Clear();
  clear_has_baseinforsp();
}
inline const ::cs::CSAccountBase& CSMsgAccount::baseinforsp() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgAccount.baseInfoRsp)
  return baseinforsp_ != NULL ? *baseinforsp_ : *default_instance_->baseinforsp_;
}
inline ::cs::CSAccountBase* CSMsgAccount::mutable_baseinforsp() {
  set_has_baseinforsp();
  if (baseinforsp_ == NULL) baseinforsp_ = new ::cs::CSAccountBase;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgAccount.baseInfoRsp)
  return baseinforsp_;
}
inline ::cs::CSAccountBase* CSMsgAccount::release_baseinforsp() {
  clear_has_baseinforsp();
  ::cs::CSAccountBase* temp = baseinforsp_;
  baseinforsp_ = NULL;
  return temp;
}
inline void CSMsgAccount::set_allocated_baseinforsp(::cs::CSAccountBase* baseinforsp) {
  delete baseinforsp_;
  baseinforsp_ = baseinforsp;
  if (baseinforsp) {
    set_has_baseinforsp();
  } else {
    clear_has_baseinforsp();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgAccount.baseInfoRsp)
}

// optional .cs.CSAccountExt extInfoRsp = 4;
inline bool CSMsgAccount::has_extinforsp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMsgAccount::set_has_extinforsp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMsgAccount::clear_has_extinforsp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMsgAccount::clear_extinforsp() {
  if (extinforsp_ != NULL) extinforsp_->::cs::CSAccountExt::Clear();
  clear_has_extinforsp();
}
inline const ::cs::CSAccountExt& CSMsgAccount::extinforsp() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgAccount.extInfoRsp)
  return extinforsp_ != NULL ? *extinforsp_ : *default_instance_->extinforsp_;
}
inline ::cs::CSAccountExt* CSMsgAccount::mutable_extinforsp() {
  set_has_extinforsp();
  if (extinforsp_ == NULL) extinforsp_ = new ::cs::CSAccountExt;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgAccount.extInfoRsp)
  return extinforsp_;
}
inline ::cs::CSAccountExt* CSMsgAccount::release_extinforsp() {
  clear_has_extinforsp();
  ::cs::CSAccountExt* temp = extinforsp_;
  extinforsp_ = NULL;
  return temp;
}
inline void CSMsgAccount::set_allocated_extinforsp(::cs::CSAccountExt* extinforsp) {
  delete extinforsp_;
  extinforsp_ = extinforsp;
  if (extinforsp) {
    set_has_extinforsp();
  } else {
    clear_has_extinforsp();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgAccount.extInfoRsp)
}

// optional .cs.CSAccountMisc miscInfoRsp = 5;
inline bool CSMsgAccount::has_miscinforsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMsgAccount::set_has_miscinforsp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMsgAccount::clear_has_miscinforsp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMsgAccount::clear_miscinforsp() {
  if (miscinforsp_ != NULL) miscinforsp_->::cs::CSAccountMisc::Clear();
  clear_has_miscinforsp();
}
inline const ::cs::CSAccountMisc& CSMsgAccount::miscinforsp() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgAccount.miscInfoRsp)
  return miscinforsp_ != NULL ? *miscinforsp_ : *default_instance_->miscinforsp_;
}
inline ::cs::CSAccountMisc* CSMsgAccount::mutable_miscinforsp() {
  set_has_miscinforsp();
  if (miscinforsp_ == NULL) miscinforsp_ = new ::cs::CSAccountMisc;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgAccount.miscInfoRsp)
  return miscinforsp_;
}
inline ::cs::CSAccountMisc* CSMsgAccount::release_miscinforsp() {
  clear_has_miscinforsp();
  ::cs::CSAccountMisc* temp = miscinforsp_;
  miscinforsp_ = NULL;
  return temp;
}
inline void CSMsgAccount::set_allocated_miscinforsp(::cs::CSAccountMisc* miscinforsp) {
  delete miscinforsp_;
  miscinforsp_ = miscinforsp;
  if (miscinforsp) {
    set_has_miscinforsp();
  } else {
    clear_has_miscinforsp();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgAccount.miscInfoRsp)
}

// -------------------------------------------------------------------

// CSMsgTask

// required uint32 cmd = 1;
inline bool CSMsgTask::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMsgTask::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMsgTask::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMsgTask::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSMsgTask::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgTask.cmd)
  return cmd_;
}
inline void CSMsgTask::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSMsgTask.cmd)
}

// -------------------------------------------------------------------

// CSRank

// required uint32 cmd = 1;
inline bool CSRank::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRank::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRank::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRank::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSRank::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSRank.cmd)
  return cmd_;
}
inline void CSRank::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSRank.cmd)
}

// -------------------------------------------------------------------

// CSFriend

// required uint32 cmd = 1;
inline bool CSFriend::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriend::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriend::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriend::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSFriend::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSFriend.cmd)
  return cmd_;
}
inline void CSFriend::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSFriend.cmd)
}

// -------------------------------------------------------------------

// CSFamily

// required uint32 cmd = 1;
inline bool CSFamily::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFamily::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFamily::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFamily::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSFamily::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSFamily.cmd)
  return cmd_;
}
inline void CSFamily::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSFamily.cmd)
}

// -------------------------------------------------------------------

// CSKnapsack

// required uint32 cmd = 1;
inline bool CSKnapsack::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSKnapsack::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSKnapsack::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSKnapsack::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSKnapsack::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSKnapsack.cmd)
  return cmd_;
}
inline void CSKnapsack::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSKnapsack.cmd)
}

// -------------------------------------------------------------------

// CSStage

// required uint32 cmd = 1;
inline bool CSStage::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSStage::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSStage::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSStage::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSStage::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSStage.cmd)
  return cmd_;
}
inline void CSStage::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSStage.cmd)
}

// -------------------------------------------------------------------

// CSActivity

// required uint32 cmd = 1;
inline bool CSActivity::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSActivity::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSActivity::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSActivity::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSActivity::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSActivity.cmd)
  return cmd_;
}
inline void CSActivity::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSActivity.cmd)
}

// -------------------------------------------------------------------

// CSBattle

// required uint32 cmd = 1;
inline bool CSBattle::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattle::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattle::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattle::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSBattle::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSBattle.cmd)
  return cmd_;
}
inline void CSBattle::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSBattle.cmd)
}

// -------------------------------------------------------------------

// CSMsg

// required uint32 cmd = 1;
inline bool CSMsg::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMsg::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMsg::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMsg::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSMsg::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.cmd)
  return cmd_;
}
inline void CSMsg::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSMsg.cmd)
}

// optional uint32 err = 2;
inline bool CSMsg::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMsg::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMsg::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMsg::clear_err() {
  err_ = 0u;
  clear_has_err();
}
inline ::google::protobuf::uint32 CSMsg::err() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.err)
  return err_;
}
inline void CSMsg::set_err(::google::protobuf::uint32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:cs.CSMsg.err)
}

// optional .cs.CSMsgLogin login = 101;
inline bool CSMsg::has_login() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMsg::set_has_login() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMsg::clear_has_login() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMsg::clear_login() {
  if (login_ != NULL) login_->::cs::CSMsgLogin::Clear();
  clear_has_login();
}
inline const ::cs::CSMsgLogin& CSMsg::login() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.login)
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::cs::CSMsgLogin* CSMsg::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::cs::CSMsgLogin;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.login)
  return login_;
}
inline ::cs::CSMsgLogin* CSMsg::release_login() {
  clear_has_login();
  ::cs::CSMsgLogin* temp = login_;
  login_ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_login(::cs::CSMsgLogin* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.login)
}

// optional .cs.CSMsgTest test = 102;
inline bool CSMsg::has_test() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMsg::set_has_test() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMsg::clear_has_test() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMsg::clear_test() {
  if (test_ != NULL) test_->::cs::CSMsgTest::Clear();
  clear_has_test();
}
inline const ::cs::CSMsgTest& CSMsg::test() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.test)
  return test_ != NULL ? *test_ : *default_instance_->test_;
}
inline ::cs::CSMsgTest* CSMsg::mutable_test() {
  set_has_test();
  if (test_ == NULL) test_ = new ::cs::CSMsgTest;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.test)
  return test_;
}
inline ::cs::CSMsgTest* CSMsg::release_test() {
  clear_has_test();
  ::cs::CSMsgTest* temp = test_;
  test_ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_test(::cs::CSMsgTest* test) {
  delete test_;
  test_ = test;
  if (test) {
    set_has_test();
  } else {
    clear_has_test();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.test)
}

// optional .cs.CSMsgAccount account = 103;
inline bool CSMsg::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMsg::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMsg::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMsg::clear_account() {
  if (account_ != NULL) account_->::cs::CSMsgAccount::Clear();
  clear_has_account();
}
inline const ::cs::CSMsgAccount& CSMsg::account() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.account)
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
inline ::cs::CSMsgAccount* CSMsg::mutable_account() {
  set_has_account();
  if (account_ == NULL) account_ = new ::cs::CSMsgAccount;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.account)
  return account_;
}
inline ::cs::CSMsgAccount* CSMsg::release_account() {
  clear_has_account();
  ::cs::CSMsgAccount* temp = account_;
  account_ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_account(::cs::CSMsgAccount* account) {
  delete account_;
  account_ = account;
  if (account) {
    set_has_account();
  } else {
    clear_has_account();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.account)
}

// optional .cs.CSMsgTask task = 104;
inline bool CSMsg::has_task() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMsg::set_has_task() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMsg::clear_has_task() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMsg::clear_task() {
  if (task_ != NULL) task_->::cs::CSMsgTask::Clear();
  clear_has_task();
}
inline const ::cs::CSMsgTask& CSMsg::task() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.task)
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::cs::CSMsgTask* CSMsg::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::cs::CSMsgTask;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.task)
  return task_;
}
inline ::cs::CSMsgTask* CSMsg::release_task() {
  clear_has_task();
  ::cs::CSMsgTask* temp = task_;
  task_ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_task(::cs::CSMsgTask* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.task)
}

// optional .cs.CSRank rank = 105;
inline bool CSMsg::has_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSMsg::set_has_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSMsg::clear_has_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSMsg::clear_rank() {
  if (rank_ != NULL) rank_->::cs::CSRank::Clear();
  clear_has_rank();
}
inline const ::cs::CSRank& CSMsg::rank() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.rank)
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::cs::CSRank* CSMsg::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::cs::CSRank;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.rank)
  return rank_;
}
inline ::cs::CSRank* CSMsg::release_rank() {
  clear_has_rank();
  ::cs::CSRank* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_rank(::cs::CSRank* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.rank)
}

// optional .cs.CSFriend friend = 106;
inline bool CSMsg::has_friend_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSMsg::set_has_friend_() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSMsg::clear_has_friend_() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSMsg::clear_friend_() {
  if (friend__ != NULL) friend__->::cs::CSFriend::Clear();
  clear_has_friend_();
}
inline const ::cs::CSFriend& CSMsg::friend_() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.friend)
  return friend__ != NULL ? *friend__ : *default_instance_->friend__;
}
inline ::cs::CSFriend* CSMsg::mutable_friend_() {
  set_has_friend_();
  if (friend__ == NULL) friend__ = new ::cs::CSFriend;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.friend)
  return friend__;
}
inline ::cs::CSFriend* CSMsg::release_friend_() {
  clear_has_friend_();
  ::cs::CSFriend* temp = friend__;
  friend__ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_friend_(::cs::CSFriend* friend_) {
  delete friend__;
  friend__ = friend_;
  if (friend_) {
    set_has_friend_();
  } else {
    clear_has_friend_();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.friend)
}

// optional .cs.CSFamily family = 107;
inline bool CSMsg::has_family() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSMsg::set_has_family() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSMsg::clear_has_family() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSMsg::clear_family() {
  if (family_ != NULL) family_->::cs::CSFamily::Clear();
  clear_has_family();
}
inline const ::cs::CSFamily& CSMsg::family() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.family)
  return family_ != NULL ? *family_ : *default_instance_->family_;
}
inline ::cs::CSFamily* CSMsg::mutable_family() {
  set_has_family();
  if (family_ == NULL) family_ = new ::cs::CSFamily;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.family)
  return family_;
}
inline ::cs::CSFamily* CSMsg::release_family() {
  clear_has_family();
  ::cs::CSFamily* temp = family_;
  family_ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_family(::cs::CSFamily* family) {
  delete family_;
  family_ = family;
  if (family) {
    set_has_family();
  } else {
    clear_has_family();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.family)
}

// optional .cs.CSKnapsack knapsack = 108;
inline bool CSMsg::has_knapsack() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSMsg::set_has_knapsack() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSMsg::clear_has_knapsack() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSMsg::clear_knapsack() {
  if (knapsack_ != NULL) knapsack_->::cs::CSKnapsack::Clear();
  clear_has_knapsack();
}
inline const ::cs::CSKnapsack& CSMsg::knapsack() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.knapsack)
  return knapsack_ != NULL ? *knapsack_ : *default_instance_->knapsack_;
}
inline ::cs::CSKnapsack* CSMsg::mutable_knapsack() {
  set_has_knapsack();
  if (knapsack_ == NULL) knapsack_ = new ::cs::CSKnapsack;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.knapsack)
  return knapsack_;
}
inline ::cs::CSKnapsack* CSMsg::release_knapsack() {
  clear_has_knapsack();
  ::cs::CSKnapsack* temp = knapsack_;
  knapsack_ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_knapsack(::cs::CSKnapsack* knapsack) {
  delete knapsack_;
  knapsack_ = knapsack;
  if (knapsack) {
    set_has_knapsack();
  } else {
    clear_has_knapsack();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.knapsack)
}

// optional .cs.CSStage stage = 109;
inline bool CSMsg::has_stage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSMsg::set_has_stage() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSMsg::clear_has_stage() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSMsg::clear_stage() {
  if (stage_ != NULL) stage_->::cs::CSStage::Clear();
  clear_has_stage();
}
inline const ::cs::CSStage& CSMsg::stage() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.stage)
  return stage_ != NULL ? *stage_ : *default_instance_->stage_;
}
inline ::cs::CSStage* CSMsg::mutable_stage() {
  set_has_stage();
  if (stage_ == NULL) stage_ = new ::cs::CSStage;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.stage)
  return stage_;
}
inline ::cs::CSStage* CSMsg::release_stage() {
  clear_has_stage();
  ::cs::CSStage* temp = stage_;
  stage_ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_stage(::cs::CSStage* stage) {
  delete stage_;
  stage_ = stage;
  if (stage) {
    set_has_stage();
  } else {
    clear_has_stage();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.stage)
}

// optional .cs.CSActivity activity = 110;
inline bool CSMsg::has_activity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSMsg::set_has_activity() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSMsg::clear_has_activity() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSMsg::clear_activity() {
  if (activity_ != NULL) activity_->::cs::CSActivity::Clear();
  clear_has_activity();
}
inline const ::cs::CSActivity& CSMsg::activity() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.activity)
  return activity_ != NULL ? *activity_ : *default_instance_->activity_;
}
inline ::cs::CSActivity* CSMsg::mutable_activity() {
  set_has_activity();
  if (activity_ == NULL) activity_ = new ::cs::CSActivity;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.activity)
  return activity_;
}
inline ::cs::CSActivity* CSMsg::release_activity() {
  clear_has_activity();
  ::cs::CSActivity* temp = activity_;
  activity_ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_activity(::cs::CSActivity* activity) {
  delete activity_;
  activity_ = activity;
  if (activity) {
    set_has_activity();
  } else {
    clear_has_activity();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.activity)
}

// optional .cs.CSBattle battle = 111;
inline bool CSMsg::has_battle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSMsg::set_has_battle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSMsg::clear_has_battle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSMsg::clear_battle() {
  if (battle_ != NULL) battle_->::cs::CSBattle::Clear();
  clear_has_battle();
}
inline const ::cs::CSBattle& CSMsg::battle() const {
  // @@protoc_insertion_point(field_get:cs.CSMsg.battle)
  return battle_ != NULL ? *battle_ : *default_instance_->battle_;
}
inline ::cs::CSBattle* CSMsg::mutable_battle() {
  set_has_battle();
  if (battle_ == NULL) battle_ = new ::cs::CSBattle;
  // @@protoc_insertion_point(field_mutable:cs.CSMsg.battle)
  return battle_;
}
inline ::cs::CSBattle* CSMsg::release_battle() {
  clear_has_battle();
  ::cs::CSBattle* temp = battle_;
  battle_ = NULL;
  return temp;
}
inline void CSMsg::set_allocated_battle(::cs::CSBattle* battle) {
  delete battle_;
  battle_ = battle;
  if (battle) {
    set_has_battle();
  } else {
    clear_has_battle();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsg.battle)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cs::CSMsgTest_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSMsgTest_CmdCode>() {
  return ::cs::CSMsgTest_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSMsgLogin_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSMsgLogin_CmdCode>() {
  return ::cs::CSMsgLogin_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSMsgAccount_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSMsgAccount_CmdCode>() {
  return ::cs::CSMsgAccount_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSMsgTask_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSMsgTask_CmdCode>() {
  return ::cs::CSMsgTask_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSRank_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSRank_CmdCode>() {
  return ::cs::CSRank_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSFriend_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSFriend_CmdCode>() {
  return ::cs::CSFriend_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSFamily_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSFamily_CmdCode>() {
  return ::cs::CSFamily_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSKnapsack_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSKnapsack_CmdCode>() {
  return ::cs::CSKnapsack_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSStage_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSStage_CmdCode>() {
  return ::cs::CSStage_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSActivity_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSActivity_CmdCode>() {
  return ::cs::CSActivity_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSBattle_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSBattle_CmdCode>() {
  return ::cs::CSBattle_CmdCode_descriptor();
}
template <> struct is_proto_enum< ::cs::CSMsg_CSMsgCmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSMsg_CSMsgCmdCode>() {
  return ::cs::CSMsg_CSMsgCmdCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_2fCSMsg_2eproto__INCLUDED
