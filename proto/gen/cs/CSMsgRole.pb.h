// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs/CSMsgRole.proto

#ifndef PROTOBUF_cs_2fCSMsgRole_2eproto__INCLUDED
#define PROTOBUF_cs_2fCSMsgRole_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/RoleBase.pb.h"
// @@protoc_insertion_point(includes)

namespace cs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
void protobuf_AssignDesc_cs_2fCSMsgRole_2eproto();
void protobuf_ShutdownFile_cs_2fCSMsgRole_2eproto();

class CSRoleBase;
class CSRoleExt;
class CSRoleMisc;
class CSRole;
class CSMsgRole;

enum CSMsgRole_CmdCode {
  CSMsgRole_CmdCode_CSMSG_ROLE_ALL_INFO_REQ = 1,
  CSMsgRole_CmdCode_CSMSG_ROLE_BASE_INFO_REQ = 2,
  CSMsgRole_CmdCode_CSMSG_ROLE_EXT_INFO_REQ = 3,
  CSMsgRole_CmdCode_CSMSG_ROLE_MISC_INFO_REQ = 4,
  CSMsgRole_CmdCode_CSMSG_ROLE_ALL_INFO_RSP = 5,
  CSMsgRole_CmdCode_CSMSG_ROLE_BASE_INFO_RSP = 6,
  CSMsgRole_CmdCode_CSMSG_ROLE_EXT_INFO_RSP = 7,
  CSMsgRole_CmdCode_CSMSG_ROLE_MISC_INFO_RSP = 8
};
bool CSMsgRole_CmdCode_IsValid(int value);
const CSMsgRole_CmdCode CSMsgRole_CmdCode_CmdCode_MIN = CSMsgRole_CmdCode_CSMSG_ROLE_ALL_INFO_REQ;
const CSMsgRole_CmdCode CSMsgRole_CmdCode_CmdCode_MAX = CSMsgRole_CmdCode_CSMSG_ROLE_MISC_INFO_RSP;
const int CSMsgRole_CmdCode_CmdCode_ARRAYSIZE = CSMsgRole_CmdCode_CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSMsgRole_CmdCode_descriptor();
inline const ::std::string& CSMsgRole_CmdCode_Name(CSMsgRole_CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSMsgRole_CmdCode_descriptor(), value);
}
inline bool CSMsgRole_CmdCode_Parse(
    const ::std::string& name, CSMsgRole_CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSMsgRole_CmdCode>(
    CSMsgRole_CmdCode_descriptor(), name, value);
}
// ===================================================================

class CSRoleBase : public ::google::protobuf::Message {
 public:
  CSRoleBase();
  virtual ~CSRoleBase();

  CSRoleBase(const CSRoleBase& from);

  inline CSRoleBase& operator=(const CSRoleBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSRoleBase& default_instance();

  void Swap(CSRoleBase* other);

  // implements Message ----------------------------------------------

  CSRoleBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSRoleBase& from);
  void MergeFrom(const CSRoleBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSRoleBase)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsgRole_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsgRole_2eproto();

  void InitAsDefaultInstance();
  static CSRoleBase* default_instance_;
};
// -------------------------------------------------------------------

class CSRoleExt : public ::google::protobuf::Message {
 public:
  CSRoleExt();
  virtual ~CSRoleExt();

  CSRoleExt(const CSRoleExt& from);

  inline CSRoleExt& operator=(const CSRoleExt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSRoleExt& default_instance();

  void Swap(CSRoleExt* other);

  // implements Message ----------------------------------------------

  CSRoleExt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSRoleExt& from);
  void MergeFrom(const CSRoleExt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::google::protobuf::uint32 dummy() const;
  inline void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSRoleExt)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dummy_;
  friend void  protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsgRole_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsgRole_2eproto();

  void InitAsDefaultInstance();
  static CSRoleExt* default_instance_;
};
// -------------------------------------------------------------------

class CSRoleMisc : public ::google::protobuf::Message {
 public:
  CSRoleMisc();
  virtual ~CSRoleMisc();

  CSRoleMisc(const CSRoleMisc& from);

  inline CSRoleMisc& operator=(const CSRoleMisc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSRoleMisc& default_instance();

  void Swap(CSRoleMisc* other);

  // implements Message ----------------------------------------------

  CSRoleMisc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSRoleMisc& from);
  void MergeFrom(const CSRoleMisc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::google::protobuf::uint32 dummy() const;
  inline void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cs.CSRoleMisc)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dummy_;
  friend void  protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsgRole_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsgRole_2eproto();

  void InitAsDefaultInstance();
  static CSRoleMisc* default_instance_;
};
// -------------------------------------------------------------------

class CSRole : public ::google::protobuf::Message {
 public:
  CSRole();
  virtual ~CSRole();

  CSRole(const CSRole& from);

  inline CSRole& operator=(const CSRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSRole& default_instance();

  void Swap(CSRole* other);

  // implements Message ----------------------------------------------

  CSRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSRole& from);
  void MergeFrom(const CSRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .cs.CSRoleBase base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::cs::CSRoleBase& base() const;
  inline ::cs::CSRoleBase* mutable_base();
  inline ::cs::CSRoleBase* release_base();
  inline void set_allocated_base(::cs::CSRoleBase* base);

  // required .cs.CSRoleExt ext = 2;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 2;
  inline const ::cs::CSRoleExt& ext() const;
  inline ::cs::CSRoleExt* mutable_ext();
  inline ::cs::CSRoleExt* release_ext();
  inline void set_allocated_ext(::cs::CSRoleExt* ext);

  // required .cs.CSRoleMisc misc = 3;
  inline bool has_misc() const;
  inline void clear_misc();
  static const int kMiscFieldNumber = 3;
  inline const ::cs::CSRoleMisc& misc() const;
  inline ::cs::CSRoleMisc* mutable_misc();
  inline ::cs::CSRoleMisc* release_misc();
  inline void set_allocated_misc(::cs::CSRoleMisc* misc);

  // @@protoc_insertion_point(class_scope:cs.CSRole)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_ext();
  inline void clear_has_ext();
  inline void set_has_misc();
  inline void clear_has_misc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cs::CSRoleBase* base_;
  ::cs::CSRoleExt* ext_;
  ::cs::CSRoleMisc* misc_;
  friend void  protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsgRole_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsgRole_2eproto();

  void InitAsDefaultInstance();
  static CSRole* default_instance_;
};
// -------------------------------------------------------------------

class CSMsgRole : public ::google::protobuf::Message {
 public:
  CSMsgRole();
  virtual ~CSMsgRole();

  CSMsgRole(const CSMsgRole& from);

  inline CSMsgRole& operator=(const CSMsgRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMsgRole& default_instance();

  void Swap(CSMsgRole* other);

  // implements Message ----------------------------------------------

  CSMsgRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMsgRole& from);
  void MergeFrom(const CSMsgRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSMsgRole_CmdCode CmdCode;
  static const CmdCode CSMSG_ROLE_ALL_INFO_REQ = CSMsgRole_CmdCode_CSMSG_ROLE_ALL_INFO_REQ;
  static const CmdCode CSMSG_ROLE_BASE_INFO_REQ = CSMsgRole_CmdCode_CSMSG_ROLE_BASE_INFO_REQ;
  static const CmdCode CSMSG_ROLE_EXT_INFO_REQ = CSMsgRole_CmdCode_CSMSG_ROLE_EXT_INFO_REQ;
  static const CmdCode CSMSG_ROLE_MISC_INFO_REQ = CSMsgRole_CmdCode_CSMSG_ROLE_MISC_INFO_REQ;
  static const CmdCode CSMSG_ROLE_ALL_INFO_RSP = CSMsgRole_CmdCode_CSMSG_ROLE_ALL_INFO_RSP;
  static const CmdCode CSMSG_ROLE_BASE_INFO_RSP = CSMsgRole_CmdCode_CSMSG_ROLE_BASE_INFO_RSP;
  static const CmdCode CSMSG_ROLE_EXT_INFO_RSP = CSMsgRole_CmdCode_CSMSG_ROLE_EXT_INFO_RSP;
  static const CmdCode CSMSG_ROLE_MISC_INFO_RSP = CSMsgRole_CmdCode_CSMSG_ROLE_MISC_INFO_RSP;
  static inline bool CmdCode_IsValid(int value) {
    return CSMsgRole_CmdCode_IsValid(value);
  }
  static const CmdCode CmdCode_MIN =
    CSMsgRole_CmdCode_CmdCode_MIN;
  static const CmdCode CmdCode_MAX =
    CSMsgRole_CmdCode_CmdCode_MAX;
  static const int CmdCode_ARRAYSIZE =
    CSMsgRole_CmdCode_CmdCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdCode_descriptor() {
    return CSMsgRole_CmdCode_descriptor();
  }
  static inline const ::std::string& CmdCode_Name(CmdCode value) {
    return CSMsgRole_CmdCode_Name(value);
  }
  static inline bool CmdCode_Parse(const ::std::string& name,
      CmdCode* value) {
    return CSMsgRole_CmdCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional .cs.CSRole allInfoRsp = 2;
  inline bool has_allinforsp() const;
  inline void clear_allinforsp();
  static const int kAllInfoRspFieldNumber = 2;
  inline const ::cs::CSRole& allinforsp() const;
  inline ::cs::CSRole* mutable_allinforsp();
  inline ::cs::CSRole* release_allinforsp();
  inline void set_allocated_allinforsp(::cs::CSRole* allinforsp);

  // optional .cs.CSRoleBase baseInfoRsp = 3;
  inline bool has_baseinforsp() const;
  inline void clear_baseinforsp();
  static const int kBaseInfoRspFieldNumber = 3;
  inline const ::cs::CSRoleBase& baseinforsp() const;
  inline ::cs::CSRoleBase* mutable_baseinforsp();
  inline ::cs::CSRoleBase* release_baseinforsp();
  inline void set_allocated_baseinforsp(::cs::CSRoleBase* baseinforsp);

  // optional .cs.CSRoleExt extInfoRsp = 4;
  inline bool has_extinforsp() const;
  inline void clear_extinforsp();
  static const int kExtInfoRspFieldNumber = 4;
  inline const ::cs::CSRoleExt& extinforsp() const;
  inline ::cs::CSRoleExt* mutable_extinforsp();
  inline ::cs::CSRoleExt* release_extinforsp();
  inline void set_allocated_extinforsp(::cs::CSRoleExt* extinforsp);

  // optional .cs.CSRoleMisc miscInfoRsp = 5;
  inline bool has_miscinforsp() const;
  inline void clear_miscinforsp();
  static const int kMiscInfoRspFieldNumber = 5;
  inline const ::cs::CSRoleMisc& miscinforsp() const;
  inline ::cs::CSRoleMisc* mutable_miscinforsp();
  inline ::cs::CSRoleMisc* release_miscinforsp();
  inline void set_allocated_miscinforsp(::cs::CSRoleMisc* miscinforsp);

  // @@protoc_insertion_point(class_scope:cs.CSMsgRole)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_allinforsp();
  inline void clear_has_allinforsp();
  inline void set_has_baseinforsp();
  inline void clear_has_baseinforsp();
  inline void set_has_extinforsp();
  inline void clear_has_extinforsp();
  inline void set_has_miscinforsp();
  inline void clear_has_miscinforsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cs::CSRole* allinforsp_;
  ::cs::CSRoleBase* baseinforsp_;
  ::cs::CSRoleExt* extinforsp_;
  ::cs::CSRoleMisc* miscinforsp_;
  ::google::protobuf::uint32 cmd_;
  friend void  protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  friend void protobuf_AssignDesc_cs_2fCSMsgRole_2eproto();
  friend void protobuf_ShutdownFile_cs_2fCSMsgRole_2eproto();

  void InitAsDefaultInstance();
  static CSMsgRole* default_instance_;
};
// ===================================================================


// ===================================================================

// CSRoleBase

// required uint64 uid = 1;
inline bool CSRoleBase::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRoleBase::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRoleBase::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRoleBase::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 CSRoleBase::uid() const {
  // @@protoc_insertion_point(field_get:cs.CSRoleBase.uid)
  return uid_;
}
inline void CSRoleBase::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:cs.CSRoleBase.uid)
}

// optional string name = 2;
inline bool CSRoleBase::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRoleBase::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRoleBase::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRoleBase::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSRoleBase::name() const {
  // @@protoc_insertion_point(field_get:cs.CSRoleBase.name)
  return *name_;
}
inline void CSRoleBase::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:cs.CSRoleBase.name)
}
inline void CSRoleBase::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:cs.CSRoleBase.name)
}
inline void CSRoleBase::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cs.CSRoleBase.name)
}
inline ::std::string* CSRoleBase::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cs.CSRoleBase.name)
  return name_;
}
inline ::std::string* CSRoleBase::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSRoleBase::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSRoleBase.name)
}

// optional uint32 level = 3;
inline bool CSRoleBase::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSRoleBase::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSRoleBase::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSRoleBase::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CSRoleBase::level() const {
  // @@protoc_insertion_point(field_get:cs.CSRoleBase.level)
  return level_;
}
inline void CSRoleBase::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:cs.CSRoleBase.level)
}

// -------------------------------------------------------------------

// CSRoleExt

// optional uint32 dummy = 1;
inline bool CSRoleExt::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRoleExt::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRoleExt::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRoleExt::clear_dummy() {
  dummy_ = 0u;
  clear_has_dummy();
}
inline ::google::protobuf::uint32 CSRoleExt::dummy() const {
  // @@protoc_insertion_point(field_get:cs.CSRoleExt.dummy)
  return dummy_;
}
inline void CSRoleExt::set_dummy(::google::protobuf::uint32 value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:cs.CSRoleExt.dummy)
}

// -------------------------------------------------------------------

// CSRoleMisc

// optional uint32 dummy = 1;
inline bool CSRoleMisc::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRoleMisc::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRoleMisc::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRoleMisc::clear_dummy() {
  dummy_ = 0u;
  clear_has_dummy();
}
inline ::google::protobuf::uint32 CSRoleMisc::dummy() const {
  // @@protoc_insertion_point(field_get:cs.CSRoleMisc.dummy)
  return dummy_;
}
inline void CSRoleMisc::set_dummy(::google::protobuf::uint32 value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:cs.CSRoleMisc.dummy)
}

// -------------------------------------------------------------------

// CSRole

// required .cs.CSRoleBase base = 1;
inline bool CSRole::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRole::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRole::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRole::clear_base() {
  if (base_ != NULL) base_->::cs::CSRoleBase::Clear();
  clear_has_base();
}
inline const ::cs::CSRoleBase& CSRole::base() const {
  // @@protoc_insertion_point(field_get:cs.CSRole.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::cs::CSRoleBase* CSRole::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::cs::CSRoleBase;
  // @@protoc_insertion_point(field_mutable:cs.CSRole.base)
  return base_;
}
inline ::cs::CSRoleBase* CSRole::release_base() {
  clear_has_base();
  ::cs::CSRoleBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CSRole::set_allocated_base(::cs::CSRoleBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSRole.base)
}

// required .cs.CSRoleExt ext = 2;
inline bool CSRole::has_ext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRole::set_has_ext() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRole::clear_has_ext() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRole::clear_ext() {
  if (ext_ != NULL) ext_->::cs::CSRoleExt::Clear();
  clear_has_ext();
}
inline const ::cs::CSRoleExt& CSRole::ext() const {
  // @@protoc_insertion_point(field_get:cs.CSRole.ext)
  return ext_ != NULL ? *ext_ : *default_instance_->ext_;
}
inline ::cs::CSRoleExt* CSRole::mutable_ext() {
  set_has_ext();
  if (ext_ == NULL) ext_ = new ::cs::CSRoleExt;
  // @@protoc_insertion_point(field_mutable:cs.CSRole.ext)
  return ext_;
}
inline ::cs::CSRoleExt* CSRole::release_ext() {
  clear_has_ext();
  ::cs::CSRoleExt* temp = ext_;
  ext_ = NULL;
  return temp;
}
inline void CSRole::set_allocated_ext(::cs::CSRoleExt* ext) {
  delete ext_;
  ext_ = ext;
  if (ext) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSRole.ext)
}

// required .cs.CSRoleMisc misc = 3;
inline bool CSRole::has_misc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSRole::set_has_misc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSRole::clear_has_misc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSRole::clear_misc() {
  if (misc_ != NULL) misc_->::cs::CSRoleMisc::Clear();
  clear_has_misc();
}
inline const ::cs::CSRoleMisc& CSRole::misc() const {
  // @@protoc_insertion_point(field_get:cs.CSRole.misc)
  return misc_ != NULL ? *misc_ : *default_instance_->misc_;
}
inline ::cs::CSRoleMisc* CSRole::mutable_misc() {
  set_has_misc();
  if (misc_ == NULL) misc_ = new ::cs::CSRoleMisc;
  // @@protoc_insertion_point(field_mutable:cs.CSRole.misc)
  return misc_;
}
inline ::cs::CSRoleMisc* CSRole::release_misc() {
  clear_has_misc();
  ::cs::CSRoleMisc* temp = misc_;
  misc_ = NULL;
  return temp;
}
inline void CSRole::set_allocated_misc(::cs::CSRoleMisc* misc) {
  delete misc_;
  misc_ = misc;
  if (misc) {
    set_has_misc();
  } else {
    clear_has_misc();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSRole.misc)
}

// -------------------------------------------------------------------

// CSMsgRole

// required uint32 cmd = 1;
inline bool CSMsgRole::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMsgRole::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMsgRole::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMsgRole::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CSMsgRole::cmd() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgRole.cmd)
  return cmd_;
}
inline void CSMsgRole::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:cs.CSMsgRole.cmd)
}

// optional .cs.CSRole allInfoRsp = 2;
inline bool CSMsgRole::has_allinforsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMsgRole::set_has_allinforsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMsgRole::clear_has_allinforsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMsgRole::clear_allinforsp() {
  if (allinforsp_ != NULL) allinforsp_->::cs::CSRole::Clear();
  clear_has_allinforsp();
}
inline const ::cs::CSRole& CSMsgRole::allinforsp() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgRole.allInfoRsp)
  return allinforsp_ != NULL ? *allinforsp_ : *default_instance_->allinforsp_;
}
inline ::cs::CSRole* CSMsgRole::mutable_allinforsp() {
  set_has_allinforsp();
  if (allinforsp_ == NULL) allinforsp_ = new ::cs::CSRole;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgRole.allInfoRsp)
  return allinforsp_;
}
inline ::cs::CSRole* CSMsgRole::release_allinforsp() {
  clear_has_allinforsp();
  ::cs::CSRole* temp = allinforsp_;
  allinforsp_ = NULL;
  return temp;
}
inline void CSMsgRole::set_allocated_allinforsp(::cs::CSRole* allinforsp) {
  delete allinforsp_;
  allinforsp_ = allinforsp;
  if (allinforsp) {
    set_has_allinforsp();
  } else {
    clear_has_allinforsp();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgRole.allInfoRsp)
}

// optional .cs.CSRoleBase baseInfoRsp = 3;
inline bool CSMsgRole::has_baseinforsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMsgRole::set_has_baseinforsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMsgRole::clear_has_baseinforsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMsgRole::clear_baseinforsp() {
  if (baseinforsp_ != NULL) baseinforsp_->::cs::CSRoleBase::Clear();
  clear_has_baseinforsp();
}
inline const ::cs::CSRoleBase& CSMsgRole::baseinforsp() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgRole.baseInfoRsp)
  return baseinforsp_ != NULL ? *baseinforsp_ : *default_instance_->baseinforsp_;
}
inline ::cs::CSRoleBase* CSMsgRole::mutable_baseinforsp() {
  set_has_baseinforsp();
  if (baseinforsp_ == NULL) baseinforsp_ = new ::cs::CSRoleBase;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgRole.baseInfoRsp)
  return baseinforsp_;
}
inline ::cs::CSRoleBase* CSMsgRole::release_baseinforsp() {
  clear_has_baseinforsp();
  ::cs::CSRoleBase* temp = baseinforsp_;
  baseinforsp_ = NULL;
  return temp;
}
inline void CSMsgRole::set_allocated_baseinforsp(::cs::CSRoleBase* baseinforsp) {
  delete baseinforsp_;
  baseinforsp_ = baseinforsp;
  if (baseinforsp) {
    set_has_baseinforsp();
  } else {
    clear_has_baseinforsp();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgRole.baseInfoRsp)
}

// optional .cs.CSRoleExt extInfoRsp = 4;
inline bool CSMsgRole::has_extinforsp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMsgRole::set_has_extinforsp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMsgRole::clear_has_extinforsp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMsgRole::clear_extinforsp() {
  if (extinforsp_ != NULL) extinforsp_->::cs::CSRoleExt::Clear();
  clear_has_extinforsp();
}
inline const ::cs::CSRoleExt& CSMsgRole::extinforsp() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgRole.extInfoRsp)
  return extinforsp_ != NULL ? *extinforsp_ : *default_instance_->extinforsp_;
}
inline ::cs::CSRoleExt* CSMsgRole::mutable_extinforsp() {
  set_has_extinforsp();
  if (extinforsp_ == NULL) extinforsp_ = new ::cs::CSRoleExt;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgRole.extInfoRsp)
  return extinforsp_;
}
inline ::cs::CSRoleExt* CSMsgRole::release_extinforsp() {
  clear_has_extinforsp();
  ::cs::CSRoleExt* temp = extinforsp_;
  extinforsp_ = NULL;
  return temp;
}
inline void CSMsgRole::set_allocated_extinforsp(::cs::CSRoleExt* extinforsp) {
  delete extinforsp_;
  extinforsp_ = extinforsp;
  if (extinforsp) {
    set_has_extinforsp();
  } else {
    clear_has_extinforsp();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgRole.extInfoRsp)
}

// optional .cs.CSRoleMisc miscInfoRsp = 5;
inline bool CSMsgRole::has_miscinforsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMsgRole::set_has_miscinforsp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMsgRole::clear_has_miscinforsp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMsgRole::clear_miscinforsp() {
  if (miscinforsp_ != NULL) miscinforsp_->::cs::CSRoleMisc::Clear();
  clear_has_miscinforsp();
}
inline const ::cs::CSRoleMisc& CSMsgRole::miscinforsp() const {
  // @@protoc_insertion_point(field_get:cs.CSMsgRole.miscInfoRsp)
  return miscinforsp_ != NULL ? *miscinforsp_ : *default_instance_->miscinforsp_;
}
inline ::cs::CSRoleMisc* CSMsgRole::mutable_miscinforsp() {
  set_has_miscinforsp();
  if (miscinforsp_ == NULL) miscinforsp_ = new ::cs::CSRoleMisc;
  // @@protoc_insertion_point(field_mutable:cs.CSMsgRole.miscInfoRsp)
  return miscinforsp_;
}
inline ::cs::CSRoleMisc* CSMsgRole::release_miscinforsp() {
  clear_has_miscinforsp();
  ::cs::CSRoleMisc* temp = miscinforsp_;
  miscinforsp_ = NULL;
  return temp;
}
inline void CSMsgRole::set_allocated_miscinforsp(::cs::CSRoleMisc* miscinforsp) {
  delete miscinforsp_;
  miscinforsp_ = miscinforsp;
  if (miscinforsp) {
    set_has_miscinforsp();
  } else {
    clear_has_miscinforsp();
  }
  // @@protoc_insertion_point(field_set_allocated:cs.CSMsgRole.miscInfoRsp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cs::CSMsgRole_CmdCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cs::CSMsgRole_CmdCode>() {
  return ::cs::CSMsgRole_CmdCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_2fCSMsgRole_2eproto__INCLUDED
