// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs/CSMsgRole.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs/CSMsgRole.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cs {

namespace {

const ::google::protobuf::Descriptor* CSRoleBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRoleBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRoleExt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRoleExt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRoleMisc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRoleMisc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMsgRole_CmdCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_2fCSMsgRole_2eproto() {
  protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs/CSMsgRole.proto");
  GOOGLE_CHECK(file != NULL);
  CSRoleBase_descriptor_ = file->message_type(0);
  static const int CSRoleBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleBase, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleBase, level_),
  };
  CSRoleBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRoleBase_descriptor_,
      CSRoleBase::default_instance_,
      CSRoleBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRoleBase));
  CSRoleExt_descriptor_ = file->message_type(1);
  static const int CSRoleExt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleExt, dummy_),
  };
  CSRoleExt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRoleExt_descriptor_,
      CSRoleExt::default_instance_,
      CSRoleExt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleExt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleExt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRoleExt));
  CSRoleMisc_descriptor_ = file->message_type(2);
  static const int CSRoleMisc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleMisc, dummy_),
  };
  CSRoleMisc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRoleMisc_descriptor_,
      CSRoleMisc::default_instance_,
      CSRoleMisc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleMisc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoleMisc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRoleMisc));
  CSRole_descriptor_ = file->message_type(3);
  static const int CSRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRole, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRole, ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRole, misc_),
  };
  CSRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRole_descriptor_,
      CSRole::default_instance_,
      CSRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRole));
  CSMsgRole_descriptor_ = file->message_type(4);
  static const int CSMsgRole_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRole, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRole, allinforsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRole, baseinforsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRole, extinforsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRole, miscinforsp_),
  };
  CSMsgRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgRole_descriptor_,
      CSMsgRole::default_instance_,
      CSMsgRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgRole));
  CSMsgRole_CmdCode_descriptor_ = CSMsgRole_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_2fCSMsgRole_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRoleBase_descriptor_, &CSRoleBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRoleExt_descriptor_, &CSRoleExt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRoleMisc_descriptor_, &CSRoleMisc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRole_descriptor_, &CSRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgRole_descriptor_, &CSMsgRole::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_2fCSMsgRole_2eproto() {
  delete CSRoleBase::default_instance_;
  delete CSRoleBase_reflection_;
  delete CSRoleExt::default_instance_;
  delete CSRoleExt_reflection_;
  delete CSRoleMisc::default_instance_;
  delete CSRoleMisc_reflection_;
  delete CSRole::default_instance_;
  delete CSRole_reflection_;
  delete CSMsgRole::default_instance_;
  delete CSMsgRole_reflection_;
}

void protobuf_AddDesc_cs_2fCSMsgRole_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::base::protobuf_AddDesc_base_2fRoleBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022cs/CSMsgRole.proto\022\002cs\032\023base/RoleBase."
    "proto\"6\n\nCSRoleBase\022\013\n\003uid\030\001 \002(\004\022\014\n\004name"
    "\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\"\032\n\tCSRoleExt\022\r\n\005du"
    "mmy\030\001 \001(\r\"\033\n\nCSRoleMisc\022\r\n\005dummy\030\001 \001(\r\"`"
    "\n\006CSRole\022\034\n\004base\030\001 \002(\0132\016.cs.CSRoleBase\022\032"
    "\n\003ext\030\002 \002(\0132\r.cs.CSRoleExt\022\034\n\004misc\030\003 \002(\013"
    "2\016.cs.CSRoleMisc\"\235\003\n\tCSMsgRole\022\013\n\003cmd\030\001 "
    "\002(\r\022\036\n\nallInfoRsp\030\002 \001(\0132\n.cs.CSRole\022#\n\013b"
    "aseInfoRsp\030\003 \001(\0132\016.cs.CSRoleBase\022!\n\nextI"
    "nfoRsp\030\004 \001(\0132\r.cs.CSRoleExt\022#\n\013miscInfoR"
    "sp\030\005 \001(\0132\016.cs.CSRoleMisc\"\365\001\n\007CmdCode\022\033\n\027"
    "CSMSG_ROLE_ALL_INFO_REQ\020\001\022\034\n\030CSMSG_ROLE_"
    "BASE_INFO_REQ\020\002\022\033\n\027CSMSG_ROLE_EXT_INFO_R"
    "EQ\020\003\022\034\n\030CSMSG_ROLE_MISC_INFO_REQ\020\004\022\033\n\027CS"
    "MSG_ROLE_ALL_INFO_RSP\020\005\022\034\n\030CSMSG_ROLE_BA"
    "SE_INFO_RSP\020\006\022\033\n\027CSMSG_ROLE_EXT_INFO_RSP"
    "\020\007\022\034\n\030CSMSG_ROLE_MISC_INFO_RSP\020\010", 672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs/CSMsgRole.proto", &protobuf_RegisterTypes);
  CSRoleBase::default_instance_ = new CSRoleBase();
  CSRoleExt::default_instance_ = new CSRoleExt();
  CSRoleMisc::default_instance_ = new CSRoleMisc();
  CSRole::default_instance_ = new CSRole();
  CSMsgRole::default_instance_ = new CSMsgRole();
  CSRoleBase::default_instance_->InitAsDefaultInstance();
  CSRoleExt::default_instance_->InitAsDefaultInstance();
  CSRoleMisc::default_instance_->InitAsDefaultInstance();
  CSRole::default_instance_->InitAsDefaultInstance();
  CSMsgRole::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_2fCSMsgRole_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_2fCSMsgRole_2eproto {
  StaticDescriptorInitializer_cs_2fCSMsgRole_2eproto() {
    protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  }
} static_descriptor_initializer_cs_2fCSMsgRole_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSRoleBase::kUidFieldNumber;
const int CSRoleBase::kNameFieldNumber;
const int CSRoleBase::kLevelFieldNumber;
#endif  // !_MSC_VER

CSRoleBase::CSRoleBase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSRoleBase)
}

void CSRoleBase::InitAsDefaultInstance() {
}

CSRoleBase::CSRoleBase(const CSRoleBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSRoleBase)
}

void CSRoleBase::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRoleBase::~CSRoleBase() {
  // @@protoc_insertion_point(destructor:cs.CSRoleBase)
  SharedDtor();
}

void CSRoleBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSRoleBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRoleBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRoleBase_descriptor_;
}

const CSRoleBase& CSRoleBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  return *default_instance_;
}

CSRoleBase* CSRoleBase::default_instance_ = NULL;

CSRoleBase* CSRoleBase::New() const {
  return new CSRoleBase;
}

void CSRoleBase::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRoleBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSRoleBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSRoleBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSRoleBase)
  return false;
#undef DO_
}

void CSRoleBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSRoleBase)
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSRoleBase)
}

::google::protobuf::uint8* CSRoleBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSRoleBase)
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSRoleBase)
  return target;
}

int CSRoleBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRoleBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRoleBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRoleBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRoleBase::MergeFrom(const CSRoleBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRoleBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRoleBase::CopyFrom(const CSRoleBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRoleBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRoleBase::Swap(CSRoleBase* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRoleBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRoleBase_descriptor_;
  metadata.reflection = CSRoleBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRoleExt::kDummyFieldNumber;
#endif  // !_MSC_VER

CSRoleExt::CSRoleExt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSRoleExt)
}

void CSRoleExt::InitAsDefaultInstance() {
}

CSRoleExt::CSRoleExt(const CSRoleExt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSRoleExt)
}

void CSRoleExt::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRoleExt::~CSRoleExt() {
  // @@protoc_insertion_point(destructor:cs.CSRoleExt)
  SharedDtor();
}

void CSRoleExt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRoleExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRoleExt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRoleExt_descriptor_;
}

const CSRoleExt& CSRoleExt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  return *default_instance_;
}

CSRoleExt* CSRoleExt::default_instance_ = NULL;

CSRoleExt* CSRoleExt::New() const {
  return new CSRoleExt;
}

void CSRoleExt::Clear() {
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRoleExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSRoleExt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSRoleExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSRoleExt)
  return false;
#undef DO_
}

void CSRoleExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSRoleExt)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSRoleExt)
}

::google::protobuf::uint8* CSRoleExt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSRoleExt)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSRoleExt)
  return target;
}

int CSRoleExt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRoleExt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRoleExt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRoleExt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRoleExt::MergeFrom(const CSRoleExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRoleExt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRoleExt::CopyFrom(const CSRoleExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRoleExt::IsInitialized() const {

  return true;
}

void CSRoleExt::Swap(CSRoleExt* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRoleExt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRoleExt_descriptor_;
  metadata.reflection = CSRoleExt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRoleMisc::kDummyFieldNumber;
#endif  // !_MSC_VER

CSRoleMisc::CSRoleMisc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSRoleMisc)
}

void CSRoleMisc::InitAsDefaultInstance() {
}

CSRoleMisc::CSRoleMisc(const CSRoleMisc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSRoleMisc)
}

void CSRoleMisc::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRoleMisc::~CSRoleMisc() {
  // @@protoc_insertion_point(destructor:cs.CSRoleMisc)
  SharedDtor();
}

void CSRoleMisc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRoleMisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRoleMisc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRoleMisc_descriptor_;
}

const CSRoleMisc& CSRoleMisc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  return *default_instance_;
}

CSRoleMisc* CSRoleMisc::default_instance_ = NULL;

CSRoleMisc* CSRoleMisc::New() const {
  return new CSRoleMisc;
}

void CSRoleMisc::Clear() {
  dummy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRoleMisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSRoleMisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSRoleMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSRoleMisc)
  return false;
#undef DO_
}

void CSRoleMisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSRoleMisc)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSRoleMisc)
}

::google::protobuf::uint8* CSRoleMisc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSRoleMisc)
  // optional uint32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSRoleMisc)
  return target;
}

int CSRoleMisc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRoleMisc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRoleMisc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRoleMisc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRoleMisc::MergeFrom(const CSRoleMisc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRoleMisc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRoleMisc::CopyFrom(const CSRoleMisc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRoleMisc::IsInitialized() const {

  return true;
}

void CSRoleMisc::Swap(CSRoleMisc* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRoleMisc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRoleMisc_descriptor_;
  metadata.reflection = CSRoleMisc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRole::kBaseFieldNumber;
const int CSRole::kExtFieldNumber;
const int CSRole::kMiscFieldNumber;
#endif  // !_MSC_VER

CSRole::CSRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSRole)
}

void CSRole::InitAsDefaultInstance() {
  base_ = const_cast< ::cs::CSRoleBase*>(&::cs::CSRoleBase::default_instance());
  ext_ = const_cast< ::cs::CSRoleExt*>(&::cs::CSRoleExt::default_instance());
  misc_ = const_cast< ::cs::CSRoleMisc*>(&::cs::CSRoleMisc::default_instance());
}

CSRole::CSRole(const CSRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSRole)
}

void CSRole::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ext_ = NULL;
  misc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRole::~CSRole() {
  // @@protoc_insertion_point(destructor:cs.CSRole)
  SharedDtor();
}

void CSRole::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete ext_;
    delete misc_;
  }
}

void CSRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRole_descriptor_;
}

const CSRole& CSRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  return *default_instance_;
}

CSRole* CSRole::default_instance_ = NULL;

CSRole* CSRole::New() const {
  return new CSRole;
}

void CSRole::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_base()) {
      if (base_ != NULL) base_->::cs::CSRoleBase::Clear();
    }
    if (has_ext()) {
      if (ext_ != NULL) ext_->::cs::CSRoleExt::Clear();
    }
    if (has_misc()) {
      if (misc_ != NULL) misc_->::cs::CSRoleMisc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cs.CSRoleBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ext;
        break;
      }

      // required .cs.CSRoleExt ext = 2;
      case 2: {
        if (tag == 18) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_misc;
        break;
      }

      // required .cs.CSRoleMisc misc = 3;
      case 3: {
        if (tag == 26) {
         parse_misc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSRole)
  return false;
#undef DO_
}

void CSRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSRole)
  // required .cs.CSRoleBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // required .cs.CSRoleExt ext = 2;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ext(), output);
  }

  // required .cs.CSRoleMisc misc = 3;
  if (has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->misc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSRole)
}

::google::protobuf::uint8* CSRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSRole)
  // required .cs.CSRoleBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // required .cs.CSRoleExt ext = 2;
  if (has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ext(), target);
  }

  // required .cs.CSRoleMisc misc = 3;
  if (has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->misc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSRole)
  return target;
}

int CSRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cs.CSRoleBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required .cs.CSRoleExt ext = 2;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext());
    }

    // required .cs.CSRoleMisc misc = 3;
    if (has_misc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->misc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRole::MergeFrom(const CSRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::cs::CSRoleBase::MergeFrom(from.base());
    }
    if (from.has_ext()) {
      mutable_ext()->::cs::CSRoleExt::MergeFrom(from.ext());
    }
    if (from.has_misc()) {
      mutable_misc()->::cs::CSRoleMisc::MergeFrom(from.misc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRole::CopyFrom(const CSRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void CSRole::Swap(CSRole* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ext_, other->ext_);
    std::swap(misc_, other->misc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRole_descriptor_;
  metadata.reflection = CSRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSMsgRole_CmdCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgRole_CmdCode_descriptor_;
}
bool CSMsgRole_CmdCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSMsgRole_CmdCode CSMsgRole::CSMSG_ROLE_ALL_INFO_REQ;
const CSMsgRole_CmdCode CSMsgRole::CSMSG_ROLE_BASE_INFO_REQ;
const CSMsgRole_CmdCode CSMsgRole::CSMSG_ROLE_EXT_INFO_REQ;
const CSMsgRole_CmdCode CSMsgRole::CSMSG_ROLE_MISC_INFO_REQ;
const CSMsgRole_CmdCode CSMsgRole::CSMSG_ROLE_ALL_INFO_RSP;
const CSMsgRole_CmdCode CSMsgRole::CSMSG_ROLE_BASE_INFO_RSP;
const CSMsgRole_CmdCode CSMsgRole::CSMSG_ROLE_EXT_INFO_RSP;
const CSMsgRole_CmdCode CSMsgRole::CSMSG_ROLE_MISC_INFO_RSP;
const CSMsgRole_CmdCode CSMsgRole::CmdCode_MIN;
const CSMsgRole_CmdCode CSMsgRole::CmdCode_MAX;
const int CSMsgRole::CmdCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSMsgRole::kCmdFieldNumber;
const int CSMsgRole::kAllInfoRspFieldNumber;
const int CSMsgRole::kBaseInfoRspFieldNumber;
const int CSMsgRole::kExtInfoRspFieldNumber;
const int CSMsgRole::kMiscInfoRspFieldNumber;
#endif  // !_MSC_VER

CSMsgRole::CSMsgRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cs.CSMsgRole)
}

void CSMsgRole::InitAsDefaultInstance() {
  allinforsp_ = const_cast< ::cs::CSRole*>(&::cs::CSRole::default_instance());
  baseinforsp_ = const_cast< ::cs::CSRoleBase*>(&::cs::CSRoleBase::default_instance());
  extinforsp_ = const_cast< ::cs::CSRoleExt*>(&::cs::CSRoleExt::default_instance());
  miscinforsp_ = const_cast< ::cs::CSRoleMisc*>(&::cs::CSRoleMisc::default_instance());
}

CSMsgRole::CSMsgRole(const CSMsgRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cs.CSMsgRole)
}

void CSMsgRole::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  allinforsp_ = NULL;
  baseinforsp_ = NULL;
  extinforsp_ = NULL;
  miscinforsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgRole::~CSMsgRole() {
  // @@protoc_insertion_point(destructor:cs.CSMsgRole)
  SharedDtor();
}

void CSMsgRole::SharedDtor() {
  if (this != default_instance_) {
    delete allinforsp_;
    delete baseinforsp_;
    delete extinforsp_;
    delete miscinforsp_;
  }
}

void CSMsgRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgRole_descriptor_;
}

const CSMsgRole& CSMsgRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_2fCSMsgRole_2eproto();
  return *default_instance_;
}

CSMsgRole* CSMsgRole::default_instance_ = NULL;

CSMsgRole* CSMsgRole::New() const {
  return new CSMsgRole;
}

void CSMsgRole::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 0u;
    if (has_allinforsp()) {
      if (allinforsp_ != NULL) allinforsp_->::cs::CSRole::Clear();
    }
    if (has_baseinforsp()) {
      if (baseinforsp_ != NULL) baseinforsp_->::cs::CSRoleBase::Clear();
    }
    if (has_extinforsp()) {
      if (extinforsp_ != NULL) extinforsp_->::cs::CSRoleExt::Clear();
    }
    if (has_miscinforsp()) {
      if (miscinforsp_ != NULL) miscinforsp_->::cs::CSRoleMisc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cs.CSMsgRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_allInfoRsp;
        break;
      }

      // optional .cs.CSRole allInfoRsp = 2;
      case 2: {
        if (tag == 18) {
         parse_allInfoRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allinforsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseInfoRsp;
        break;
      }

      // optional .cs.CSRoleBase baseInfoRsp = 3;
      case 3: {
        if (tag == 26) {
         parse_baseInfoRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinforsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_extInfoRsp;
        break;
      }

      // optional .cs.CSRoleExt extInfoRsp = 4;
      case 4: {
        if (tag == 34) {
         parse_extInfoRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extinforsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_miscInfoRsp;
        break;
      }

      // optional .cs.CSRoleMisc miscInfoRsp = 5;
      case 5: {
        if (tag == 42) {
         parse_miscInfoRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_miscinforsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cs.CSMsgRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cs.CSMsgRole)
  return false;
#undef DO_
}

void CSMsgRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cs.CSMsgRole)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional .cs.CSRole allInfoRsp = 2;
  if (has_allinforsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allinforsp(), output);
  }

  // optional .cs.CSRoleBase baseInfoRsp = 3;
  if (has_baseinforsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baseinforsp(), output);
  }

  // optional .cs.CSRoleExt extInfoRsp = 4;
  if (has_extinforsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extinforsp(), output);
  }

  // optional .cs.CSRoleMisc miscInfoRsp = 5;
  if (has_miscinforsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->miscinforsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cs.CSMsgRole)
}

::google::protobuf::uint8* CSMsgRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.CSMsgRole)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional .cs.CSRole allInfoRsp = 2;
  if (has_allinforsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allinforsp(), target);
  }

  // optional .cs.CSRoleBase baseInfoRsp = 3;
  if (has_baseinforsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baseinforsp(), target);
  }

  // optional .cs.CSRoleExt extInfoRsp = 4;
  if (has_extinforsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extinforsp(), target);
  }

  // optional .cs.CSRoleMisc miscInfoRsp = 5;
  if (has_miscinforsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->miscinforsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.CSMsgRole)
  return target;
}

int CSMsgRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional .cs.CSRole allInfoRsp = 2;
    if (has_allinforsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allinforsp());
    }

    // optional .cs.CSRoleBase baseInfoRsp = 3;
    if (has_baseinforsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinforsp());
    }

    // optional .cs.CSRoleExt extInfoRsp = 4;
    if (has_extinforsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extinforsp());
    }

    // optional .cs.CSRoleMisc miscInfoRsp = 5;
    if (has_miscinforsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->miscinforsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgRole::MergeFrom(const CSMsgRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_allinforsp()) {
      mutable_allinforsp()->::cs::CSRole::MergeFrom(from.allinforsp());
    }
    if (from.has_baseinforsp()) {
      mutable_baseinforsp()->::cs::CSRoleBase::MergeFrom(from.baseinforsp());
    }
    if (from.has_extinforsp()) {
      mutable_extinforsp()->::cs::CSRoleExt::MergeFrom(from.extinforsp());
    }
    if (from.has_miscinforsp()) {
      mutable_miscinforsp()->::cs::CSRoleMisc::MergeFrom(from.miscinforsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgRole::CopyFrom(const CSMsgRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_allinforsp()) {
    if (!this->allinforsp().IsInitialized()) return false;
  }
  if (has_baseinforsp()) {
    if (!this->baseinforsp().IsInitialized()) return false;
  }
  return true;
}

void CSMsgRole::Swap(CSMsgRole* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(allinforsp_, other->allinforsp_);
    std::swap(baseinforsp_, other->baseinforsp_);
    std::swap(extinforsp_, other->extinforsp_);
    std::swap(miscinforsp_, other->miscinforsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgRole_descriptor_;
  metadata.reflection = CSMsgRole_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)
