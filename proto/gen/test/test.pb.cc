// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test/test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace test {

namespace {

const ::google::protobuf::Descriptor* Cache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cache_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cache__PrimaryKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cache__PrimaryKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cache__MaxLength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cache__MaxLength_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2ftest_2eproto() {
  protobuf_AddDesc_test_2ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test/test.proto");
  GOOGLE_CHECK(file != NULL);
  Cache_descriptor_ = file->message_type(0);
  static const int Cache_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache, gid_),
  };
  Cache_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cache_descriptor_,
      Cache::default_instance_,
      Cache_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cache));
  Cache__PrimaryKey_descriptor_ = Cache_descriptor_->nested_type(0);
  static const int Cache__PrimaryKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache__PrimaryKey, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache__PrimaryKey, area_),
  };
  Cache__PrimaryKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cache__PrimaryKey_descriptor_,
      Cache__PrimaryKey::default_instance_,
      Cache__PrimaryKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache__PrimaryKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache__PrimaryKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cache__PrimaryKey));
  Cache__MaxLength_descriptor_ = Cache_descriptor_->nested_type(1);
  static const int Cache__MaxLength_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache__MaxLength, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache__MaxLength, area_),
  };
  Cache__MaxLength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cache__MaxLength_descriptor_,
      Cache__MaxLength::default_instance_,
      Cache__MaxLength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache__MaxLength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cache__MaxLength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cache__MaxLength));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cache_descriptor_, &Cache::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cache__PrimaryKey_descriptor_, &Cache__PrimaryKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cache__MaxLength_descriptor_, &Cache__MaxLength::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2ftest_2eproto() {
  delete Cache::default_instance_;
  delete Cache_reflection_;
  delete Cache__PrimaryKey::default_instance_;
  delete Cache__PrimaryKey_reflection_;
  delete Cache__MaxLength::default_instance_;
  delete Cache__MaxLength_reflection_;
}

void protobuf_AddDesc_test_2ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017test/test.proto\022\004test\"\214\001\n\005Cache\022\014\n\004nam"
    "e\030\001 \002(\t\022\014\n\004area\030\002 \002(\r\022\013\n\003gid\030\003 \002(\004\032)\n\013_P"
    "rimaryKey\022\014\n\004name\030\001 \001(\t\022\014\n\004area\030\002 \001(\t\032/\n"
    "\n_MaxLength\022\020\n\004name\030\001 \001(\r:\00232\022\017\n\004area\030\002 "
    "\001(\r:\0015", 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test/test.proto", &protobuf_RegisterTypes);
  Cache::default_instance_ = new Cache();
  Cache__PrimaryKey::default_instance_ = new Cache__PrimaryKey();
  Cache__MaxLength::default_instance_ = new Cache__MaxLength();
  Cache::default_instance_->InitAsDefaultInstance();
  Cache__PrimaryKey::default_instance_->InitAsDefaultInstance();
  Cache__MaxLength::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2ftest_2eproto {
  StaticDescriptorInitializer_test_2ftest_2eproto() {
    protobuf_AddDesc_test_2ftest_2eproto();
  }
} static_descriptor_initializer_test_2ftest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Cache__PrimaryKey::kNameFieldNumber;
const int Cache__PrimaryKey::kAreaFieldNumber;
#endif  // !_MSC_VER

Cache__PrimaryKey::Cache__PrimaryKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Cache._PrimaryKey)
}

void Cache__PrimaryKey::InitAsDefaultInstance() {
}

Cache__PrimaryKey::Cache__PrimaryKey(const Cache__PrimaryKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.Cache._PrimaryKey)
}

void Cache__PrimaryKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cache__PrimaryKey::~Cache__PrimaryKey() {
  // @@protoc_insertion_point(destructor:test.Cache._PrimaryKey)
  SharedDtor();
}

void Cache__PrimaryKey::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete area_;
  }
  if (this != default_instance_) {
  }
}

void Cache__PrimaryKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cache__PrimaryKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cache__PrimaryKey_descriptor_;
}

const Cache__PrimaryKey& Cache__PrimaryKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2ftest_2eproto();
  return *default_instance_;
}

Cache__PrimaryKey* Cache__PrimaryKey::default_instance_ = NULL;

Cache__PrimaryKey* Cache__PrimaryKey::New() const {
  return new Cache__PrimaryKey;
}

void Cache__PrimaryKey::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_area()) {
      if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        area_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cache__PrimaryKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Cache._PrimaryKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_area;
        break;
      }

      // optional string area = 2;
      case 2: {
        if (tag == 18) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->area().data(), this->area().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "area");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Cache._PrimaryKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Cache._PrimaryKey)
  return false;
#undef DO_
}

void Cache__PrimaryKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Cache._PrimaryKey)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string area = 2;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "area");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Cache._PrimaryKey)
}

::google::protobuf::uint8* Cache__PrimaryKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.Cache._PrimaryKey)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string area = 2;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "area");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Cache._PrimaryKey)
  return target;
}

int Cache__PrimaryKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string area = 2;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cache__PrimaryKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cache__PrimaryKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cache__PrimaryKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cache__PrimaryKey::MergeFrom(const Cache__PrimaryKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cache__PrimaryKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cache__PrimaryKey::CopyFrom(const Cache__PrimaryKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cache__PrimaryKey::IsInitialized() const {

  return true;
}

void Cache__PrimaryKey::Swap(Cache__PrimaryKey* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cache__PrimaryKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cache__PrimaryKey_descriptor_;
  metadata.reflection = Cache__PrimaryKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Cache__MaxLength::kNameFieldNumber;
const int Cache__MaxLength::kAreaFieldNumber;
#endif  // !_MSC_VER

Cache__MaxLength::Cache__MaxLength()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Cache._MaxLength)
}

void Cache__MaxLength::InitAsDefaultInstance() {
}

Cache__MaxLength::Cache__MaxLength(const Cache__MaxLength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.Cache._MaxLength)
}

void Cache__MaxLength::SharedCtor() {
  _cached_size_ = 0;
  name_ = 32u;
  area_ = 5u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cache__MaxLength::~Cache__MaxLength() {
  // @@protoc_insertion_point(destructor:test.Cache._MaxLength)
  SharedDtor();
}

void Cache__MaxLength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cache__MaxLength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cache__MaxLength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cache__MaxLength_descriptor_;
}

const Cache__MaxLength& Cache__MaxLength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2ftest_2eproto();
  return *default_instance_;
}

Cache__MaxLength* Cache__MaxLength::default_instance_ = NULL;

Cache__MaxLength* Cache__MaxLength::New() const {
  return new Cache__MaxLength;
}

void Cache__MaxLength::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    name_ = 32u;
    area_ = 5u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cache__MaxLength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Cache._MaxLength)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 name = 1 [default = 32];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }

      // optional uint32 area = 2 [default = 5];
      case 2: {
        if (tag == 16) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Cache._MaxLength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Cache._MaxLength)
  return false;
#undef DO_
}

void Cache__MaxLength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Cache._MaxLength)
  // optional uint32 name = 1 [default = 32];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->name(), output);
  }

  // optional uint32 area = 2 [default = 5];
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Cache._MaxLength)
}

::google::protobuf::uint8* Cache__MaxLength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.Cache._MaxLength)
  // optional uint32 name = 1 [default = 32];
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->name(), target);
  }

  // optional uint32 area = 2 [default = 5];
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Cache._MaxLength)
  return target;
}

int Cache__MaxLength::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 name = 1 [default = 32];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }

    // optional uint32 area = 2 [default = 5];
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cache__MaxLength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cache__MaxLength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cache__MaxLength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cache__MaxLength::MergeFrom(const Cache__MaxLength& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cache__MaxLength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cache__MaxLength::CopyFrom(const Cache__MaxLength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cache__MaxLength::IsInitialized() const {

  return true;
}

void Cache__MaxLength::Swap(Cache__MaxLength* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cache__MaxLength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cache__MaxLength_descriptor_;
  metadata.reflection = Cache__MaxLength_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Cache::kNameFieldNumber;
const int Cache::kAreaFieldNumber;
const int Cache::kGidFieldNumber;
#endif  // !_MSC_VER

Cache::Cache()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Cache)
}

void Cache::InitAsDefaultInstance() {
}

Cache::Cache(const Cache& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.Cache)
}

void Cache::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_ = 0u;
  gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cache::~Cache() {
  // @@protoc_insertion_point(destructor:test.Cache)
  SharedDtor();
}

void Cache::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Cache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cache_descriptor_;
}

const Cache& Cache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2ftest_2eproto();
  return *default_instance_;
}

Cache* Cache::default_instance_ = NULL;

Cache* Cache::New() const {
  return new Cache;
}

void Cache::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Cache*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gid_, area_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Cache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }

      // required uint32 area = 2;
      case 2: {
        if (tag == 16) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // required uint64 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Cache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Cache)
  return false;
#undef DO_
}

void Cache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Cache)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 area = 2;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->area(), output);
  }

  // required uint64 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Cache)
}

::google::protobuf::uint8* Cache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.Cache)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 area = 2;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->area(), target);
  }

  // required uint64 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Cache)
  return target;
}

int Cache::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 area = 2;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

    // required uint64 gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cache::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cache* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cache*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cache::MergeFrom(const Cache& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cache::CopyFrom(const Cache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cache::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Cache::Swap(Cache* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(area_, other->area_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cache_descriptor_;
  metadata.reflection = Cache_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)
