// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test/meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace test {

namespace {

const ::google::protobuf::Descriptor* RoleBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleBase_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleBase_Gender_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RoleHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RolePackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RolePackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleGrowth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleGrowth_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSNS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSNS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleExt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleExt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_reflection_ = NULL;
const ::google::protobuf::Descriptor* meta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  meta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2fmeta_2eproto() {
  protobuf_AddDesc_test_2fmeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test/meta.proto");
  GOOGLE_CHECK(file != NULL);
  RoleBase_descriptor_ = file->message_type(0);
  static const int RoleBase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBase, gendor_),
  };
  RoleBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleBase_descriptor_,
      RoleBase::default_instance_,
      RoleBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleBase));
  RoleBase_Gender_descriptor_ = RoleBase_descriptor_->enum_type(0);
  RoleHero_descriptor_ = file->message_type(1);
  static const int RoleHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHero, id_),
  };
  RoleHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHero_descriptor_,
      RoleHero::default_instance_,
      RoleHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHero));
  RoleHeroInfo_descriptor_ = file->message_type(2);
  static const int RoleHeroInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, heros_),
  };
  RoleHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHeroInfo_descriptor_,
      RoleHeroInfo::default_instance_,
      RoleHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHeroInfo));
  RolePackage_descriptor_ = file->message_type(3);
  static const int RolePackage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackage, maxgrid_),
  };
  RolePackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RolePackage_descriptor_,
      RolePackage::default_instance_,
      RolePackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RolePackage));
  RoleGrowth_descriptor_ = file->message_type(4);
  static const int RoleGrowth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGrowth, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGrowth, exp_),
  };
  RoleGrowth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleGrowth_descriptor_,
      RoleGrowth::default_instance_,
      RoleGrowth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGrowth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGrowth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleGrowth));
  RoleStage_descriptor_ = file->message_type(5);
  static const int RoleStage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleStage, curstage_),
  };
  RoleStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleStage_descriptor_,
      RoleStage::default_instance_,
      RoleStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleStage));
  RoleSNS_descriptor_ = file->message_type(6);
  static const int RoleSNS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSNS, maxfrinds_),
  };
  RoleSNS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSNS_descriptor_,
      RoleSNS::default_instance_,
      RoleSNS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSNS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSNS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSNS));
  RoleExt_descriptor_ = file->message_type(7);
  static const int RoleExt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleExt, fightcap_),
  };
  RoleExt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleExt_descriptor_,
      RoleExt::default_instance_,
      RoleExt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleExt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleExt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleExt));
  Role_descriptor_ = file->message_type(8);
  static const int Role_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, grow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, sns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, ext_),
  };
  Role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_descriptor_,
      Role::default_instance_,
      Role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role));
  meta_descriptor_ = file->message_type(9);
  static const int meta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, role_),
  };
  meta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      meta_descriptor_,
      meta::default_instance_,
      meta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(meta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2fmeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleBase_descriptor_, &RoleBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHero_descriptor_, &RoleHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHeroInfo_descriptor_, &RoleHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RolePackage_descriptor_, &RolePackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleGrowth_descriptor_, &RoleGrowth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleStage_descriptor_, &RoleStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSNS_descriptor_, &RoleSNS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleExt_descriptor_, &RoleExt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_descriptor_, &Role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    meta_descriptor_, &meta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2fmeta_2eproto() {
  delete RoleBase::default_instance_;
  delete RoleBase_reflection_;
  delete RoleHero::default_instance_;
  delete RoleHero_reflection_;
  delete RoleHeroInfo::default_instance_;
  delete RoleHeroInfo_reflection_;
  delete RolePackage::default_instance_;
  delete RolePackage_reflection_;
  delete RoleGrowth::default_instance_;
  delete RoleGrowth_reflection_;
  delete RoleStage::default_instance_;
  delete RoleStage_reflection_;
  delete RoleSNS::default_instance_;
  delete RoleSNS_reflection_;
  delete RoleExt::default_instance_;
  delete RoleExt_reflection_;
  delete Role::default_instance_;
  delete Role_reflection_;
  delete meta::default_instance_;
  delete meta_reflection_;
}

void protobuf_AddDesc_test_2fmeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017test/meta.proto\022\004test\"W\n\010RoleBase\022+\n\006g"
    "endor\030\001 \002(\0162\025.test.RoleBase.Gender:\004MALE"
    "\"\036\n\006Gender\022\010\n\004MALE\020\000\022\n\n\006FEMALE\020\001\"\031\n\010Role"
    "Hero\022\r\n\002id\030\001 \002(\r:\0010\"-\n\014RoleHeroInfo\022\035\n\005h"
    "eros\030\001 \003(\0132\016.test.RoleHero\"!\n\013RolePackag"
    "e\022\022\n\007maxGrid\030\001 \002(\r:\0010\".\n\nRoleGrowth\022\020\n\005l"
    "evel\030\001 \002(\r:\0011\022\016\n\003exp\030\002 \002(\r:\0010\" \n\tRoleSta"
    "ge\022\023\n\010curStage\030\001 \002(\r:\0010\"\037\n\007RoleSNS\022\024\n\tma"
    "xfrinds\030\001 \002(\r:\0015\"\036\n\007RoleExt\022\023\n\010fightcap\030"
    "\001 \002(\r:\0010\"\372\001\n\004Role\022\013\n\003rid\030\001 \002(\004\022\014\n\004name\030\002"
    " \002(\t\022\034\n\004base\030\003 \002(\0132\016.test.RoleBase\022 \n\004he"
    "ro\030\004 \002(\0132\022.test.RoleHeroInfo\022\037\n\004pack\030\005 \002"
    "(\0132\021.test.RolePackage\022\036\n\004grow\030\006 \002(\0132\020.te"
    "st.RoleGrowth\022\036\n\005stage\030\007 \002(\0132\017.test.Role"
    "Stage\022\032\n\003sns\030\010 \002(\0132\r.test.RoleSNS\022\032\n\003ext"
    "\030\t \002(\0132\r.test.RoleExt\"1\n\004meta\022\017\n\007version"
    "\030\001 \002(\t\022\030\n\004role\030\002 \001(\0132\n.test.Role", 672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test/meta.proto", &protobuf_RegisterTypes);
  RoleBase::default_instance_ = new RoleBase();
  RoleHero::default_instance_ = new RoleHero();
  RoleHeroInfo::default_instance_ = new RoleHeroInfo();
  RolePackage::default_instance_ = new RolePackage();
  RoleGrowth::default_instance_ = new RoleGrowth();
  RoleStage::default_instance_ = new RoleStage();
  RoleSNS::default_instance_ = new RoleSNS();
  RoleExt::default_instance_ = new RoleExt();
  Role::default_instance_ = new Role();
  meta::default_instance_ = new meta();
  RoleBase::default_instance_->InitAsDefaultInstance();
  RoleHero::default_instance_->InitAsDefaultInstance();
  RoleHeroInfo::default_instance_->InitAsDefaultInstance();
  RolePackage::default_instance_->InitAsDefaultInstance();
  RoleGrowth::default_instance_->InitAsDefaultInstance();
  RoleStage::default_instance_->InitAsDefaultInstance();
  RoleSNS::default_instance_->InitAsDefaultInstance();
  RoleExt::default_instance_->InitAsDefaultInstance();
  Role::default_instance_->InitAsDefaultInstance();
  meta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2fmeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2fmeta_2eproto {
  StaticDescriptorInitializer_test_2fmeta_2eproto() {
    protobuf_AddDesc_test_2fmeta_2eproto();
  }
} static_descriptor_initializer_test_2fmeta_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RoleBase_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleBase_Gender_descriptor_;
}
bool RoleBase_Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoleBase_Gender RoleBase::MALE;
const RoleBase_Gender RoleBase::FEMALE;
const RoleBase_Gender RoleBase::Gender_MIN;
const RoleBase_Gender RoleBase::Gender_MAX;
const int RoleBase::Gender_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoleBase::kGendorFieldNumber;
#endif  // !_MSC_VER

RoleBase::RoleBase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.RoleBase)
}

void RoleBase::InitAsDefaultInstance() {
}

RoleBase::RoleBase(const RoleBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.RoleBase)
}

void RoleBase::SharedCtor() {
  _cached_size_ = 0;
  gendor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleBase::~RoleBase() {
  // @@protoc_insertion_point(destructor:test.RoleBase)
  SharedDtor();
}

void RoleBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleBase_descriptor_;
}

const RoleBase& RoleBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fmeta_2eproto();
  return *default_instance_;
}

RoleBase* RoleBase::default_instance_ = NULL;

RoleBase* RoleBase::New() const {
  return new RoleBase;
}

void RoleBase::Clear() {
  gendor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.RoleBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .test.RoleBase.Gender gendor = 1 [default = MALE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::test::RoleBase_Gender_IsValid(value)) {
            set_gendor(static_cast< ::test::RoleBase_Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.RoleBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.RoleBase)
  return false;
#undef DO_
}

void RoleBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.RoleBase)
  // required .test.RoleBase.Gender gendor = 1 [default = MALE];
  if (has_gendor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gendor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.RoleBase)
}

::google::protobuf::uint8* RoleBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.RoleBase)
  // required .test.RoleBase.Gender gendor = 1 [default = MALE];
  if (has_gendor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gendor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.RoleBase)
  return target;
}

int RoleBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .test.RoleBase.Gender gendor = 1 [default = MALE];
    if (has_gendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gendor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleBase::MergeFrom(const RoleBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gendor()) {
      set_gendor(from.gendor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleBase::CopyFrom(const RoleBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleBase::Swap(RoleBase* other) {
  if (other != this) {
    std::swap(gendor_, other->gendor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleBase_descriptor_;
  metadata.reflection = RoleBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHero::kIdFieldNumber;
#endif  // !_MSC_VER

RoleHero::RoleHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.RoleHero)
}

void RoleHero::InitAsDefaultInstance() {
}

RoleHero::RoleHero(const RoleHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.RoleHero)
}

void RoleHero::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHero::~RoleHero() {
  // @@protoc_insertion_point(destructor:test.RoleHero)
  SharedDtor();
}

void RoleHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHero_descriptor_;
}

const RoleHero& RoleHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fmeta_2eproto();
  return *default_instance_;
}

RoleHero* RoleHero::default_instance_ = NULL;

RoleHero* RoleHero::New() const {
  return new RoleHero;
}

void RoleHero::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.RoleHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.RoleHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.RoleHero)
  return false;
#undef DO_
}

void RoleHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.RoleHero)
  // required uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.RoleHero)
}

::google::protobuf::uint8* RoleHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.RoleHero)
  // required uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.RoleHero)
  return target;
}

int RoleHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHero::MergeFrom(const RoleHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHero::CopyFrom(const RoleHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleHero::Swap(RoleHero* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHero_descriptor_;
  metadata.reflection = RoleHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHeroInfo::kHerosFieldNumber;
#endif  // !_MSC_VER

RoleHeroInfo::RoleHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.RoleHeroInfo)
}

void RoleHeroInfo::InitAsDefaultInstance() {
}

RoleHeroInfo::RoleHeroInfo(const RoleHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.RoleHeroInfo)
}

void RoleHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHeroInfo::~RoleHeroInfo() {
  // @@protoc_insertion_point(destructor:test.RoleHeroInfo)
  SharedDtor();
}

void RoleHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHeroInfo_descriptor_;
}

const RoleHeroInfo& RoleHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fmeta_2eproto();
  return *default_instance_;
}

RoleHeroInfo* RoleHeroInfo::default_instance_ = NULL;

RoleHeroInfo* RoleHeroInfo::New() const {
  return new RoleHeroInfo;
}

void RoleHeroInfo::Clear() {
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.RoleHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .test.RoleHero heros = 1;
      case 1: {
        if (tag == 10) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_heros;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.RoleHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.RoleHeroInfo)
  return false;
#undef DO_
}

void RoleHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.RoleHeroInfo)
  // repeated .test.RoleHero heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.RoleHeroInfo)
}

::google::protobuf::uint8* RoleHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.RoleHeroInfo)
  // repeated .test.RoleHero heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.RoleHeroInfo)
  return target;
}

int RoleHeroInfo::ByteSize() const {
  int total_size = 0;

  // repeated .test.RoleHero heros = 1;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHeroInfo::MergeFrom(const RoleHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHeroInfo::CopyFrom(const RoleHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHeroInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->heros())) return false;
  return true;
}

void RoleHeroInfo::Swap(RoleHeroInfo* other) {
  if (other != this) {
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHeroInfo_descriptor_;
  metadata.reflection = RoleHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RolePackage::kMaxGridFieldNumber;
#endif  // !_MSC_VER

RolePackage::RolePackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.RolePackage)
}

void RolePackage::InitAsDefaultInstance() {
}

RolePackage::RolePackage(const RolePackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.RolePackage)
}

void RolePackage::SharedCtor() {
  _cached_size_ = 0;
  maxgrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RolePackage::~RolePackage() {
  // @@protoc_insertion_point(destructor:test.RolePackage)
  SharedDtor();
}

void RolePackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RolePackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RolePackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RolePackage_descriptor_;
}

const RolePackage& RolePackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fmeta_2eproto();
  return *default_instance_;
}

RolePackage* RolePackage::default_instance_ = NULL;

RolePackage* RolePackage::New() const {
  return new RolePackage;
}

void RolePackage::Clear() {
  maxgrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RolePackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.RolePackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maxGrid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxgrid_)));
          set_has_maxgrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.RolePackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.RolePackage)
  return false;
#undef DO_
}

void RolePackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.RolePackage)
  // required uint32 maxGrid = 1 [default = 0];
  if (has_maxgrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxgrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.RolePackage)
}

::google::protobuf::uint8* RolePackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.RolePackage)
  // required uint32 maxGrid = 1 [default = 0];
  if (has_maxgrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxgrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.RolePackage)
  return target;
}

int RolePackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maxGrid = 1 [default = 0];
    if (has_maxgrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxgrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RolePackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RolePackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RolePackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RolePackage::MergeFrom(const RolePackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxgrid()) {
      set_maxgrid(from.maxgrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RolePackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RolePackage::CopyFrom(const RolePackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RolePackage::Swap(RolePackage* other) {
  if (other != this) {
    std::swap(maxgrid_, other->maxgrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RolePackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RolePackage_descriptor_;
  metadata.reflection = RolePackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleGrowth::kLevelFieldNumber;
const int RoleGrowth::kExpFieldNumber;
#endif  // !_MSC_VER

RoleGrowth::RoleGrowth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.RoleGrowth)
}

void RoleGrowth::InitAsDefaultInstance() {
}

RoleGrowth::RoleGrowth(const RoleGrowth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.RoleGrowth)
}

void RoleGrowth::SharedCtor() {
  _cached_size_ = 0;
  level_ = 1u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleGrowth::~RoleGrowth() {
  // @@protoc_insertion_point(destructor:test.RoleGrowth)
  SharedDtor();
}

void RoleGrowth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleGrowth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleGrowth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleGrowth_descriptor_;
}

const RoleGrowth& RoleGrowth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fmeta_2eproto();
  return *default_instance_;
}

RoleGrowth* RoleGrowth::default_instance_ = NULL;

RoleGrowth* RoleGrowth::New() const {
  return new RoleGrowth;
}

void RoleGrowth::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    level_ = 1u;
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleGrowth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.RoleGrowth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required uint32 exp = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.RoleGrowth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.RoleGrowth)
  return false;
#undef DO_
}

void RoleGrowth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.RoleGrowth)
  // required uint32 level = 1 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 exp = 2 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.RoleGrowth)
}

::google::protobuf::uint8* RoleGrowth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.RoleGrowth)
  // required uint32 level = 1 [default = 1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 exp = 2 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.RoleGrowth)
  return target;
}

int RoleGrowth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 2 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleGrowth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleGrowth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleGrowth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleGrowth::MergeFrom(const RoleGrowth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleGrowth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleGrowth::CopyFrom(const RoleGrowth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleGrowth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleGrowth::Swap(RoleGrowth* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleGrowth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleGrowth_descriptor_;
  metadata.reflection = RoleGrowth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleStage::kCurStageFieldNumber;
#endif  // !_MSC_VER

RoleStage::RoleStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.RoleStage)
}

void RoleStage::InitAsDefaultInstance() {
}

RoleStage::RoleStage(const RoleStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.RoleStage)
}

void RoleStage::SharedCtor() {
  _cached_size_ = 0;
  curstage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleStage::~RoleStage() {
  // @@protoc_insertion_point(destructor:test.RoleStage)
  SharedDtor();
}

void RoleStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleStage_descriptor_;
}

const RoleStage& RoleStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fmeta_2eproto();
  return *default_instance_;
}

RoleStage* RoleStage::default_instance_ = NULL;

RoleStage* RoleStage::New() const {
  return new RoleStage;
}

void RoleStage::Clear() {
  curstage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.RoleStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 curStage = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstage_)));
          set_has_curstage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.RoleStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.RoleStage)
  return false;
#undef DO_
}

void RoleStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.RoleStage)
  // required uint32 curStage = 1 [default = 0];
  if (has_curstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curstage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.RoleStage)
}

::google::protobuf::uint8* RoleStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.RoleStage)
  // required uint32 curStage = 1 [default = 0];
  if (has_curstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curstage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.RoleStage)
  return target;
}

int RoleStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 curStage = 1 [default = 0];
    if (has_curstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleStage::MergeFrom(const RoleStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curstage()) {
      set_curstage(from.curstage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleStage::CopyFrom(const RoleStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleStage::Swap(RoleStage* other) {
  if (other != this) {
    std::swap(curstage_, other->curstage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleStage_descriptor_;
  metadata.reflection = RoleStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSNS::kMaxfrindsFieldNumber;
#endif  // !_MSC_VER

RoleSNS::RoleSNS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.RoleSNS)
}

void RoleSNS::InitAsDefaultInstance() {
}

RoleSNS::RoleSNS(const RoleSNS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.RoleSNS)
}

void RoleSNS::SharedCtor() {
  _cached_size_ = 0;
  maxfrinds_ = 5u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSNS::~RoleSNS() {
  // @@protoc_insertion_point(destructor:test.RoleSNS)
  SharedDtor();
}

void RoleSNS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSNS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSNS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSNS_descriptor_;
}

const RoleSNS& RoleSNS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fmeta_2eproto();
  return *default_instance_;
}

RoleSNS* RoleSNS::default_instance_ = NULL;

RoleSNS* RoleSNS::New() const {
  return new RoleSNS;
}

void RoleSNS::Clear() {
  maxfrinds_ = 5u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSNS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.RoleSNS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maxfrinds = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxfrinds_)));
          set_has_maxfrinds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.RoleSNS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.RoleSNS)
  return false;
#undef DO_
}

void RoleSNS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.RoleSNS)
  // required uint32 maxfrinds = 1 [default = 5];
  if (has_maxfrinds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxfrinds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.RoleSNS)
}

::google::protobuf::uint8* RoleSNS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.RoleSNS)
  // required uint32 maxfrinds = 1 [default = 5];
  if (has_maxfrinds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxfrinds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.RoleSNS)
  return target;
}

int RoleSNS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maxfrinds = 1 [default = 5];
    if (has_maxfrinds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxfrinds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSNS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSNS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSNS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSNS::MergeFrom(const RoleSNS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxfrinds()) {
      set_maxfrinds(from.maxfrinds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSNS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSNS::CopyFrom(const RoleSNS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSNS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleSNS::Swap(RoleSNS* other) {
  if (other != this) {
    std::swap(maxfrinds_, other->maxfrinds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSNS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSNS_descriptor_;
  metadata.reflection = RoleSNS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleExt::kFightcapFieldNumber;
#endif  // !_MSC_VER

RoleExt::RoleExt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.RoleExt)
}

void RoleExt::InitAsDefaultInstance() {
}

RoleExt::RoleExt(const RoleExt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.RoleExt)
}

void RoleExt::SharedCtor() {
  _cached_size_ = 0;
  fightcap_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleExt::~RoleExt() {
  // @@protoc_insertion_point(destructor:test.RoleExt)
  SharedDtor();
}

void RoleExt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleExt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleExt_descriptor_;
}

const RoleExt& RoleExt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fmeta_2eproto();
  return *default_instance_;
}

RoleExt* RoleExt::default_instance_ = NULL;

RoleExt* RoleExt::New() const {
  return new RoleExt;
}

void RoleExt::Clear() {
  fightcap_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.RoleExt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fightcap = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightcap_)));
          set_has_fightcap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.RoleExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.RoleExt)
  return false;
#undef DO_
}

void RoleExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.RoleExt)
  // required uint32 fightcap = 1 [default = 0];
  if (has_fightcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fightcap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.RoleExt)
}

::google::protobuf::uint8* RoleExt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.RoleExt)
  // required uint32 fightcap = 1 [default = 0];
  if (has_fightcap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fightcap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.RoleExt)
  return target;
}

int RoleExt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fightcap = 1 [default = 0];
    if (has_fightcap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightcap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleExt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleExt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleExt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleExt::MergeFrom(const RoleExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightcap()) {
      set_fightcap(from.fightcap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleExt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleExt::CopyFrom(const RoleExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleExt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleExt::Swap(RoleExt* other) {
  if (other != this) {
    std::swap(fightcap_, other->fightcap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleExt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleExt_descriptor_;
  metadata.reflection = RoleExt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Role::kRidFieldNumber;
const int Role::kNameFieldNumber;
const int Role::kBaseFieldNumber;
const int Role::kHeroFieldNumber;
const int Role::kPackFieldNumber;
const int Role::kGrowFieldNumber;
const int Role::kStageFieldNumber;
const int Role::kSnsFieldNumber;
const int Role::kExtFieldNumber;
#endif  // !_MSC_VER

Role::Role()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Role)
}

void Role::InitAsDefaultInstance() {
  base_ = const_cast< ::test::RoleBase*>(&::test::RoleBase::default_instance());
  hero_ = const_cast< ::test::RoleHeroInfo*>(&::test::RoleHeroInfo::default_instance());
  pack_ = const_cast< ::test::RolePackage*>(&::test::RolePackage::default_instance());
  grow_ = const_cast< ::test::RoleGrowth*>(&::test::RoleGrowth::default_instance());
  stage_ = const_cast< ::test::RoleStage*>(&::test::RoleStage::default_instance());
  sns_ = const_cast< ::test::RoleSNS*>(&::test::RoleSNS::default_instance());
  ext_ = const_cast< ::test::RoleExt*>(&::test::RoleExt::default_instance());
}

Role::Role(const Role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.Role)
}

void Role::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_ = NULL;
  hero_ = NULL;
  pack_ = NULL;
  grow_ = NULL;
  stage_ = NULL;
  sns_ = NULL;
  ext_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:test.Role)
  SharedDtor();
}

void Role::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete base_;
    delete hero_;
    delete pack_;
    delete grow_;
    delete stage_;
    delete sns_;
    delete ext_;
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}

const Role& Role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fmeta_2eproto();
  return *default_instance_;
}

Role* Role::default_instance_ = NULL;

Role* Role::New() const {
  return new Role;
}

void Role::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    rid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_base()) {
      if (base_ != NULL) base_->::test::RoleBase::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::test::RoleHeroInfo::Clear();
    }
    if (has_pack()) {
      if (pack_ != NULL) pack_->::test::RolePackage::Clear();
    }
    if (has_grow()) {
      if (grow_ != NULL) grow_->::test::RoleGrowth::Clear();
    }
    if (has_stage()) {
      if (stage_ != NULL) stage_->::test::RoleStage::Clear();
    }
    if (has_sns()) {
      if (sns_ != NULL) sns_->::test::RoleSNS::Clear();
    }
  }
  if (has_ext()) {
    if (ext_ != NULL) ext_->::test::RoleExt::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_base;
        break;
      }

      // required .test.RoleBase base = 3;
      case 3: {
        if (tag == 26) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hero;
        break;
      }

      // required .test.RoleHeroInfo hero = 4;
      case 4: {
        if (tag == 34) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pack;
        break;
      }

      // required .test.RolePackage pack = 5;
      case 5: {
        if (tag == 42) {
         parse_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_grow;
        break;
      }

      // required .test.RoleGrowth grow = 6;
      case 6: {
        if (tag == 50) {
         parse_grow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stage;
        break;
      }

      // required .test.RoleStage stage = 7;
      case 7: {
        if (tag == 58) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sns;
        break;
      }

      // required .test.RoleSNS sns = 8;
      case 8: {
        if (tag == 66) {
         parse_sns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ext;
        break;
      }

      // required .test.RoleExt ext = 9;
      case 9: {
        if (tag == 74) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Role)
  return false;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Role)
  // required uint64 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .test.RoleBase base = 3;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base(), output);
  }

  // required .test.RoleHeroInfo hero = 4;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hero(), output);
  }

  // required .test.RolePackage pack = 5;
  if (has_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pack(), output);
  }

  // required .test.RoleGrowth grow = 6;
  if (has_grow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->grow(), output);
  }

  // required .test.RoleStage stage = 7;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stage(), output);
  }

  // required .test.RoleSNS sns = 8;
  if (has_sns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sns(), output);
  }

  // required .test.RoleExt ext = 9;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Role)
}

::google::protobuf::uint8* Role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.Role)
  // required uint64 rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .test.RoleBase base = 3;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base(), target);
  }

  // required .test.RoleHeroInfo hero = 4;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hero(), target);
  }

  // required .test.RolePackage pack = 5;
  if (has_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pack(), target);
  }

  // required .test.RoleGrowth grow = 6;
  if (has_grow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->grow(), target);
  }

  // required .test.RoleStage stage = 7;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stage(), target);
  }

  // required .test.RoleSNS sns = 8;
  if (has_sns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sns(), target);
  }

  // required .test.RoleExt ext = 9;
  if (has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Role)
  return target;
}

int Role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .test.RoleBase base = 3;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required .test.RoleHeroInfo hero = 4;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

    // required .test.RolePackage pack = 5;
    if (has_pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pack());
    }

    // required .test.RoleGrowth grow = 6;
    if (has_grow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grow());
    }

    // required .test.RoleStage stage = 7;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage());
    }

    // required .test.RoleSNS sns = 8;
    if (has_sns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sns());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .test.RoleExt ext = 9;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_base()) {
      mutable_base()->::test::RoleBase::MergeFrom(from.base());
    }
    if (from.has_hero()) {
      mutable_hero()->::test::RoleHeroInfo::MergeFrom(from.hero());
    }
    if (from.has_pack()) {
      mutable_pack()->::test::RolePackage::MergeFrom(from.pack());
    }
    if (from.has_grow()) {
      mutable_grow()->::test::RoleGrowth::MergeFrom(from.grow());
    }
    if (from.has_stage()) {
      mutable_stage()->::test::RoleStage::MergeFrom(from.stage());
    }
    if (from.has_sns()) {
      mutable_sns()->::test::RoleSNS::MergeFrom(from.sns());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ext()) {
      mutable_ext()->::test::RoleExt::MergeFrom(from.ext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  if (has_pack()) {
    if (!this->pack().IsInitialized()) return false;
  }
  if (has_grow()) {
    if (!this->grow().IsInitialized()) return false;
  }
  if (has_stage()) {
    if (!this->stage().IsInitialized()) return false;
  }
  if (has_sns()) {
    if (!this->sns().IsInitialized()) return false;
  }
  if (has_ext()) {
    if (!this->ext().IsInitialized()) return false;
  }
  return true;
}

void Role::Swap(Role* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(name_, other->name_);
    std::swap(base_, other->base_);
    std::swap(hero_, other->hero_);
    std::swap(pack_, other->pack_);
    std::swap(grow_, other->grow_);
    std::swap(stage_, other->stage_);
    std::swap(sns_, other->sns_);
    std::swap(ext_, other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_descriptor_;
  metadata.reflection = Role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int meta::kVersionFieldNumber;
const int meta::kRoleFieldNumber;
#endif  // !_MSC_VER

meta::meta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.meta)
}

void meta::InitAsDefaultInstance() {
  role_ = const_cast< ::test::Role*>(&::test::Role::default_instance());
}

meta::meta(const meta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:test.meta)
}

void meta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

meta::~meta() {
  // @@protoc_insertion_point(destructor:test.meta)
  SharedDtor();
}

void meta::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
    delete role_;
  }
}

void meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* meta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return meta_descriptor_;
}

const meta& meta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fmeta_2eproto();
  return *default_instance_;
}

meta* meta::default_instance_ = NULL;

meta* meta::New() const {
  return new meta;
}

void meta::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_role()) {
      if (role_ != NULL) role_->::test::Role::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.meta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // optional .test.Role role = 2;
      case 2: {
        if (tag == 18) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.meta)
  return false;
#undef DO_
}

void meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.meta)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional .test.Role role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.meta)
}

::google::protobuf::uint8* meta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.meta)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional .test.Role role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.meta)
  return target;
}

int meta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .test.Role role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void meta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const meta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const meta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void meta::MergeFrom(const meta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_role()) {
      mutable_role()->::test::Role::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void meta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void meta::CopyFrom(const meta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void meta::Swap(meta* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata meta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = meta_descriptor_;
  metadata.reflection = meta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)
