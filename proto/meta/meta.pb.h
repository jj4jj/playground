// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef PROTOBUF_meta_2eproto__INCLUDED
#define PROTOBUF_meta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace meta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_meta_2eproto();
void protobuf_AssignDesc_meta_2eproto();
void protobuf_ShutdownFile_meta_2eproto();

class RoleBase;
class RoleHero;
class RoleHeroInfo;
class RolePackage;
class RoleGrowth;
class RoleStage;
class RoleSNS;
class RoleExt;
class Role;
class meta;

// ===================================================================

class RoleBase : public ::google::protobuf::Message {
 public:
  RoleBase();
  virtual ~RoleBase();

  RoleBase(const RoleBase& from);

  inline RoleBase& operator=(const RoleBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleBase& default_instance();

  void Swap(RoleBase* other);

  // implements Message ----------------------------------------------

  RoleBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleBase& from);
  void MergeFrom(const RoleBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gendor = 1;
  inline bool has_gendor() const;
  inline void clear_gendor();
  static const int kGendorFieldNumber = 1;
  inline ::google::protobuf::uint32 gendor() const;
  inline void set_gendor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.RoleBase)
 private:
  inline void set_has_gendor();
  inline void clear_has_gendor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gendor_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static RoleBase* default_instance_;
};
// -------------------------------------------------------------------

class RoleHero : public ::google::protobuf::Message {
 public:
  RoleHero();
  virtual ~RoleHero();

  RoleHero(const RoleHero& from);

  inline RoleHero& operator=(const RoleHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleHero& default_instance();

  void Swap(RoleHero* other);

  // implements Message ----------------------------------------------

  RoleHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleHero& from);
  void MergeFrom(const RoleHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.RoleHero)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static RoleHero* default_instance_;
};
// -------------------------------------------------------------------

class RoleHeroInfo : public ::google::protobuf::Message {
 public:
  RoleHeroInfo();
  virtual ~RoleHeroInfo();

  RoleHeroInfo(const RoleHeroInfo& from);

  inline RoleHeroInfo& operator=(const RoleHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleHeroInfo& default_instance();

  void Swap(RoleHeroInfo* other);

  // implements Message ----------------------------------------------

  RoleHeroInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleHeroInfo& from);
  void MergeFrom(const RoleHeroInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .meta.RoleHero heros = 1;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 1;
  inline const ::meta::RoleHero& heros(int index) const;
  inline ::meta::RoleHero* mutable_heros(int index);
  inline ::meta::RoleHero* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::meta::RoleHero >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::meta::RoleHero >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:meta.RoleHeroInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::meta::RoleHero > heros_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static RoleHeroInfo* default_instance_;
};
// -------------------------------------------------------------------

class RolePackage : public ::google::protobuf::Message {
 public:
  RolePackage();
  virtual ~RolePackage();

  RolePackage(const RolePackage& from);

  inline RolePackage& operator=(const RolePackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RolePackage& default_instance();

  void Swap(RolePackage* other);

  // implements Message ----------------------------------------------

  RolePackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RolePackage& from);
  void MergeFrom(const RolePackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 maxGrid = 1;
  inline bool has_maxgrid() const;
  inline void clear_maxgrid();
  static const int kMaxGridFieldNumber = 1;
  inline ::google::protobuf::uint32 maxgrid() const;
  inline void set_maxgrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.RolePackage)
 private:
  inline void set_has_maxgrid();
  inline void clear_has_maxgrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 maxgrid_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static RolePackage* default_instance_;
};
// -------------------------------------------------------------------

class RoleGrowth : public ::google::protobuf::Message {
 public:
  RoleGrowth();
  virtual ~RoleGrowth();

  RoleGrowth(const RoleGrowth& from);

  inline RoleGrowth& operator=(const RoleGrowth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleGrowth& default_instance();

  void Swap(RoleGrowth* other);

  // implements Message ----------------------------------------------

  RoleGrowth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleGrowth& from);
  void MergeFrom(const RoleGrowth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.RoleGrowth)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static RoleGrowth* default_instance_;
};
// -------------------------------------------------------------------

class RoleStage : public ::google::protobuf::Message {
 public:
  RoleStage();
  virtual ~RoleStage();

  RoleStage(const RoleStage& from);

  inline RoleStage& operator=(const RoleStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleStage& default_instance();

  void Swap(RoleStage* other);

  // implements Message ----------------------------------------------

  RoleStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleStage& from);
  void MergeFrom(const RoleStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 curStage = 1;
  inline bool has_curstage() const;
  inline void clear_curstage();
  static const int kCurStageFieldNumber = 1;
  inline ::google::protobuf::uint32 curstage() const;
  inline void set_curstage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.RoleStage)
 private:
  inline void set_has_curstage();
  inline void clear_has_curstage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 curstage_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static RoleStage* default_instance_;
};
// -------------------------------------------------------------------

class RoleSNS : public ::google::protobuf::Message {
 public:
  RoleSNS();
  virtual ~RoleSNS();

  RoleSNS(const RoleSNS& from);

  inline RoleSNS& operator=(const RoleSNS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleSNS& default_instance();

  void Swap(RoleSNS* other);

  // implements Message ----------------------------------------------

  RoleSNS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleSNS& from);
  void MergeFrom(const RoleSNS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 maxfrinds = 1;
  inline bool has_maxfrinds() const;
  inline void clear_maxfrinds();
  static const int kMaxfrindsFieldNumber = 1;
  inline ::google::protobuf::uint32 maxfrinds() const;
  inline void set_maxfrinds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.RoleSNS)
 private:
  inline void set_has_maxfrinds();
  inline void clear_has_maxfrinds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 maxfrinds_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static RoleSNS* default_instance_;
};
// -------------------------------------------------------------------

class RoleExt : public ::google::protobuf::Message {
 public:
  RoleExt();
  virtual ~RoleExt();

  RoleExt(const RoleExt& from);

  inline RoleExt& operator=(const RoleExt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleExt& default_instance();

  void Swap(RoleExt* other);

  // implements Message ----------------------------------------------

  RoleExt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleExt& from);
  void MergeFrom(const RoleExt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 fightcap = 1;
  inline bool has_fightcap() const;
  inline void clear_fightcap();
  static const int kFightcapFieldNumber = 1;
  inline ::google::protobuf::uint32 fightcap() const;
  inline void set_fightcap(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:meta.RoleExt)
 private:
  inline void set_has_fightcap();
  inline void clear_has_fightcap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 fightcap_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static RoleExt* default_instance_;
};
// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  void Swap(Role* other);

  // implements Message ----------------------------------------------

  Role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .meta.RoleBase base = 3;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 3;
  inline const ::meta::RoleBase& base() const;
  inline ::meta::RoleBase* mutable_base();
  inline ::meta::RoleBase* release_base();
  inline void set_allocated_base(::meta::RoleBase* base);

  // required .meta.RoleHeroInfo hero = 4;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 4;
  inline const ::meta::RoleHeroInfo& hero() const;
  inline ::meta::RoleHeroInfo* mutable_hero();
  inline ::meta::RoleHeroInfo* release_hero();
  inline void set_allocated_hero(::meta::RoleHeroInfo* hero);

  // required .meta.RolePackage pack = 5;
  inline bool has_pack() const;
  inline void clear_pack();
  static const int kPackFieldNumber = 5;
  inline const ::meta::RolePackage& pack() const;
  inline ::meta::RolePackage* mutable_pack();
  inline ::meta::RolePackage* release_pack();
  inline void set_allocated_pack(::meta::RolePackage* pack);

  // required .meta.RoleGrowth grow = 6;
  inline bool has_grow() const;
  inline void clear_grow();
  static const int kGrowFieldNumber = 6;
  inline const ::meta::RoleGrowth& grow() const;
  inline ::meta::RoleGrowth* mutable_grow();
  inline ::meta::RoleGrowth* release_grow();
  inline void set_allocated_grow(::meta::RoleGrowth* grow);

  // required .meta.RoleStage stage = 7;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 7;
  inline const ::meta::RoleStage& stage() const;
  inline ::meta::RoleStage* mutable_stage();
  inline ::meta::RoleStage* release_stage();
  inline void set_allocated_stage(::meta::RoleStage* stage);

  // required .meta.RoleSNS sns = 8;
  inline bool has_sns() const;
  inline void clear_sns();
  static const int kSnsFieldNumber = 8;
  inline const ::meta::RoleSNS& sns() const;
  inline ::meta::RoleSNS* mutable_sns();
  inline ::meta::RoleSNS* release_sns();
  inline void set_allocated_sns(::meta::RoleSNS* sns);

  // required .meta.RoleExt ext = 9;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 9;
  inline const ::meta::RoleExt& ext() const;
  inline ::meta::RoleExt* mutable_ext();
  inline ::meta::RoleExt* release_ext();
  inline void set_allocated_ext(::meta::RoleExt* ext);

  // @@protoc_insertion_point(class_scope:meta.Role)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_pack();
  inline void clear_has_pack();
  inline void set_has_grow();
  inline void clear_has_grow();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_sns();
  inline void clear_has_sns();
  inline void set_has_ext();
  inline void clear_has_ext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rid_;
  ::std::string* name_;
  ::meta::RoleBase* base_;
  ::meta::RoleHeroInfo* hero_;
  ::meta::RolePackage* pack_;
  ::meta::RoleGrowth* grow_;
  ::meta::RoleStage* stage_;
  ::meta::RoleSNS* sns_;
  ::meta::RoleExt* ext_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static Role* default_instance_;
};
// -------------------------------------------------------------------

class meta : public ::google::protobuf::Message {
 public:
  meta();
  virtual ~meta();

  meta(const meta& from);

  inline meta& operator=(const meta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const meta& default_instance();

  void Swap(meta* other);

  // implements Message ----------------------------------------------

  meta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const meta& from);
  void MergeFrom(const meta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional .meta.Role role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline const ::meta::Role& role() const;
  inline ::meta::Role* mutable_role();
  inline ::meta::Role* release_role();
  inline void set_allocated_role(::meta::Role* role);

  // @@protoc_insertion_point(class_scope:meta.meta)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_role();
  inline void clear_has_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_;
  ::meta::Role* role_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static meta* default_instance_;
};
// ===================================================================


// ===================================================================

// RoleBase

// required uint32 gendor = 1;
inline bool RoleBase::has_gendor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleBase::set_has_gendor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleBase::clear_has_gendor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleBase::clear_gendor() {
  gendor_ = 0u;
  clear_has_gendor();
}
inline ::google::protobuf::uint32 RoleBase::gendor() const {
  // @@protoc_insertion_point(field_get:meta.RoleBase.gendor)
  return gendor_;
}
inline void RoleBase::set_gendor(::google::protobuf::uint32 value) {
  set_has_gendor();
  gendor_ = value;
  // @@protoc_insertion_point(field_set:meta.RoleBase.gendor)
}

// -------------------------------------------------------------------

// RoleHero

// required uint32 id = 1;
inline bool RoleHero::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleHero::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleHero::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleHero::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RoleHero::id() const {
  // @@protoc_insertion_point(field_get:meta.RoleHero.id)
  return id_;
}
inline void RoleHero::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:meta.RoleHero.id)
}

// -------------------------------------------------------------------

// RoleHeroInfo

// repeated .meta.RoleHero heros = 1;
inline int RoleHeroInfo::heros_size() const {
  return heros_.size();
}
inline void RoleHeroInfo::clear_heros() {
  heros_.Clear();
}
inline const ::meta::RoleHero& RoleHeroInfo::heros(int index) const {
  // @@protoc_insertion_point(field_get:meta.RoleHeroInfo.heros)
  return heros_.Get(index);
}
inline ::meta::RoleHero* RoleHeroInfo::mutable_heros(int index) {
  // @@protoc_insertion_point(field_mutable:meta.RoleHeroInfo.heros)
  return heros_.Mutable(index);
}
inline ::meta::RoleHero* RoleHeroInfo::add_heros() {
  // @@protoc_insertion_point(field_add:meta.RoleHeroInfo.heros)
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::meta::RoleHero >&
RoleHeroInfo::heros() const {
  // @@protoc_insertion_point(field_list:meta.RoleHeroInfo.heros)
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::meta::RoleHero >*
RoleHeroInfo::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:meta.RoleHeroInfo.heros)
  return &heros_;
}

// -------------------------------------------------------------------

// RolePackage

// required uint32 maxGrid = 1;
inline bool RolePackage::has_maxgrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RolePackage::set_has_maxgrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RolePackage::clear_has_maxgrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RolePackage::clear_maxgrid() {
  maxgrid_ = 0u;
  clear_has_maxgrid();
}
inline ::google::protobuf::uint32 RolePackage::maxgrid() const {
  // @@protoc_insertion_point(field_get:meta.RolePackage.maxGrid)
  return maxgrid_;
}
inline void RolePackage::set_maxgrid(::google::protobuf::uint32 value) {
  set_has_maxgrid();
  maxgrid_ = value;
  // @@protoc_insertion_point(field_set:meta.RolePackage.maxGrid)
}

// -------------------------------------------------------------------

// RoleGrowth

// required uint32 level = 1;
inline bool RoleGrowth::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleGrowth::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleGrowth::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleGrowth::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RoleGrowth::level() const {
  // @@protoc_insertion_point(field_get:meta.RoleGrowth.level)
  return level_;
}
inline void RoleGrowth::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:meta.RoleGrowth.level)
}

// required uint32 exp = 2;
inline bool RoleGrowth::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleGrowth::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleGrowth::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleGrowth::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 RoleGrowth::exp() const {
  // @@protoc_insertion_point(field_get:meta.RoleGrowth.exp)
  return exp_;
}
inline void RoleGrowth::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:meta.RoleGrowth.exp)
}

// -------------------------------------------------------------------

// RoleStage

// required uint32 curStage = 1;
inline bool RoleStage::has_curstage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleStage::set_has_curstage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleStage::clear_has_curstage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleStage::clear_curstage() {
  curstage_ = 0u;
  clear_has_curstage();
}
inline ::google::protobuf::uint32 RoleStage::curstage() const {
  // @@protoc_insertion_point(field_get:meta.RoleStage.curStage)
  return curstage_;
}
inline void RoleStage::set_curstage(::google::protobuf::uint32 value) {
  set_has_curstage();
  curstage_ = value;
  // @@protoc_insertion_point(field_set:meta.RoleStage.curStage)
}

// -------------------------------------------------------------------

// RoleSNS

// required uint32 maxfrinds = 1;
inline bool RoleSNS::has_maxfrinds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleSNS::set_has_maxfrinds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleSNS::clear_has_maxfrinds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleSNS::clear_maxfrinds() {
  maxfrinds_ = 0u;
  clear_has_maxfrinds();
}
inline ::google::protobuf::uint32 RoleSNS::maxfrinds() const {
  // @@protoc_insertion_point(field_get:meta.RoleSNS.maxfrinds)
  return maxfrinds_;
}
inline void RoleSNS::set_maxfrinds(::google::protobuf::uint32 value) {
  set_has_maxfrinds();
  maxfrinds_ = value;
  // @@protoc_insertion_point(field_set:meta.RoleSNS.maxfrinds)
}

// -------------------------------------------------------------------

// RoleExt

// required uint32 fightcap = 1;
inline bool RoleExt::has_fightcap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleExt::set_has_fightcap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleExt::clear_has_fightcap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleExt::clear_fightcap() {
  fightcap_ = 0u;
  clear_has_fightcap();
}
inline ::google::protobuf::uint32 RoleExt::fightcap() const {
  // @@protoc_insertion_point(field_get:meta.RoleExt.fightcap)
  return fightcap_;
}
inline void RoleExt::set_fightcap(::google::protobuf::uint32 value) {
  set_has_fightcap();
  fightcap_ = value;
  // @@protoc_insertion_point(field_set:meta.RoleExt.fightcap)
}

// -------------------------------------------------------------------

// Role

// required uint64 rid = 1;
inline bool Role::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Role::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Role::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Role::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 Role::rid() const {
  // @@protoc_insertion_point(field_get:meta.Role.rid)
  return rid_;
}
inline void Role::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:meta.Role.rid)
}

// required string name = 2;
inline bool Role::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Role::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Role::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Role::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:meta.Role.name)
  return *name_;
}
inline void Role::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:meta.Role.name)
}
inline void Role::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:meta.Role.name)
}
inline void Role::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meta.Role.name)
}
inline ::std::string* Role::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:meta.Role.name)
  return name_;
}
inline ::std::string* Role::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Role::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:meta.Role.name)
}

// required .meta.RoleBase base = 3;
inline bool Role::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Role::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Role::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Role::clear_base() {
  if (base_ != NULL) base_->::meta::RoleBase::Clear();
  clear_has_base();
}
inline const ::meta::RoleBase& Role::base() const {
  // @@protoc_insertion_point(field_get:meta.Role.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::meta::RoleBase* Role::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::meta::RoleBase;
  // @@protoc_insertion_point(field_mutable:meta.Role.base)
  return base_;
}
inline ::meta::RoleBase* Role::release_base() {
  clear_has_base();
  ::meta::RoleBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void Role::set_allocated_base(::meta::RoleBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:meta.Role.base)
}

// required .meta.RoleHeroInfo hero = 4;
inline bool Role::has_hero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Role::set_has_hero() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Role::clear_has_hero() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Role::clear_hero() {
  if (hero_ != NULL) hero_->::meta::RoleHeroInfo::Clear();
  clear_has_hero();
}
inline const ::meta::RoleHeroInfo& Role::hero() const {
  // @@protoc_insertion_point(field_get:meta.Role.hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::meta::RoleHeroInfo* Role::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::meta::RoleHeroInfo;
  // @@protoc_insertion_point(field_mutable:meta.Role.hero)
  return hero_;
}
inline ::meta::RoleHeroInfo* Role::release_hero() {
  clear_has_hero();
  ::meta::RoleHeroInfo* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void Role::set_allocated_hero(::meta::RoleHeroInfo* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:meta.Role.hero)
}

// required .meta.RolePackage pack = 5;
inline bool Role::has_pack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Role::set_has_pack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Role::clear_has_pack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Role::clear_pack() {
  if (pack_ != NULL) pack_->::meta::RolePackage::Clear();
  clear_has_pack();
}
inline const ::meta::RolePackage& Role::pack() const {
  // @@protoc_insertion_point(field_get:meta.Role.pack)
  return pack_ != NULL ? *pack_ : *default_instance_->pack_;
}
inline ::meta::RolePackage* Role::mutable_pack() {
  set_has_pack();
  if (pack_ == NULL) pack_ = new ::meta::RolePackage;
  // @@protoc_insertion_point(field_mutable:meta.Role.pack)
  return pack_;
}
inline ::meta::RolePackage* Role::release_pack() {
  clear_has_pack();
  ::meta::RolePackage* temp = pack_;
  pack_ = NULL;
  return temp;
}
inline void Role::set_allocated_pack(::meta::RolePackage* pack) {
  delete pack_;
  pack_ = pack;
  if (pack) {
    set_has_pack();
  } else {
    clear_has_pack();
  }
  // @@protoc_insertion_point(field_set_allocated:meta.Role.pack)
}

// required .meta.RoleGrowth grow = 6;
inline bool Role::has_grow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Role::set_has_grow() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Role::clear_has_grow() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Role::clear_grow() {
  if (grow_ != NULL) grow_->::meta::RoleGrowth::Clear();
  clear_has_grow();
}
inline const ::meta::RoleGrowth& Role::grow() const {
  // @@protoc_insertion_point(field_get:meta.Role.grow)
  return grow_ != NULL ? *grow_ : *default_instance_->grow_;
}
inline ::meta::RoleGrowth* Role::mutable_grow() {
  set_has_grow();
  if (grow_ == NULL) grow_ = new ::meta::RoleGrowth;
  // @@protoc_insertion_point(field_mutable:meta.Role.grow)
  return grow_;
}
inline ::meta::RoleGrowth* Role::release_grow() {
  clear_has_grow();
  ::meta::RoleGrowth* temp = grow_;
  grow_ = NULL;
  return temp;
}
inline void Role::set_allocated_grow(::meta::RoleGrowth* grow) {
  delete grow_;
  grow_ = grow;
  if (grow) {
    set_has_grow();
  } else {
    clear_has_grow();
  }
  // @@protoc_insertion_point(field_set_allocated:meta.Role.grow)
}

// required .meta.RoleStage stage = 7;
inline bool Role::has_stage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Role::set_has_stage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Role::clear_has_stage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Role::clear_stage() {
  if (stage_ != NULL) stage_->::meta::RoleStage::Clear();
  clear_has_stage();
}
inline const ::meta::RoleStage& Role::stage() const {
  // @@protoc_insertion_point(field_get:meta.Role.stage)
  return stage_ != NULL ? *stage_ : *default_instance_->stage_;
}
inline ::meta::RoleStage* Role::mutable_stage() {
  set_has_stage();
  if (stage_ == NULL) stage_ = new ::meta::RoleStage;
  // @@protoc_insertion_point(field_mutable:meta.Role.stage)
  return stage_;
}
inline ::meta::RoleStage* Role::release_stage() {
  clear_has_stage();
  ::meta::RoleStage* temp = stage_;
  stage_ = NULL;
  return temp;
}
inline void Role::set_allocated_stage(::meta::RoleStage* stage) {
  delete stage_;
  stage_ = stage;
  if (stage) {
    set_has_stage();
  } else {
    clear_has_stage();
  }
  // @@protoc_insertion_point(field_set_allocated:meta.Role.stage)
}

// required .meta.RoleSNS sns = 8;
inline bool Role::has_sns() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Role::set_has_sns() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Role::clear_has_sns() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Role::clear_sns() {
  if (sns_ != NULL) sns_->::meta::RoleSNS::Clear();
  clear_has_sns();
}
inline const ::meta::RoleSNS& Role::sns() const {
  // @@protoc_insertion_point(field_get:meta.Role.sns)
  return sns_ != NULL ? *sns_ : *default_instance_->sns_;
}
inline ::meta::RoleSNS* Role::mutable_sns() {
  set_has_sns();
  if (sns_ == NULL) sns_ = new ::meta::RoleSNS;
  // @@protoc_insertion_point(field_mutable:meta.Role.sns)
  return sns_;
}
inline ::meta::RoleSNS* Role::release_sns() {
  clear_has_sns();
  ::meta::RoleSNS* temp = sns_;
  sns_ = NULL;
  return temp;
}
inline void Role::set_allocated_sns(::meta::RoleSNS* sns) {
  delete sns_;
  sns_ = sns;
  if (sns) {
    set_has_sns();
  } else {
    clear_has_sns();
  }
  // @@protoc_insertion_point(field_set_allocated:meta.Role.sns)
}

// required .meta.RoleExt ext = 9;
inline bool Role::has_ext() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Role::set_has_ext() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Role::clear_has_ext() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Role::clear_ext() {
  if (ext_ != NULL) ext_->::meta::RoleExt::Clear();
  clear_has_ext();
}
inline const ::meta::RoleExt& Role::ext() const {
  // @@protoc_insertion_point(field_get:meta.Role.ext)
  return ext_ != NULL ? *ext_ : *default_instance_->ext_;
}
inline ::meta::RoleExt* Role::mutable_ext() {
  set_has_ext();
  if (ext_ == NULL) ext_ = new ::meta::RoleExt;
  // @@protoc_insertion_point(field_mutable:meta.Role.ext)
  return ext_;
}
inline ::meta::RoleExt* Role::release_ext() {
  clear_has_ext();
  ::meta::RoleExt* temp = ext_;
  ext_ = NULL;
  return temp;
}
inline void Role::set_allocated_ext(::meta::RoleExt* ext) {
  delete ext_;
  ext_ = ext;
  if (ext) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  // @@protoc_insertion_point(field_set_allocated:meta.Role.ext)
}

// -------------------------------------------------------------------

// meta

// required string version = 1;
inline bool meta::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void meta::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void meta::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void meta::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& meta::version() const {
  // @@protoc_insertion_point(field_get:meta.meta.version)
  return *version_;
}
inline void meta::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:meta.meta.version)
}
inline void meta::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:meta.meta.version)
}
inline void meta::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meta.meta.version)
}
inline ::std::string* meta::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:meta.meta.version)
  return version_;
}
inline ::std::string* meta::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void meta::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:meta.meta.version)
}

// optional .meta.Role role = 2;
inline bool meta::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void meta::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void meta::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void meta::clear_role() {
  if (role_ != NULL) role_->::meta::Role::Clear();
  clear_has_role();
}
inline const ::meta::Role& meta::role() const {
  // @@protoc_insertion_point(field_get:meta.meta.role)
  return role_ != NULL ? *role_ : *default_instance_->role_;
}
inline ::meta::Role* meta::mutable_role() {
  set_has_role();
  if (role_ == NULL) role_ = new ::meta::Role;
  // @@protoc_insertion_point(field_mutable:meta.meta.role)
  return role_;
}
inline ::meta::Role* meta::release_role() {
  clear_has_role();
  ::meta::Role* temp = role_;
  role_ = NULL;
  return temp;
}
inline void meta::set_allocated_role(::meta::Role* role) {
  delete role_;
  role_ = role;
  if (role) {
    set_has_role();
  } else {
    clear_has_role();
  }
  // @@protoc_insertion_point(field_set_allocated:meta.meta.role)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_meta_2eproto__INCLUDED
